# Calcula el área bajo la curva entre los puntos seleccionados y unos más grandes y unos más pequeños, hasta "npad" puntos más y "npad" menos.
k <- 1
for (i in -npad:npad){
for (j in -npad:npad){
AreaTotal[k] <- integrate.xy(E,
corriente,
E[ppi[1]+i],
E[ppi[2]+j])
CoorTrap <- matrix(c(E[ppi[1]+i],
corriente[ppi[1]+i],
E[ppi[2]+j],
corriente[ppi[2]+j]),
nrow=2,
ncol=2,
byrow=T,
dimnames = list(c("Inicio", "Final"),
c("Potencial","Corriente")))
AreaTrap[k]  <- integrate.xy(CoorTrap[,1], CoorTrap[,2])
AreaNeta[k]  <- AreaTotal[k]-AreaTrap[k]
k <- k+1
}
}
hist(AreaNeta)
boxplot(AreaNeta)
abline(h= median(AreaNeta))
ATpro <- mean(AreaNeta); ATsd <- sd(AreaNeta); pCV <- ATsd*100/ATpro
# Cálculo del intervalo de confianza del área calculada:
muestras=(npad*2+1)**2 # Igual a k-1.
# La distribución t de student y sus relacionados se obtiene con dt = density, pt distribution function (¿Probability?), qt = quantile y rt = genera un número aleatorio con distribución t.
tstudent <- qt(0.975,df=muestras-1) # 95% confianza ¿Por qué? RTA: El valor del cuantil t calculado es de una cola. Es decir se calcula para una cola y como es simétrico el otro será igual.
intConf  <- tstudent*ATsd/sqrt(muestras)
LimInf   <- ATpro - intConf
LimSup   <- ATpro + intConf
npad      <- 3 # El número de puntos antes y despues del escogido.
AreaTotal2 <- vector(mode="numeric",
length=(npad*2+1)**2)
AreaTrap2  <- vector(mode="numeric",
length=(npad*2+1)**2)
AreaNeta2  <- vector(mode="numeric",
length=(npad*2+1)**2)
plot(E2,
corriente2,
type='l')
abline(0,0,
col="blue") # No aplica en este caso.
ppi <- identify(E2,
corriente2,
labels=c("Inicial","Final"),
n=2,
atpen=T,
col="red") # Puntos para la integración.
CoorTrap2 <- matrix(c(E2[ppi[1]], # se utiliza el punto incial de seleccion en el grafico como una posicion en el vector de potencial para seleccionar y guardar en la posicion 2,1 de la matriz CoorTRap
corriente2[ppi[1]],
E2[ppi[2]],
corriente2[ppi[2]]),
nrow=2,
ncol=2,
byrow=T,
dimnames = list(c("Inicio", "Final"),
c("Potencial", "Corriente")))
# Coloca puntos blue entre los cuales se hará la integración:
points(CoorTrap2[1,1],
CoorTrap2[1,2],
pch=13,
col="blue")
points(CoorTrap2[2,1],
CoorTrap2[2,2],
pch=13,
col="blue")
# Hace las l?neas para destacar como se calculó el área:
arrows(CoorTrap2[1,1],
CoorTrap2[1,2],
CoorTrap2[2,1],
CoorTrap2[2,2],
col="red",
code=3) # La l?nea base (entre los puntos seleccionados).
abline(CoorTrap2[1,2]
,0,
col="blue") # Horizontal desde el punto de partida.
abline(v=CoorTrap2[1,1],
col="green")
abline(v=CoorTrap2[2,1],
col="green")
# Calcula el área bajo la curva entre los puntos seleccionados y unos más grandes y unos más pequeños, hasta "npad" puntos más y "npad" menos.
k <- 1
for (i in -npad:npad){
for (j in -npad:npad){
AreaTotal2[k] <- integrate.xy(E2,
corriente2,
E2[ppi[1]+i],
E2[ppi[2]+j])
CoorTrap2 <- matrix(c(E2[ppi[1]+i],
corriente2[ppi[1]+i],
E2[ppi[2]+j],
corriente2[ppi[2]+j]),
nrow=2, ncol=2,
byrow=T, dimnames = list(c("Inicio", "Final"),
c("Potencial", "Corriente")))
AreaTrap2[k]  <- integrate.xy(CoorTrap2[,1],
CoorTrap2[,2])
AreaNeta2[k]  <- AreaTotal2[k]-AreaTrap2[k]
k <- k+1
}
}
hist(AreaNeta2)
boxplot(AreaNeta2)
abline(h= median(AreaNeta2))
ATpro2 <- mean(AreaNeta2); ATsd2 <- sd(AreaNeta2); pCV2 <- ATsd2*100/ATpro2
# Cálculo del intervalo de confianza del área calculada:
muestras=(npad*2+1)**2 # Igual a k-1.
# La distribución t de student y sus relacionados se obtiene con dt = density, pt distribution function (¿Probability?), qt = quantile y rt = genera un número aleatorio con distribución t.
tstudent2 <- qt(0.975,df=muestras-1) # 95% confianza ¿Por qué? RTA: El valor del cuantil t calculado es de una cola. Es decir se calcula para una cola y como es simétrico el otro será igual.
intConf2  <- tstudent*ATsd2/sqrt(muestras)
LimInf2   <- ATpro2 - intConf2
LimSup2   <- ATpro2 + intConf2
Valores    <- c(replica,nivel, ATpro, ATsd, pCV, tstudent, intConf, intConf*100/ATpro, ATpro2, ATsd2, pCV2, tstudent2, intConf2, intConf2*100/ATpro2)
Resultados <- cbind(Resultados,
Valores)
}
}
Resultados
tResultados <- t(Resultados)
Resultadosarea <- as.data.frame(tResultados)
View(Resultadosarea)
library(readxl)
Nombres <- c("replica","nivel", "Area.Cd", "SD.Cd", "%CV.Cd", "tstudentCd", "u.Area.Cd", "%Incertidumbre/PromedioCd","Area.bi", "SD.Bi", "%CV.Bi", "tstudentBi", "u.Area.Bi", "%Incertidumbre/PromedioBi")
Valores <- c(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)
Resultados <- data.frame(Valores=Valores,row.names=Nombres)
Resultados <- Resultados[,FALSE]
#--cambiar excel
lista_fechas <- excel_sheets(path="./MS_julio_1.xlsx")
#--cambiar excel--para AE adicionar M(col 2) en for (linea 40) --para AE single point 2:3
for (replica in 1:length(lista_fechas)){
SWASV_confechas <- read_excel(path="MS_julio_1.xlsx",
sheet = lista_fechas[replica])
CdSWASV <-as.data.frame(SWASV_confechas) #crear data.frame del tibble anterior para poder utilizarlo
matplot(CdSWASV[,1],
CdSWASV[,2:3]*1e6,
type="l",
xlab="E / V vs. (Ag/AgCl)",
ylab="current / uA")
uACd  <- CdSWASV[10:100,] # Selecciona la region del pico. Cd (INM=20:80,UN=101:161) Bi (INM=120:220,UN=221:271)
#win.graph()
matplot(uACd[,1],
uACd[,2:3]*1e6,
type="l")
BiSWASV <- CdSWASV[120:220,] # Selecciona la region del pico. Cd (INM=20:80,UN=101:161) Bi (INM=120:220,UN=221:271)
matplot(BiSWASV [,1],
BiSWASV [,2:3]*1e6,
type="l")
for (nivel in 2:3) {
E <- uACd[,1]; corriente <- uACd[,nivel]*1e6
E2 <- BiSWASV[,1]; corriente2 <- BiSWASV[,nivel]*1e6
require(sfsmisc) # El paquete para seleccionar los puntos desde el gráfico.
# Se definen los vectores y otros necesarios para almacenar la información que se calcula:
npad      <- 3 # El número de puntos antes y despues del escogido.
AreaTotal <- vector(mode="numeric",
length=(npad*2+1)**2)
AreaTrap  <- vector(mode="numeric",
length=(npad*2+1)**2)
AreaNeta  <- vector(mode="numeric",
length=(npad*2+1)**2)
plot(E,
corriente,
type='l')
abline(0,0,
col="blue")
ppi <- identify(E,
corriente,
labels=c("Inicial","Final"),
n=2,
atpen=T,
col="red") # Puntos para la integración.
CoorTrap <- matrix(c(E[ppi[1]], # se utiliza el punto incial de seleccion en el grafico como una posicion en el vector de potencial para seleccionar y guardar en la posicion 2,1 de la matriz CoorTRap
corriente[ppi[1]],
E[ppi[2]],
corriente[ppi[2]]),
nrow=2,
ncol=2,
byrow=T,
dimnames = list(c("Inicio", "Final"),
c("Potencial", "Corriente")))
# Coloca puntos blue entre los cuales se hará la integración:
points(CoorTrap[1,1],
CoorTrap[1,2],
pch=13,
col="blue")
points(CoorTrap[2,1],
CoorTrap[2,2],
pch=13,
col="blue")
# Hace las lineas para destacar como se calculó el área:
arrows(CoorTrap[1,1],
CoorTrap[1,2],
CoorTrap[2,1],
CoorTrap[2,2],
col="red",
code=3) # La linea base (entre los puntos seleccionados).
abline(CoorTrap[1,2],
0,
col="blue") # Horizontal desde el punto de partida.
abline(v=CoorTrap[1,1],
col="green")
abline(v=CoorTrap[2,1],
col="green")
# Calcula el área bajo la curva entre los puntos seleccionados y unos más grandes y unos más pequeños, hasta "npad" puntos más y "npad" menos.
k <- 1
for (i in -npad:npad){
for (j in -npad:npad){
AreaTotal[k] <- integrate.xy(E,
corriente,
E[ppi[1]+i],
E[ppi[2]+j])
CoorTrap <- matrix(c(E[ppi[1]+i],
corriente[ppi[1]+i],
E[ppi[2]+j],
corriente[ppi[2]+j]),
nrow=2,
ncol=2,
byrow=T,
dimnames = list(c("Inicio", "Final"),
c("Potencial","Corriente")))
AreaTrap[k]  <- integrate.xy(CoorTrap[,1], CoorTrap[,2])
AreaNeta[k]  <- AreaTotal[k]-AreaTrap[k]
k <- k+1
}
}
hist(AreaNeta)
boxplot(AreaNeta)
abline(h= median(AreaNeta))
ATpro <- mean(AreaNeta); ATsd <- sd(AreaNeta); pCV <- ATsd*100/ATpro
# Cálculo del intervalo de confianza del área calculada:
muestras=(npad*2+1)**2 # Igual a k-1.
# La distribución t de student y sus relacionados se obtiene con dt = density, pt distribution function (¿Probability?), qt = quantile y rt = genera un número aleatorio con distribución t.
tstudent <- qt(0.975,df=muestras-1) # 95% confianza ¿Por qué? RTA: El valor del cuantil t calculado es de una cola. Es decir se calcula para una cola y como es simétrico el otro será igual.
intConf  <- tstudent*ATsd/sqrt(muestras)
LimInf   <- ATpro - intConf
LimSup   <- ATpro + intConf
npad      <- 3 # El número de puntos antes y despues del escogido.
AreaTotal2 <- vector(mode="numeric",
length=(npad*2+1)**2)
AreaTrap2  <- vector(mode="numeric",
length=(npad*2+1)**2)
AreaNeta2  <- vector(mode="numeric",
length=(npad*2+1)**2)
plot(E2,
corriente2,
type='l')
abline(0,0,
col="blue") # No aplica en este caso.
ppi <- identify(E2,
corriente2,
labels=c("Inicial","Final"),
n=2,
atpen=T,
col="red") # Puntos para la integración.
CoorTrap2 <- matrix(c(E2[ppi[1]], # se utiliza el punto incial de seleccion en el grafico como una posicion en el vector de potencial para seleccionar y guardar en la posicion 2,1 de la matriz CoorTRap
corriente2[ppi[1]],
E2[ppi[2]],
corriente2[ppi[2]]),
nrow=2,
ncol=2,
byrow=T,
dimnames = list(c("Inicio", "Final"),
c("Potencial", "Corriente")))
# Coloca puntos blue entre los cuales se hará la integración:
points(CoorTrap2[1,1],
CoorTrap2[1,2],
pch=13,
col="blue")
points(CoorTrap2[2,1],
CoorTrap2[2,2],
pch=13,
col="blue")
# Hace las l?neas para destacar como se calculó el área:
arrows(CoorTrap2[1,1],
CoorTrap2[1,2],
CoorTrap2[2,1],
CoorTrap2[2,2],
col="red",
code=3) # La l?nea base (entre los puntos seleccionados).
abline(CoorTrap2[1,2]
,0,
col="blue") # Horizontal desde el punto de partida.
abline(v=CoorTrap2[1,1],
col="green")
abline(v=CoorTrap2[2,1],
col="green")
# Calcula el área bajo la curva entre los puntos seleccionados y unos más grandes y unos más pequeños, hasta "npad" puntos más y "npad" menos.
k <- 1
for (i in -npad:npad){
for (j in -npad:npad){
AreaTotal2[k] <- integrate.xy(E2,
corriente2,
E2[ppi[1]+i],
E2[ppi[2]+j])
CoorTrap2 <- matrix(c(E2[ppi[1]+i],
corriente2[ppi[1]+i],
E2[ppi[2]+j],
corriente2[ppi[2]+j]),
nrow=2, ncol=2,
byrow=T, dimnames = list(c("Inicio", "Final"),
c("Potencial", "Corriente")))
AreaTrap2[k]  <- integrate.xy(CoorTrap2[,1],
CoorTrap2[,2])
AreaNeta2[k]  <- AreaTotal2[k]-AreaTrap2[k]
k <- k+1
}
}
hist(AreaNeta2)
boxplot(AreaNeta2)
abline(h= median(AreaNeta2))
ATpro2 <- mean(AreaNeta2); ATsd2 <- sd(AreaNeta2); pCV2 <- ATsd2*100/ATpro2
# Cálculo del intervalo de confianza del área calculada:
muestras=(npad*2+1)**2 # Igual a k-1.
# La distribución t de student y sus relacionados se obtiene con dt = density, pt distribution function (¿Probability?), qt = quantile y rt = genera un número aleatorio con distribución t.
tstudent2 <- qt(0.975,df=muestras-1) # 95% confianza ¿Por qué? RTA: El valor del cuantil t calculado es de una cola. Es decir se calcula para una cola y como es simétrico el otro será igual.
intConf2  <- tstudent*ATsd2/sqrt(muestras)
LimInf2   <- ATpro2 - intConf2
LimSup2   <- ATpro2 + intConf2
Valores    <- c(replica,nivel, ATpro, ATsd, pCV, tstudent, intConf, intConf*100/ATpro, ATpro2, ATsd2, pCV2, tstudent2, intConf2, intConf2*100/ATpro2)
Resultados <- cbind(Resultados,
Valores)
}
}
Resultados
tResultados <- t(Resultados)
Resultadosarea <- as.data.frame(tResultados)
#-----Organizar datos curvas------------
#--cambiar excel u hoja excel
nivel_concentracion <- read_excel("Concentracion_MS_2.xlsx")
View(nivel_concentracion)
nivel_concentracion <- as.data.frame(nivel_concentracion)
N_nivel <- 2 #---introducir numero de niveles [] curva de calibracion
N_rep <- 8 #---ingresar numero de replicas curva
#--para AE sln ind
Cd_concentracion <- nivel_concentracion
Curva <- cbind(Cd_concentracion[,c(1,2)],
Resultadosarea[,c(3,7,9,13)])
#----adicion relacion areas y concentraciones e incertidumbres
areaCd_areaBi <- Curva$Area.Cd/Curva$Area.bi
areaCd_areaBi <- as.data.frame(areaCd_areaBi)
u_areaCd_areaBi <- (sqrt((Curva$u.Area.Cd/Curva$Area.Cd)^2 + (Curva$u.Area.Bi/Curva$Area.bi)^2)) * (Curva$Area.Cd/Curva$Area.bi)
u_areaCd_areaBi <- as.data.frame(u_areaCd_areaBi)
conceCd_concBi <- Curva$Conc.Cd.niveles/Curva$Conc.Bi.niveles
conceCd_concBi <- as.data.frame(conceCd_concBi)
u_concCd_concBi <- (sqrt((Curva$`u Cd combinada`/Curva$Conc.Cd.niveles)^2 + (Curva$`u Bi combinada`/Curva$Conc.Bi.niveles)^2)) * (Curva$Conc.Cd.niveles/Curva$Conc.Bi.niveles)
u_concCd_concBi <- as.data.frame(u_concCd_concBi)
#---para AE misma celda u_concentracion punto 0 (M)
u_concCd_concBi[is.na(u_concCd_concBi)] = 0
Curva <- cbind(Curva,
areaCd_areaBi)
Nombres_sd_replicas <- c("promedio_concCd","SD_concCd","%CV_concCd","promedio_areaCd","SD_areaCd","%CV_areaCd","promedio_concCdBi","SD_concCdBi","%CV_concCdBi","promedio_areaCdBi","SD_areaCdBi","%CV_areaCdBi")
View(Curva)
#----AreaCd/AreaBi vs [Cd]----------------
library(ggplot2)
library(ggpmisc)
Curva$replica <- as.factor(Curva$replica)
#-----Organizar datos curvas------------
#--cambiar excel u hoja excel
nivel_concentracion <- read_excel("Concentracion_MS_2.xlsx")
nivel_concentracion <- as.data.frame(nivel_concentracion)
N_nivel <- 2 #---introducir numero de niveles [] curva de calibracion
N_rep <- 8 #---ingresar numero de replicas curva
#--para AE sln ind
Cd_concentracion <- nivel_concentracion
Curva <- cbind(Cd_concentracion[,c(1,2)],
Resultadosarea[,c(3,7,9,13)])
View(Curva)
#----adicion relacion areas y concentraciones e incertidumbres
areaCd_areaBi <- Curva$Area.Cd/Curva$Area.bi
areaCd_areaBi <- as.data.frame(areaCd_areaBi)
u_areaCd_areaBi <- (sqrt((Curva$u.Area.Cd/Curva$Area.Cd)^2 + (Curva$u.Area.Bi/Curva$Area.bi)^2)) * (Curva$Area.Cd/Curva$Area.bi)
u_areaCd_areaBi <- as.data.frame(u_areaCd_areaBi)
conceCd_concBi <- Curva$Conc.Cd.niveles/Curva$Conc.Bi.niveles
conceCd_concBi <- as.data.frame(conceCd_concBi)
u_concCd_concBi <- (sqrt((Curva$`u Cd combinada`/Curva$Conc.Cd.niveles)^2 + (Curva$`u Bi combinada`/Curva$Conc.Bi.niveles)^2)) * (Curva$Conc.Cd.niveles/Curva$Conc.Bi.niveles)
u_concCd_concBi <- as.data.frame(u_concCd_concBi)
#---para AE misma celda u_concentracion punto 0 (M)
u_concCd_concBi[is.na(u_concCd_concBi)] = 0
Curva <- cbind(Curva,
areaCd_areaBi)
#----AreaCd/AreaBi vs [Cd]----------------
library(ggplot2)
library(ggpmisc)
Curva$replica <- as.factor(Curva$replica)
Grafica2 <- ggplot(Curva,
aes(x=conc.cd,
y=(areaCd_areaBi)),
color=replica)
plot_curva4 <- Grafica2 +
geom_point(size = 2,
color=Curva$replica) +
geom_smooth(method = "lm",
alpha=0.2,
aes(group=replica,
color=replica,
fill=replica)) +
facet_grid (.~replica) +
# geom_errorbar(aes(ymin=Curva[,13]-Curva[,14],
#                   ymax=Curva[,13]+Curva[,14])) +
# geom_errorbarh(aes(xmin= Curva[,3]-Curva[,4],
#                    xmax=Curva[,3]+Curva[,4])) +
stat_poly_eq(aes(label = stat(eq.label)),
formula = y~x,
size = 3,
output.type="LaTeX") +
stat_poly_eq(aes(label = stat(rr.label)),
formula = y~x,
rr.digits = 5,
label.x = "right", label.y = "bottom",
size = 3,
output.type="LaTeX")+
labs( x = expression(paste("[", Cd^{"2+"},"] ", "/ ",mu,g,kg^{"-1"})),
y = expression(paste("peak area ", Cd^{"2+ "},"/ ","peak area ", Bi^{"3+ "})))
#----AreaCd/AreaBi vs [Cd]----------------
library(ggplot2)
library(ggpmisc)
install.packages("ggplot2")
#----AreaCd/AreaBi vs [Cd]----------------
library(ggplot2)
library(ggplot2)
install.packages("rlang")
library(ggplot2)
library(ggplot2)
library(ggpmisc)
install.packages("ggpmisc")
library(ggpmisc)
install.packages("ggpp")
library(ggpmisc)
install.packages('ggpmisc')
install.packages('quantreg')
install.packages('ggpmisc')
install.packages('quantreg')
install.packages('ggpmisc')
install.packages('quantreg')
remove.packages("quantreg", lib="~/R/win-library/4.0")
install.packages('quantreg')
https://github.com/cran/quantreg
library(devtools)
install.packages('devtools')
install.packages("devtools")
install.packages("devtools")
install.packages("devtools")
library("devtools")
install.packages("devtools")
install.packages("devtools")
install.packages("devtools")
install.packages("devtools")
install.packages("devtools")
install.packages("devtools")
install.packages("devtools")
library("devtools")
install.packages("cli")
install.packages("cli")
install.packages("cli")
library("devtools")
library("devtools")
install.packages("devtools")
install.packages("devtools")
install.packages("cli")
install.packages("cli")
citation('shinycssloaders')
citation('shinyjs') #to use hidden
citation('ggplot2') #Grammar of graphics
citation('ggfortify')
install.packages('ggfortify')
citation('ggfortify')
citation('shinyalert')
citation('car')
citation('EnvStats')
citation('rhandsontable')
citation('shinyalert')
citation('rhandsontable')
citation('data.table')
citation('outliers')
citation('FrF2')
citation('purrr') # map-like functional programing ('?')
citation('BHH2') # dotPlot('faithful$waiting, pch = 16')
install.packages('BHH2') # dotPlot('faithful$waiting, pch = 16')
citation('nortest')
citation('units')
install.packages('shinyalert')
install.packages('car')
install.packages('EnvStats')
install.packages('outliers')
install.packages('FrF2')
install.packages('BHH2') # dotPlot('faithful$waiting, pch = 16')
install.packages('nortest')
install.packages('units')
citation('ggfortify')
citation('shinyalert')
citation('car')
citation('EnvStats')
citation('rhandsontable')
citation('data.table')
citation('outliers')
citation('FrF2')
citation('purrr') # map-like functional programing ('?')
citation('BHH2') # dotPlot('faithful$waiting, pch = 16')
citation('nortest')
citation('units')
setwd('C:\Users\Cris\Documents\validaR_shinyapp\Modules')
setwd("C:/Users/Cris/Documents/validaR_shinyapp/Modules")
list.files()
cat(list.files())
cat(paste(list.files(), sep = '/n'))
cat(paste(list.files(), sep = '\n'))
paste(list.files(), sep = '\n')
cat(paste(list.files(), sep = '/n'))
setwd("C:/Users/Cris/Documents/validaR_shinyapp/CustomFunctions")
cat(paste(list.files(), sep = '/n'))
