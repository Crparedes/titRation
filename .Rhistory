return(0)
}
}
decimalplaces(64000.00000)
decimalplaces(64000.000003)
decimalplaces(6400000.000003)
decimalplaces(0.000000000343)
decimalplaces <- function(x) {
if (abs(x - round(x)) > .Machine$double.eps^0.5) {
nchar(strsplit(sub('0+$', '', format(x, scientific = F)), ".", fixed = TRUE)[[1]][[2]])
} else {
return(0)
}
}
decimalplaces(0.000000000343)
decimalplaces(0.0000000343)
decimalplaces(0.00000000343)
nchar(sub("^-?\\d*\\.?","",format(x,scientific=F)))
x <- 0.000000005
nchar(sub("^-?\\d*\\.?","",format(x,scientific=F)))
x <- 0.0000000005
nchar(sub("^-?\\d*\\.?","",format(x,scientific=F)))
x <- 0.000000000005
nchar(sub("^-?\\d*\\.?","",format(x,scientific=F)))
x <- 0.0000000000000005
nchar(sub("^-?\\d*\\.?","",format(x,scientific=F)))
nchar(sub("^-?\\d*\\.?","",format(34.3443,scientific=F)))
nchar(sub("^-?\\d*\\.?","",format(34.0000,scientific=F)))
nchar(sub("^-?\\d*\\.?","",format(0.00000000343,scientific=F)))
decimalplaces(1e-9)
decimalplaces(1.2e-9)
decimalplaces(1.2e-8)
nchar(sub("^-?\\d*\\.?","",format(1.2e-8,scientific=F)))
decimalplaces(1.2e-7)
decimalplaces(1e-7)
decimalplaces(1e-8)
decimalplaces(9e-8)
decimalplaces(5e-8)
decimalplaces(1e-8)
runApp()
Substances[[reagForm]]
Substances[[reagForm]]$`mr:name`
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
StanDisol()
GetValueEstandUncert(StanDisol(), property = 'AmmountOfSubstanceConcentration')
StanDisol()[1]
message(StanDisol())
GetValueEstandUncert(StanDisol(), property = 'AmountOfSubstancePerUnitMass')
ResParcUncSource()
ResParcUncSource()$data
ResParcUncSource()$rel.contr
c("\\milli\\gram\\kilo\\gram\\tothe{-1}", "\\gram", "\\gram", ConcStanSolut()$Units, "\\gram",
ConcStanSolut()$Units, MassRatioSamp()$Units)
units <- c("\\milli\\gram\\kilo\\gram\\tothe{-1}", "\\gram", "\\gram", ConcStanSolut()$Units, "\\gram",
ConcStanSolut()$Units, MassRatioSamp()$Units)
tab <- data.frame(Valor = as.character(signif(c(ResParcUncSource()$prop[[1]], ResParcUncSource()$data[1, ]), 9)),
u_std = as.character(signif(c(ResParcUncSource()$prop[[2]], ResParcUncSource()$data[2, ]), 4)),
Unidades = units, Aporte = c(NA, paste((round(diag(ResParcUncSource()$rel.contr)*100, 3)), '%', sep = ' ')))
rownames(tab) <- c("\\nu_{metal}\\)", "\\m_{eq}\\)", "\\m_{bln}\\)", "\\c_{std}\\)", "\\m_{ali}\\)", "\\M_{metal}\\)", "\\r_{mass}\\)")
tab
ResParcUncSource()$prop[[2]]
tab <- data.frame(Valor = as.character(signif(c(ResParcUncSource()$prop[[1]], ResParcUncSource()$data[1, ]), 9)),
u_std = as.character(signif(c(ResParcUncSource()$prop[[3]], ResParcUncSource()$data[2, ]), 4)),
Unidades = units, Aporte = c(NA, paste((round(diag(ResParcUncSource()$rel.contr)*100, 3)), '%', sep = ' ')))
rownames(tab) <- c("\\nu_{metal}\\)", "\\m_{eq}\\)", "\\m_{bln}\\)", "\\c_{std}\\)", "\\m_{ali}\\)", "\\M_{metal}\\)", "\\r_{mass}\\)")
tab
runApp()
runApp()
uploadedFiles <- lapply((input$NewXML$datapath), function(x) read_xml(x))
uploadedFiles
sapply(uploadedFiles, function(x) length(xml_find_all(x, xpath = '//mr:titrationResult')))
paste0(sapply(uploadedFiles, function(x) {
return(paste0('<li><b>', xml_text(xml_find_all(x, xpath = '//mr:coreData/mr:solutionSource')), ':</b> ',
xml_text(xml_find_all(x, xpath = '//mr:dateTime')), '</li>'))
}), collapse = '')
paste0(sapply(uploadedFiles, function(x) {
return(paste0('<li><b>', xml_text(xml_find_all(x, xpath = '//mr:coreData/mr:solutionSource')), ':</b> ',
xml_text(xml_find_all(x, xpath = '//mr:coreData/mr:dateTime')), '</li>'))
}), collapse = '')
uploadedFiles[[1]]
xml_find_all(uploadedFiles[[1]], xpath = '//mr:coreData'
)
xml_find_all(uploadedFiles[[1]], xpath = '//mr:coreData')
message(xml_find_all(uploadedFiles[[1]], xpath = '//mr:coreData'))
xml_find_all(uploadedFiles[[1]], xpath = '//mr:titrationResult')
xml_find_all(uploadedFiles[[1]], xpath = '//mr:titrationResult/mr:substance')
message(xml_find_all(uploadedFiles[[1]], xpath = '//mr:titrationResult/mr:substance'))
Substances$PbII
Substances
source("~/titulaR/D_SI_xml/mrRawData/MRC/NIST_SRM_928.R")
write_xml(NIST_SRM_928, 'www/MR_MRC/Para EDTA/NIST_SRM_928.xml')
NIST_SRM_928
files2Combine
SelectedXMLs
files2Combine()
ResultadosElect
ResultadosElect()
ResultadosElect()
files2Combine(SelectedXMLs)
files2Combine()
reactiveValuesToList(files2Combine())
files2Combine()
reactiveValuesToList(files2Combine())
reactiveValuesToList(files2Combine())
files2Combine()
lapply(files2Combine(), function (x) {
message(x())
})
lapply(files2Combine(), function (x) {
x()
})
lapply(files2Combine(), function (x) {
xml_child(x(), search = 'mr:titrationResult')
})
lapply(files2Combine(), function (x) {
GetValueEstandUncert(xml_child(x(), search = 'mr:titrationResult'))
})
GetValueEstandUncert(xml_child(x(), search = 'mr:titrationResult/'))
lapply(files2Combine(), function (x) {
GetValueEstandUncert(xml_child(x(), search = 'mr:titrationResult/'))
})
lapply(files2Combine(), function (x) {
GetValueEstandUncert(xml_child(x(), search = 'mr:titrationResult/si:real'))
})
lapply(files2Combine(), function (x) {
GetValueEstandUncert(xml_child(x(), search = 'mr:titrationResult/si:real'))
})
lapply(files2Combine(), function (x) {
units <- GetValueEstandUncert(xml_child(x(), search = 'mr:titrationResult/si:real'))$Units
units
})
(lapply(files2Combine(), function (x) {
units <- GetValueEstandUncert(xml_child(x(), search = 'mr:titrationResult/si:real'))$Units
units
}))
all.equal(lapply(files2Combine(), function (x) {
units <- GetValueEstandUncert(xml_child(x(), search = 'mr:titrationResult/si:real'))$Units
units
}))
x <- lapply(files2Combine(), function (x) {
units <- GetValueEstandUncert(xml_child(x(), search = 'mr:titrationResult/si:real'))$Units
units
})
all.equal(x)
all.equal(x, x[1])
length(unique(x))
x <- reactive({
lapply(files2Combine(), function (x) {
units <- GetValueEstandUncert(xml_child(x(), search = 'mr:titrationResult/si:real'))$Units
units
})
if (length(unique(x)) == 1)
})
x <- lapply(files2Combine(), function (x) {
# Vunits <- GetValueEstandUncert(xml_child(x(), search = 'mr:titrationResult/si:real'))$Units
VtitSo <- xml_text(xml_child(x(), search = 'mr:coreData'))
VtitSo
})
x <- lapply(files2Combine(), function (x) {
# Vunits <- GetValueEstandUncert(xml_child(x(), search = 'mr:titrationResult/si:real'))$Units
VtitSo <- xml_text(xml_child(x(), search = 'mr:coreData'))
VtitSo
})
VtitSo
x <- lapply(files2Combine(), function (x) {
# Vunits <- GetValueEstandUncert(xml_child(x(), search = 'mr:titrationResult/si:real'))$Units
VtitSo <- xml_text(xml_child(x(), search = 'mr:coreData'))
return(VtitSo)
})
# x <- reactive({
x <- lapply(files2Combine(), function (x) {
# Vunits <- GetValueEstandUncert(xml_child(x(), search = 'mr:titrationResult/si:real'))$Units
VtitSo <- xml_text(xml_child(x(), search = 'mr:coreData'))
return(VtitSo)
})
xml_child(x()[1], search = 'mr:coreData')
# Vunits <- GetValueEstandUncert(xml_child(x(), search = 'mr:titrationResult/si:real'))$Units
VtitSo <- xml_text((files2Combine()[1], search = 'mr:coreData'))
# Vunits <- GetValueEstandUncert(xml_child(x(), search = 'mr:titrationResult/si:real'))$Units
VtitSo <- xml_text(files2Combine()[1], search = 'mr:coreData'))
# Vunits <- GetValueEstandUncert(xml_child(x(), search = 'mr:titrationResult/si:real'))$Units
VtitSo <- xml_text(xml_child(files2Combine()[1], search = 'mr:coreData'))
files2Combine()[1]
files2Combine()[1]()
files2Combine()[[1]]()
# x <- reactive({
x <- lapply(files2Combine(), function (x) {
# Vunits <- GetValueEstandUncert(xml_child(x(), search = 'mr:titrationResult/si:real'))$Units
VtitSo <- xml_text(xml_child(files2Combine()[[1]](), search = 'mr:coreData'))
return(VtitSo)
})
x
# Vunits <- GetValueEstandUncert(xml_child(x(), search = 'mr:titrationResult/si:real'))$Units
VtitSo <- xml_child(files2Combine()[[1]](), search = 'mr:coreData')
# Vunits <- GetValueEstandUncert(xml_child(x(), search = 'mr:titrationResult/si:real'))$Units
xml_child(files2Combine()[[1]](), search = 'mr:coreData')
ResParcUncSource()
ResParcUncSource <- reactive(
propagate(expr = expression((Meq - Mbln) * Cedta / Mali * Mato / MassRatioSamp),
data = cbind(Meq = c(convMass(balanza(), reading = MasaEquiv()),
sqrt(2) * uncertConvMass(balanza(), reading = MasaEquiv(), d = 0.1, d.units = 'mg')),
Mbln = c(0, 0.0028/(2*sqrt(3))),
Cedta = ConcStanSolut()$ValUnc,
Mali = c(convMass(balanza(), reading = input$MasaAlic),
uncertConvMass(balanza(), reading = input$MasaAlic)),
Mato = AtMasSampElem()$ValUnc,
MassRatioSamp = MassRatioSamp()$ValUnc),
second.order = FALSE, do.sim = FALSE)
)
ResParcUncSource <- reactive(
propagate(expr = expression((Meq - Mbln) * Cedta / Mali * Mato / MassRatioSamp),
data = cbind(Meq = c(convMass(balanza(), reading = MasaEquiv()),
sqrt(2) * uncertConvMass(balanza(), reading = MasaEquiv(), d = 0.1, d.units = 'mg')),
Mbln = c(0, 0.0028/(2*sqrt(3))),
Cedta = ConcStanSolut()$ValUnc,
Mali = c(convMass(balanza(), reading = input$MasaAlic),
uncertConvMass(balanza(), reading = input$MasaAlic)),
Mato = AtMasSampElem()$ValUnc,
MassRatioSamp = MassRatioSamp()$ValUnc),
second.order = FALSE, do.sim = FALSE)
)
sqrt(2) * uncertConvMass(balanza(), reading = MasaEquiv(), d = 0.1, d.units = 'mg')
propagate(expr = expression((Meq - Mbln) * Cedta / Mali * Mato / MassRatioSamp),
data = cbind(Meq = c(convMass(balanza(), reading = MasaEquiv()),
sqrt(2) * uncertConvMass(balanza(), reading = MasaEquiv(), d = 0.1, d.units = 'mg')),
Mbln = c(0, 0.0028/(2*sqrt(3))),
Cedta = ConcStanSolut()$ValUnc,
Mali = c(convMass(balanza(), reading = input$MasaAlic),
uncertConvMass(balanza(), reading = input$MasaAlic)),
Mato = AtMasSampElem()$ValUnc,
MassRatioSamp = MassRatioSamp()$ValUnc),
second.order = FALSE, do.sim = FALSE)
propagate(expr = expression((Meq - Mbln) * Cedta / Mali * Mato / MassRatioSamp),
data = cbind(Meq = c(convMass(balanza(), reading = MasaEquiv()),
0.004),#sqrt(2) * uncertConvMass(balanza(), reading = MasaEquiv(), d = 0.1, d.units = 'mg')),
Mbln = c(0, 0.0028/(2*sqrt(3))),
Cedta = ConcStanSolut()$ValUnc,
Mali = c(convMass(balanza(), reading = input$MasaAlic),
uncertConvMass(balanza(), reading = input$MasaAlic)),
Mato = AtMasSampElem()$ValUnc,
MassRatioSamp = MassRatioSamp()$ValUnc),
second.order = FALSE, do.sim = FALSE)
TitCurvDat()
TitCurvDat()$Titrant
TitCurvDat()$Titrant - MasaEquiv()
min(TitCurvDat()$Titrant - MasaEquiv())
min(abs(TitCurvDat()$Titrant - MasaEquiv()))
min(abs(na.omit(TitCurvDat()$Titrant) - MasaEquiv()))
min(abs(na.omit(TitCurvDat()$Titrant) - MasaEquiv()), 2)
sort(abs(na.omit(TitCurvDat()$Titrant) - MasaEquiv()))
sort(abs(na.omit(TitCurvDat()$Titrant) - MasaEquiv()))[1:2]
sum(sort(abs(na.omit(TitCurvDat()$Titrant) - MasaEquiv()))[1:2])
sum(sort(abs(na.omit(TitCurvDat()$Titrant) - MasaEquiv()))[1:2]) / sqrt(12)
sqrt(12)
10/sqrt(12)
14/sqrt(12)
14/sqrt(3)
propagate(expr = expression((Meq - Mbln) * Cedta / Mali * Mato / MassRatioSamp),
data = cbind(Meq = c(convMass(balanza(), reading = MasaEquiv()),
0.008),#sqrt(2) * uncertConvMass(balanza(), reading = MasaEquiv(), d = 0.1, d.units = 'mg')),
Mbln = c(0, 0.0028/(2*sqrt(3))),
Cedta = ConcStanSolut()$ValUnc,
Mali = c(convMass(balanza(), reading = input$MasaAlic),
uncertConvMass(balanza(), reading = input$MasaAlic)),
Mato = AtMasSampElem()$ValUnc,
MassRatioSamp = MassRatioSamp()$ValUnc),
second.order = FALSE, do.sim = FALSE)
u.Meq.drop <- sum(sort(abs(na.omit(TitCurvDat()$Titrant) - MasaEquiv()))[1:2]) / sqrt(12)
u.Meq.balanza <- sqrt(2) * uncertConvMass(balanza(), reading = MasaEquiv(), d = 0.1, d.units = 'mg')
# Vunits <- GetValueEstandUncert(xml_child(x(), search = 'mr:titrationResult/si:real'))$Units
xml_child(files2Combine()[[1]](), search = 'mr:coreData')
runApp()
runApp()
runApp()
files2Combine()
# x <- reactive({
lapply(files2Combine(), function (x) {
Vunits <- GetValueEstandUncert(xml_child(x(), search = 'mr:titrationResult/si:real'))$Units
# xml_child(files2Combine()[[1]](), search = 'mr:coreData')
return(VtitSo)
# })
# if (length(unique(x)) != 1) return()
# })
ResultadosElect <- reactive({
})
output$ResultadosElect <- renderUI(ResultadosElect())
#   x <- reactiveValuesToList(DataCompl)
#   x <- x[names(x) %in% FileNames()]
#   DataTrimmedList <- x[names(x) %in% input$titFilesSelectComb] # To consider only selected files
#   VecMomento <- as.factor(unlist(sapply(DataTrimmedList, function(x) {x[[pos[1]]]})))
#
#   VecElement <- ifelse(especie == 'EDTA', rep(NA, length(VecMomento)),
#                        ifelse(especie == 'Elem', unlist(sapply(DataTrimmedList, function(x) {x[[2]]}))[order(VecMomento)], NULL))
#   VecMuestra <- unlist(sapply(DataTrimmedList, function(x) {x[[1]]}))[order(VecMomento)]
#   VecDescrip <- ifelse(especie == 'EDTA',
#                        unlist(sapply(DataTrimmedList, function(x) {ifelse(!is.null(x[[6]][[3]]), x[[6]][[3]], x[[6]][[2]])}))[order(VecMomento)],
#                        ifelse(especie == 'Elem', unlist(sapply(DataTrimmedList, function(x) {x[[11]]}))[order(VecMomento)], NULL))
#   VecMasaAli <- as.numeric(unlist(sapply(DataTrimmedList, function(x) {x[[pos[2]]]})))[order(VecMomento)]
#   VecMasaEqi <- as.numeric(unlist(sapply(DataTrimmedList, function(x) {x[[pos[3]]]})))[order(VecMomento)]
#   VecFraccMa <- as.numeric(unlist(sapply(DataTrimmedList, function(x) {x[[pos[4]]]})))[order(VecMomento)]
#   VecFracUnc <- as.numeric(unlist(sapply(DataTrimmedList, function(x) {x[[pos[5]]]$prop[[3]]})))[order(VecMomento)]
#   VecFechas0 <- as.factor(unlist(sapply(DataTrimmedList, function(x) {substr(as.character(x[[pos[6]]]), start = 1, stop = 10)})))[order(VecMomento)]
#   #browser()
#   x <- data.frame(VecElement, VecMuestra, VecDescrip, VecMasaAli, VecMasaEqi, VecFraccMa, VecFracUnc, VecFechas0,
#                   index = 1:length(VecFracUnc))
#   #browser()
#   return(x)
# })
#
# DescMatDarBttn <- eventReactive(DataCleanDF(), {
#   downloadButton(session$ns('DescMatDar'), label = tags$b('Descargar matriz de resultados en RDS'))})
# output$DescMatDarBttn <- renderUI(DescMatDarBttn())
# output$DescMatDar <- downloadHandler(
#   filename = function() {paste0("MatrizResultados_", fecha(), format(Sys.time(), '_%H-%M'), '.rds')},
#   content = function(file) {saveRDS(DataCleanDF(), file = file)}, contentType = NULL)
#
# DescMatExcelBttn <- eventReactive(DataCleanDF(), {
#   downloadButton(session$ns('DescMatExcel'), label = tags$b('Descargar matriz de resultados en Excel'))})
# output$DescMatExcelBttn <- renderUI(DescMatExcelBttn())
# output$DescMatExcel <- downloadHandler(
#   filename = function() {paste0("MatrizResultados_", fecha(), format(Sys.time(), '_%H-%M'), '.xlsx')},
#   content = function(file) {write_xlsx(x = DataCleanDF(), path = file, format_headers = TRUE)}, contentType = NULL)
#
# DescDigit.SIBttn <- eventReactive(DataCleanDF(), {
#   downloadButton(session$ns('DescDigit.SI'), label = tags$b('Descargar resultados en SI Digital (XML)'))})
# output$DescDigit.SIBttn <- renderUI(DescDigit.SIBttn())
# output$DescDigit.SI <- downloadHandler(
#   filename = function() {paste0("MatrizResultados_", fecha(), format(Sys.time(), '_%H-%M'), '.xlsx')},
#   content = function(file) {write_xlsx(x = DataCleanDF(), path = file, format_headers = TRUE)}, contentType = NULL)
#
#
#
# resultadosCombi <- eventReactive(DataCleanDF(), {
#   AverageValue <- mean(DataCleanDF()$VecFraccMa)
#   IncertTipoB <- max(DataCleanDF()$VecFracUnc)
#   StandarDev <- sd(DataCleanDF()$VecFraccMa)
#   n_ind <- length(unique((DataCleanDF()$VecFechas0)))
#   IncertTipoA <- StandarDev/sqrt(n_ind)
#   IncertComb <- sqrt(IncertTipoB^2 + IncertTipoA^2)
#   LevTest <- tryCatch(leveneTest(VecFraccMa ~ VecFechas0, data = DataCleanDF()), error = function(e) 'no aplica')
#   return(data.frame('.' = c('Promedio de las mediciones', 'Incertidumbre tipo B', 'Desviacion estandar de las mediciones',
#                             'Numero de datos', 'Numero de datos independientes (dia)', 'Incertidumbre tipo A', 'Incertidumbre combinada',
#                             'Incertidumbre expandida (k=2)', 'Valor p homogeneidad de varianzas (Levene)'),
#                     'Valor' = as.character(c(round(c(AverageValue, IncertTipoB, StandarDev), 3),
#                                              round(c(length((DataCleanDF()$VecFechas0)), n_ind)),
#                                              round(c(IncertTipoA, IncertComb, IncertComb * 2), 3),
#                                              ifelse(n_ind > 1, round(LevTest$`Pr(>F)`[1], 4), LevTest))),
#                     'Unidades' = c(rep(unidad, 3), rep('', 2), rep(unidad, 3), '')))
# })
#
# plotCombinados <- reactive({
#   if (especie == 'EDTA') {
#     ylab <- expression(paste('Fracción masica de EDTA / g ', ' ', g^{-1}, ' (%)'))
#   } else {
#     if (especie == 'Elem') {
#       ylab <- expression(paste('Fracción masica del elemento / ', 'mg k', g^{-1}))
#     }
#   }
#
#   p <- ggplot(data = DataCleanDF(), aes(x = index)) + theme_bw() +
#     labs(y = ylab, x = NULL) +
#     theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
#           axis.text.y = element_text(color = "black"),
#           #axis.ticks.x = element_blank(),
#           axis.text.x = element_blank(), legend.title = element_blank()) +
#     scale_y_continuous(expand = c(0, 0.4), n.breaks = 8) +
#     #geom_hline(aes(yintercept = 0.999 * mean(VecFraccMa)), linetype = 4, lwd = 0.5, col = 'red1') +
#     geom_hline(aes(yintercept = (1 - tol) * mean(VecFraccMa)), linetype = 2, lwd = 0.5, col = 'gray60') +
#     geom_hline(aes(yintercept = mean(VecFraccMa)), linetype = 1, lwd = 0.5, col = 'gray60') +
#     geom_hline(aes(yintercept = (1 + tol) * mean(VecFraccMa)), linetype = 2, lwd = 0.5, col = 'gray60') +
#     #geom_hline(aes(yintercept = 1.001 * mean(VecFraccMa)), linetype = 4, lwd = 0.5, col = 'red1') +
#     geom_point(aes(y = VecFraccMa, color = VecFechas0)) +
#     geom_errorbar(aes(ymin = VecFraccMa - VecFracUnc, ymax = VecFraccMa + VecFracUnc, color = VecFechas0), width = 0.4)
#   #browser()
#   print(p)
# })
# output$plotCombinados <- renderPlot(plotCombinados())
# output$resultadosCombi <- renderTable(resultadosCombi())
#
# unidad <- dplyr::case_when(especie == 'EDTA' ~ 'g / g (%)', especie == 'Elem' ~ 'mg / kg')
#
# TablasPorDia <- eventReactive(DataCleanDF(), {
#   x <- list()
#   for (i in unique((DataCleanDF()$VecFechas0))) {
#     j <- i
#     DayRes <- which(DataCleanDF()$VecFechas0 == j)
#     datFram <- data.frame(Archivo = row.names(DataCleanDF())[DayRes],
#                           Resultado = DataCleanDF()$VecFraccMa[DayRes],
#                           '.' = rep(unidad, length(DayRes)))
#     nDat <- nrow(datFram)
#     temp <- box(title = tags$b(paste0('Resumen de resultados del ', j)), status = 'primary', collapsible = TRUE, collapsed = FALSE,
#                 column(5, #renderTable(isolate(datFram), digits = 3),
#                        tags$h4('Promedio del día:', tags$b(round(mean(datFram$Resultado), 3), unidad), tags$br(),
#                                'Desviación estándar relativa del día:', tags$b(round(sd(datFram$Resultado)/mean(datFram$Resultado)*100, 3), '%'))),
#                 column(7, tags$h4('Valor p prueba de normalidad de Shapiro-Wilk:',
#                                   tags$b(tryCatch(signif(shapiro.test(datFram$Resultado)$p.value, 3),
#                                                   error = function(e) 'No se puede calcular para menos de tres datos')),
#                                   tags$br(),
#                                   'Valores p de las pruebas de datos anómalos de Grubbs:', tags$br(),
#                                   tryCatch(
#                                     tags$h4('  · ', tags$b(signif(grubbs.test(datFram$Resultado, type = 10)$p.value, 3)),
#                                             ' para el valor más ',
#                                             ifelse(word(grubbs.test(datFram$Resultado, type = 10)$alternative, 1) == 'highest', 'alto.', 'bajo.')),
#                                     error = function(e) 'No se puede calcular para menos de tres datos'),
#                                   tryCatch(
#                                     tags$h4('  · ', tags$b(signif(grubbs.test(datFram$Resultado, type = 11)$p.value, 3)),
#                                             ' para un valor a cada extremo.', tags$br(),
#                                             '  · ', tags$b(signif(grubbs.test(datFram$Resultado, type = 20)$p.value, 3)),
#                                             ' para los dos valores más ',
#                                             ifelse(word(grubbs.test(datFram$Resultado, type = 10)$alternative, 1) == 'highest', 'altos.', 'bajos.')),
#                                     error = function(e) ''))
#                 ))
#     x <- c(x, temp)
#   }
#   return(x)
# })
# output$TablasPorDia <- renderUI(TablasPorDia())
#
#
# titFilesSelectIndi <- reactive({
#   x <- reactiveValuesToList(DataCompl)
#   x <- x[names(x) %in% FileNames()]
#   pos <- dplyr::case_when(especie == 'EDTA' ~ c(12, 11),
#                           especie == 'Elem' ~ c(13, 13))
#   Fechas <- as.factor(unlist(sapply(x,
#                                     function(x) {substr(as.character(x[[pos[1]]]),
#                                                         start = nchar(as.character(x[[pos[1]]])) - 18,
#                                                         stop = nchar(as.character(x[[pos[1]]])) - 3)})))
#   VecMomento <- as.factor(unlist(sapply(x, function(x) {x[[pos[2]]]})))
#   choices <- names(x)[order(VecMomento)]
#   #browser()
#   return(radioButtons(session$ns('titFilesSelectIndi'), label = tags$b("Archivo:"),
#                       choices = choices, #selected = character(0),
#                       width = '100%'))
# })
# output$titFilesSelectIndi <- renderUI(titFilesSelectIndi())
#
# meanValues <- reactive(
#   NULL
# )
#
# output$printed <- renderPrint({
#   #  req(input$TitFiles)
#   #  (length(input$TitFiles$name))
# })
})
# x <- reactive({
lapply(files2Combine(), function (x) {
Vunits <- GetValueEstandUncert(xml_child(x(), search = 'mr:titrationResult/si:real'))$Units
# xml_child(files2Combine()[[1]](), search = 'mr:coreData')
return(VtitSo)
})
Vunits <- GetValueEstandUncert(xml_child(x(), search = 'mr:titrationResult/si:real'))$Units
# x <- reactive({
lapply(files2Combine(), function (x) {
Vunits <- GetValueEstandUncert(xml_child(x(), search = 'mr:titrationResult/si:real'))$Units
# xml_child(files2Combine()[[1]](), search = 'mr:coreData')
return(Vunits)
})
if (length(unique(Vunits)) != 1) return() else Vunits <- Vunits[1]
Vunits <- GetValueEstandUncert(xml_child(x(), search = 'mr:titrationResult/si:real'))$Units
# x <- reactive({
lapply(files2Combine(), function (x) {
Vunits <- GetValueEstandUncert(xml_child(x(), search = 'mr:titrationResult/si:real'))$Units
if (length(unique(Vunits)) != 1) return() else Vunits <- Vunits[1]
# xml_child(files2Combine()[[1]](), search = 'mr:coreData')
return(Vunits)
})
length(files2Combine())
# x <- reactive({
data.frame('.' = 1:length(files2Combine()))
# x <- reactive({
DF <- data.frame('.' = 1:length(files2Combine()))
xml_child(files2Combine()[[1]](), search = 'mr:coreData')
xml_child(files2Combine()[[1]](), search = 'mr:coreData/respPerson/name')
xml_child(files2Combine()[[1]](), search = '//mr:coreData/respPerson/name')
xml_child(files2Combine()[[1]](), search = 'mr:coreData/respPerson/name')
xml_text(xml_child(files2Combine()[[1]](), search = 'mr:coreData/respPerson/name'))
xml_child(files2Combine()[[1]](), search = 'mr:titrationResults')
files2Combine()[[1]]()
xml_child(files2Combine()[[1]](), search = 'mr:titrationResult')
xml_child(files2Combine()[[1]](), search = 'mr:additionalInfo')
runApp()
runApp()
