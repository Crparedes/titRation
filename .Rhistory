IncertTipoA <- StandarDev/sqrt(n_ind)
IncertComb <- sqrt(IncertTipoB^2 + IncertTipoA^2)
LevTest <- tryCatch(leveneTest(VecFraccMa ~ VecFechas0, data = DataCleanDF()), error = function(e) 'no aplica')
return(data.frame('.' = c('Promedio de las mediciones', 'Incertidumbre tipo B', 'Desviacion estandar de las mediciones',
'Numero de datos', 'Numero de datos independientes (dia)', 'Incertidumbre tipo A', 'Incertidumbre combinada',
'Incertidumbre expandida (k=2)', 'Valor p homogeneidad de varianzas (Levene)'),
'Valor' = as.character(c(round(c(AverageValue, IncertTipoB, StandarDev), 3),
round(c(length((DataCleanDF()$VecFechas0)), n_ind)),
round(c(IncertTipoA, IncertComb, IncertComb * 2), 3),
ifelse(n_ind > 1, round(LevTest$`Pr(>F)`[1], 4), LevTest))),
'Unidades' = c(rep(unidad, 3), rep('', 2), rep(unidad, 3), '')))
})
resultadosCombi()
AverageValue <- mean(DataCleanDF()$VecFraccMa)
IncertTipoB <- max(DataCleanDF()$VecFracUnc)
StandarDev <- sd(DataCleanDF()$VecFraccMa)
n_ind <- length(unique((DataCleanDF()$VecFechas0)))
IncertTipoA <- StandarDev/sqrt(n_ind)
IncertComb <- sqrt(IncertTipoB^2 + IncertTipoA^2)
LevTest <- tryCatch(leveneTest(VecFraccMa ~ VecFechas0, data = DataCleanDF()), error = function(e) 'no aplica')
LevTest
DataCleanDF()$VecUnits
DataCleanDF()$VecUnits[1]
resultadosCombi <- eventReactive(DataCleanDF(), {
AverageValue <- mean(DataCleanDF()$VecFraccMa)
IncertTipoB <- max(DataCleanDF()$VecFracUnc)
StandarDev <- sd(DataCleanDF()$VecFraccMa)
n_ind <- length(DataCleanDF())
IncertTipoA <- StandarDev/sqrt(n_ind)
IncertComb <- sqrt(IncertTipoB^2 + IncertTipoA^2)
LevTest <- tryCatch(leveneTest(VecFraccMa ~ VecFechas0, data = DataCleanDF()), error = function(e) 'no aplica')
return(data.frame('.' = c('Promedio de las mediciones', 'Incertidumbre tipo B', 'Desviacion estandar de las mediciones',
'Numero de datos', 'Numero de datos independientes (dia)', 'Incertidumbre tipo A', 'Incertidumbre combinada',
'Incertidumbre expandida (k=2)', 'Valor p homogeneidad de varianzas (Levene)'),
'Valor' = as.character(c(round(c(AverageValue, IncertTipoB, StandarDev), 3),
round(c(length((DataCleanDF()$VecFechas0)), n_ind)),
round(c(IncertTipoA, IncertComb, IncertComb * 2), 3),
ifelse(unique(DataCleanDF()$VecFechas0) > 1, round(LevTest$`Pr(>F)`[1], 4), LevTest))),
'Unidades' = c(rep(DataCleanDF()$VecUnits[1], 3), rep('', 2), rep(DataCleanDF()$VecUnits[1], 3), '')))
})
resultadosCombi()
LevTest
unique(DataCleanDF()$VecFechas0)
resultadosCombi <- eventReactive(DataCleanDF(), {
AverageValue <- mean(DataCleanDF()$VecFraccMa)
IncertTipoB <- max(DataCleanDF()$VecFracUnc)
StandarDev <- sd(DataCleanDF()$VecFraccMa)
n_ind <- length(DataCleanDF())
IncertTipoA <- StandarDev/sqrt(n_ind)
IncertComb <- sqrt(IncertTipoB^2 + IncertTipoA^2)
LevTest <- tryCatch(leveneTest(VecFraccMa ~ VecFechas0, data = DataCleanDF()), error = function(e) 'no aplica')
return(data.frame('.' = c('Promedio de las mediciones', 'Incertidumbre tipo B', 'Desviacion estandar de las mediciones',
'Numero de datos', 'Numero de datos independientes (dia)', 'Incertidumbre tipo A', 'Incertidumbre combinada',
'Incertidumbre expandida (k=2)', 'Valor p homogeneidad de varianzas (Levene)'),
'Valor' = as.character(c(round(c(AverageValue, IncertTipoB, StandarDev), 3),
round(c(length((DataCleanDF()$VecFechas0)), n_ind)),
round(c(IncertTipoA, IncertComb, IncertComb * 2), 3),
ifelse(length(unique(DataCleanDF()$VecFechas0)) > 1, round(LevTest$`Pr(>F)`[1], 4), LevTest))),
'Unidades' = c(rep(DataCleanDF()$VecUnits[1], 3), rep('', 2), rep(DataCleanDF()$VecUnits[1], 3), '')))
})
resultadosCombi()
length(unique(DataCleanDF()$VecFechas0))
resultadosCombi <- eventReactive(DataCleanDF(), {
AverageValue <- mean(DataCleanDF()$VecFraccMa)
IncertTipoB <- max(DataCleanDF()$VecFracUnc)
StandarDev <- sd(DataCleanDF()$VecFraccMa)
n_ind <- length(DataCleanDF())
IncertTipoA <- StandarDev/sqrt(n_ind)
IncertComb <- sqrt(IncertTipoB^2 + IncertTipoA^2)
LevTest <- tryCatch(leveneTest(VecFraccMa ~ VecFechas0, data = DataCleanDF()), error = function(e) 'no aplica')
return(data.frame('.' = c('Promedio de las mediciones', 'Incertidumbre tipo B', 'Desviacion estandar de las mediciones',
'Numero de datos', 'Dias de medicion', 'Incertidumbre tipo A', 'Incertidumbre combinada',
'Incertidumbre expandida (k=2)', 'Valor p homogeneidad de varianzas (Levene)'),
'Valor' = as.character(c(signif(AverageValue, 8), signif(c(IncertTipoB, StandarDev), 4),
round(c(length((DataCleanDF()$VecFechas0)), length(unique(DataCleanDF()$VecFechas0)))),
round(c(IncertTipoA, IncertComb, IncertComb * 2), 3),
ifelse(length(unique(DataCleanDF()$VecFechas0)) > 1, round(LevTest$`Pr(>F)`[1], 4), LevTest))),
'Unidades' = c(rep(DataCleanDF()$VecUnits[1], 3), rep('', 2), rep(DataCleanDF()$VecUnits[1], 3), '')))
})
resultadosCombi()
resultadosCombi <- eventReactive(DataCleanDF(), {
AverageValue <- mean(DataCleanDF()$VecFraccMa)
IncertTipoB <- max(DataCleanDF()$VecFracUnc)
StandarDev <- sd(DataCleanDF()$VecFraccMa)
n_ind <- length(DataCleanDF())
IncertTipoA <- StandarDev/sqrt(n_ind)
IncertComb <- sqrt(IncertTipoB^2 + IncertTipoA^2)
LevTest <- tryCatch(round(leveneTest(VecFraccMa ~ VecFechas0, data = DataCleanDF())$`Pr(>F)`[1], 4), error = function(e) 'no aplica')
return(data.frame('.' = c('Promedio de las mediciones', 'Incertidumbre tipo B', 'Desviacion estandar de las mediciones',
'Numero de datos', 'Dias de medicion', 'Incertidumbre tipo A', 'Incertidumbre combinada',
'Incertidumbre expandida (k=2)', 'Valor p homogeneidad de varianzas (Levene)'),
'Valor' = as.character(c(signif(AverageValue, 8), signif(c(IncertTipoB, StandarDev), 4),
length((DataCleanDF()$VecFechas0)),
length(unique(DataCleanDF()$VecFechas0)),
signif(c(IncertTipoA, IncertComb, IncertComb * 2), 4),
LevTest)),
'Unidades' = c(rep(DataCleanDF()$VecUnits[1], 3), rep('', 2), rep(DataCleanDF()$VecUnits[1], 3), '')))
})
resultadosCombi()
DataCleanDF()
DataCleanDF()$VecElement
DataCleanDF()$VecElement[1]
ylab <- expression(paste('FracciÃ³n masica / ', DataCleanDF()$VecUnits[1]))
ylab
p <- ggplot(data = DataCleanDF(), aes(x = index)) + theme_bw() +
labs(y = ylab, x = NULL) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
axis.text.y = element_text(color = "black"),
#axis.ticks.x = element_blank(),
axis.text.x = element_blank(), legend.title = element_blank()) +
scale_y_continuous(expand = c(0, 0.4), n.breaks = 8) +
#geom_hline(aes(yintercept = 0.999 * mean(VecFraccMa)), linetype = 4, lwd = 0.5, col = 'red1') +
geom_hline(aes(yintercept = (1 - tol) * mean(VecFraccMa)), linetype = 2, lwd = 0.5, col = 'gray60') +
geom_hline(aes(yintercept = mean(VecFraccMa)), linetype = 1, lwd = 0.5, col = 'gray60') +
geom_hline(aes(yintercept = (1 + tol) * mean(VecFraccMa)), linetype = 2, lwd = 0.5, col = 'gray60') +
#geom_hline(aes(yintercept = 1.001 * mean(VecFraccMa)), linetype = 4, lwd = 0.5, col = 'red1') +
geom_point(aes(y = VecFraccMa, color = VecFechas0)) +
geom_errorbar(aes(ymin = VecFraccMa - VecFracUnc, ymax = VecFraccMa + VecFracUnc, color = VecFechas0), width = 0.4)
#browser()
print(p)
tol <- 0.02
p <- ggplot(data = DataCleanDF(), aes(x = index)) + theme_bw() +
labs(y = ylab, x = NULL) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
axis.text.y = element_text(color = "black"),
#axis.ticks.x = element_blank(),
axis.text.x = element_blank(), legend.title = element_blank()) +
scale_y_continuous(expand = c(0, 0.4), n.breaks = 8) +
#geom_hline(aes(yintercept = 0.999 * mean(VecFraccMa)), linetype = 4, lwd = 0.5, col = 'red1') +
geom_hline(aes(yintercept = (1 - tol) * mean(VecFraccMa)), linetype = 2, lwd = 0.5, col = 'gray60') +
geom_hline(aes(yintercept = mean(VecFraccMa)), linetype = 1, lwd = 0.5, col = 'gray60') +
geom_hline(aes(yintercept = (1 + tol) * mean(VecFraccMa)), linetype = 2, lwd = 0.5, col = 'gray60') +
#geom_hline(aes(yintercept = 1.001 * mean(VecFraccMa)), linetype = 4, lwd = 0.5, col = 'red1') +
geom_point(aes(y = VecFraccMa, color = VecFechas0)) +
geom_errorbar(aes(ymin = VecFraccMa - VecFracUnc, ymax = VecFraccMa + VecFracUnc, color = VecFechas0), width = 0.4)
#browser()
print(p)
tol <- 0.005
p <- ggplot(data = DataCleanDF(), aes(x = index)) + theme_bw() +
labs(y = ylab, x = NULL) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
axis.text.y = element_text(color = "black"),
#axis.ticks.x = element_blank(),
axis.text.x = element_blank(), legend.title = element_blank()) +
scale_y_continuous(expand = c(0, 0.4), n.breaks = 8) +
#geom_hline(aes(yintercept = 0.999 * mean(VecFraccMa)), linetype = 4, lwd = 0.5, col = 'red1') +
geom_hline(aes(yintercept = (1 - tol) * mean(VecFraccMa)), linetype = 2, lwd = 0.5, col = 'gray60') +
geom_hline(aes(yintercept = mean(VecFraccMa)), linetype = 1, lwd = 0.5, col = 'gray60') +
geom_hline(aes(yintercept = (1 + tol) * mean(VecFraccMa)), linetype = 2, lwd = 0.5, col = 'gray60') +
#geom_hline(aes(yintercept = 1.001 * mean(VecFraccMa)), linetype = 4, lwd = 0.5, col = 'red1') +
geom_point(aes(y = VecFraccMa, color = VecFechas0)) +
geom_errorbar(aes(ymin = VecFraccMa - VecFracUnc, ymax = VecFraccMa + VecFracUnc, color = VecFechas0), width = 0.4)
#browser()
print(p)
p <- ggplot(data = DataCleanDF(), aes(x = index)) + theme_bw() +
labs(y = ylab, x = NULL) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
axis.text.y = element_text(color = "black"),
#axis.ticks.x = element_blank(),
axis.text.x = element_blank(), legend.title = element_blank()) +
scale_y_continuous(expand = c(0, 0.8), n.breaks = 8) +
#geom_hline(aes(yintercept = 0.999 * mean(VecFraccMa)), linetype = 4, lwd = 0.5, col = 'red1') +
geom_hline(aes(yintercept = (1 - tol) * mean(VecFraccMa)), linetype = 2, lwd = 0.5, col = 'gray60') +
geom_hline(aes(yintercept = mean(VecFraccMa)), linetype = 1, lwd = 0.5, col = 'gray60') +
geom_hline(aes(yintercept = (1 + tol) * mean(VecFraccMa)), linetype = 2, lwd = 0.5, col = 'gray60') +
#geom_hline(aes(yintercept = 1.001 * mean(VecFraccMa)), linetype = 4, lwd = 0.5, col = 'red1') +
geom_point(aes(y = VecFraccMa, color = VecFechas0)) +
geom_errorbar(aes(ymin = VecFraccMa - VecFracUnc, ymax = VecFraccMa + VecFracUnc, color = VecFechas0), width = 0.4)
#browser()
print(p)
p <- ggplot(data = DataCleanDF(), aes(x = index)) + theme_bw() +
labs(y = ylab, x = NULL) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
axis.text.y = element_text(color = "black"),
#axis.ticks.x = element_blank(),
axis.text.x = element_blank(), legend.title = element_blank()) +
scale_y_continuous(expand = c(0, 2.8), n.breaks = 8) +
#geom_hline(aes(yintercept = 0.999 * mean(VecFraccMa)), linetype = 4, lwd = 0.5, col = 'red1') +
geom_hline(aes(yintercept = (1 - tol) * mean(VecFraccMa)), linetype = 2, lwd = 0.5, col = 'gray60') +
geom_hline(aes(yintercept = mean(VecFraccMa)), linetype = 1, lwd = 0.5, col = 'gray60') +
geom_hline(aes(yintercept = (1 + tol) * mean(VecFraccMa)), linetype = 2, lwd = 0.5, col = 'gray60') +
#geom_hline(aes(yintercept = 1.001 * mean(VecFraccMa)), linetype = 4, lwd = 0.5, col = 'red1') +
geom_point(aes(y = VecFraccMa, color = VecFechas0)) +
geom_errorbar(aes(ymin = VecFraccMa - VecFracUnc, ymax = VecFraccMa + VecFracUnc, color = VecFechas0), width = 0.4)
#browser()
print(p)
p <- ggplot(data = DataCleanDF(), aes(x = index)) + theme_bw() +
labs(y = ylab, x = NULL) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
axis.text.y = element_text(color = "black"),
#axis.ticks.x = element_blank(),
axis.text.x = element_blank(), legend.title = element_blank()) +
scale_y_continuous(expand = c(0, 0), n.breaks = 8) +
#geom_hline(aes(yintercept = 0.999 * mean(VecFraccMa)), linetype = 4, lwd = 0.5, col = 'red1') +
geom_hline(aes(yintercept = (1 - tol) * mean(VecFraccMa)), linetype = 2, lwd = 0.5, col = 'gray60') +
geom_hline(aes(yintercept = mean(VecFraccMa)), linetype = 1, lwd = 0.5, col = 'gray60') +
geom_hline(aes(yintercept = (1 + tol) * mean(VecFraccMa)), linetype = 2, lwd = 0.5, col = 'gray60') +
#geom_hline(aes(yintercept = 1.001 * mean(VecFraccMa)), linetype = 4, lwd = 0.5, col = 'red1') +
geom_point(aes(y = VecFraccMa, color = VecFechas0)) +
geom_errorbar(aes(ymin = VecFraccMa - VecFracUnc, ymax = VecFraccMa + VecFracUnc, color = VecFechas0), width = 0.4)
#browser()
print(p)
p <- ggplot(data = DataCleanDF(), aes(x = index)) + theme_bw() +
labs(y = ylab, x = NULL) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
axis.text.y = element_text(color = "black"),
#axis.ticks.x = element_blank(),
axis.text.x = element_blank(), legend.title = element_blank()) +
scale_y_continuous(expand = c(0.2, 0), n.breaks = 8) +
#geom_hline(aes(yintercept = 0.999 * mean(VecFraccMa)), linetype = 4, lwd = 0.5, col = 'red1') +
geom_hline(aes(yintercept = (1 - tol) * mean(VecFraccMa)), linetype = 2, lwd = 0.5, col = 'gray60') +
geom_hline(aes(yintercept = mean(VecFraccMa)), linetype = 1, lwd = 0.5, col = 'gray60') +
geom_hline(aes(yintercept = (1 + tol) * mean(VecFraccMa)), linetype = 2, lwd = 0.5, col = 'gray60') +
#geom_hline(aes(yintercept = 1.001 * mean(VecFraccMa)), linetype = 4, lwd = 0.5, col = 'red1') +
geom_point(aes(y = VecFraccMa, color = VecFechas0)) +
geom_errorbar(aes(ymin = VecFraccMa - VecFracUnc, ymax = VecFraccMa + VecFracUnc, color = VecFechas0), width = 0.4)
#browser()
print(p)
p <- ggplot(data = DataCleanDF(), aes(x = index)) + theme_bw() +
labs(y = ylab, x = NULL) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
axis.text.y = element_text(color = "black"),
#axis.ticks.x = element_blank(),
axis.text.x = element_blank(), legend.title = element_blank()) +
scale_y_continuous(expand = c(0.4, 0), n.breaks = 8) +
#geom_hline(aes(yintercept = 0.999 * mean(VecFraccMa)), linetype = 4, lwd = 0.5, col = 'red1') +
geom_hline(aes(yintercept = (1 - tol) * mean(VecFraccMa)), linetype = 2, lwd = 0.5, col = 'gray60') +
geom_hline(aes(yintercept = mean(VecFraccMa)), linetype = 1, lwd = 0.5, col = 'gray60') +
geom_hline(aes(yintercept = (1 + tol) * mean(VecFraccMa)), linetype = 2, lwd = 0.5, col = 'gray60') +
#geom_hline(aes(yintercept = 1.001 * mean(VecFraccMa)), linetype = 4, lwd = 0.5, col = 'red1') +
geom_point(aes(y = VecFraccMa, color = VecFechas0)) +
geom_errorbar(aes(ymin = VecFraccMa - VecFracUnc, ymax = VecFraccMa + VecFracUnc, color = VecFechas0), width = 0.4)
#browser()
print(p)
p <- ggplot(data = DataCleanDF(), aes(x = index)) + theme_bw() +
labs(y = ylab, x = NULL) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
axis.text.y = element_text(color = "black"),
#axis.ticks.x = element_blank(),
axis.text.x = element_blank(), legend.title = element_blank()) +
scale_y_continuous(expand = c(0.8, 0), n.breaks = 8) +
#geom_hline(aes(yintercept = 0.999 * mean(VecFraccMa)), linetype = 4, lwd = 0.5, col = 'red1') +
geom_hline(aes(yintercept = (1 - tol) * mean(VecFraccMa)), linetype = 2, lwd = 0.5, col = 'gray60') +
geom_hline(aes(yintercept = mean(VecFraccMa)), linetype = 1, lwd = 0.5, col = 'gray60') +
geom_hline(aes(yintercept = (1 + tol) * mean(VecFraccMa)), linetype = 2, lwd = 0.5, col = 'gray60') +
#geom_hline(aes(yintercept = 1.001 * mean(VecFraccMa)), linetype = 4, lwd = 0.5, col = 'red1') +
geom_point(aes(y = VecFraccMa, color = VecFechas0)) +
geom_errorbar(aes(ymin = VecFraccMa - VecFracUnc, ymax = VecFraccMa + VecFracUnc, color = VecFechas0), width = 0.4)
#browser()
print(p)
p <- ggplot(data = DataCleanDF(), aes(x = index)) + theme_bw() +
labs(y = ylab, x = NULL) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
axis.text.y = element_text(color = "black"),
#axis.ticks.x = element_blank(),
axis.text.x = element_blank(), legend.title = element_blank()) +
scale_y_continuous(expand = c(0.4, 0), n.breaks = 8) +
#geom_hline(aes(yintercept = 0.999 * mean(VecFraccMa)), linetype = 4, lwd = 0.5, col = 'red1') +
geom_hline(aes(yintercept = (1 - tol) * mean(VecFraccMa)), linetype = 2, lwd = 0.5, col = 'gray60') +
geom_hline(aes(yintercept = mean(VecFraccMa)), linetype = 1, lwd = 0.5, col = 'gray60') +
geom_hline(aes(yintercept = (1 + tol) * mean(VecFraccMa)), linetype = 2, lwd = 0.5, col = 'gray60') +
#geom_hline(aes(yintercept = 1.001 * mean(VecFraccMa)), linetype = 4, lwd = 0.5, col = 'red1') +
geom_point(aes(y = VecFraccMa, color = VecFechas0)) +
geom_errorbar(aes(ymin = VecFraccMa - VecFracUnc, ymax = VecFraccMa + VecFracUnc, color = VecFechas0), width = 0.4)
#browser()
print(p)
ylab <- paste('FracciÃ³n masica / ', DataCleanDF()$VecUnits[1])
tol <- 0.005
p <- ggplot(data = DataCleanDF(), aes(x = index)) + theme_bw() +
labs(y = ylab, x = NULL) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
axis.text.y = element_text(color = "black"),
#axis.ticks.x = element_blank(),
axis.text.x = element_blank(), legend.title = element_blank()) +
scale_y_continuous(expand = c(0.4, 0), n.breaks = 8) +
#geom_hline(aes(yintercept = 0.999 * mean(VecFraccMa)), linetype = 4, lwd = 0.5, col = 'red1') +
geom_hline(aes(yintercept = (1 - tol) * mean(VecFraccMa)), linetype = 2, lwd = 0.5, col = 'gray60') +
geom_hline(aes(yintercept = mean(VecFraccMa)), linetype = 1, lwd = 0.5, col = 'gray60') +
geom_hline(aes(yintercept = (1 + tol) * mean(VecFraccMa)), linetype = 2, lwd = 0.5, col = 'gray60') +
#geom_hline(aes(yintercept = 1.001 * mean(VecFraccMa)), linetype = 4, lwd = 0.5, col = 'red1') +
geom_point(aes(y = VecFraccMa, color = VecFechas0)) +
geom_errorbar(aes(ymin = VecFraccMa - VecFracUnc, ymax = VecFraccMa + VecFracUnc, color = VecFechas0), width = 0.4)
#browser()
print(p)
x <- list()
unique((DataCleanDF()$VecFechas0))
unique((DataCleanDF()$VecFechas0)) -> i
j <- i
j
DayRes <- which(DataCleanDF()$VecFechas0 == j)
DayRes
datFram <- data.frame(Archivo = row.names(DataCleanDF())[DayRes],
Resultado = DataCleanDF()$VecFraccMa[DayRes],
'.' = rep(unidad, length(DayRes)))
unidad <- DataCleanDF()$VecUnits[1]
DayRes <- which(DataCleanDF()$VecFechas0 == j)
datFram <- data.frame(Archivo = row.names(DataCleanDF())[DayRes],
Resultado = DataCleanDF()$VecFraccMa[DayRes],
'.' = rep(unidad, length(DayRes)))
datFram
nDat <- nrow(datFram)
temp <- box(title = tags$b(paste0('Resumen de resultados del ', j)), status = 'primary', collapsible = TRUE, collapsed = FALSE,
column(5, #renderTable(isolate(datFram), digits = 3),
tags$h4('Promedio del dÃ­a:', tags$b(round(mean(datFram$Resultado), 3), unidad), tags$br(),
'DesviaciÃ³n estÃ¡ndar relativa del dÃ­a:', tags$b(round(sd(datFram$Resultado)/mean(datFram$Resultado)*100, 3), '%'))),
column(7, tags$h4('Valor p prueba de normalidad de Shapiro-Wilk:',
tags$b(tryCatch(signif(shapiro.test(datFram$Resultado)$p.value, 3),
error = function(e) 'No se puede calcular para menos de tres datos')),
tags$br(),
'Valores p de las pruebas de datos anÃ³malos de Grubbs:', tags$br(),
tryCatch(
tags$h4('  Â· ', tags$b(signif(grubbs.test(datFram$Resultado, type = 10)$p.value, 3)),
' para el valor mÃ¡s ',
ifelse(word(grubbs.test(datFram$Resultado, type = 10)$alternative, 1) == 'highest', 'alto.', 'bajo.')),
error = function(e) 'No se puede calcular para menos de tres datos'),
tryCatch(
tags$h4('  Â· ', tags$b(signif(grubbs.test(datFram$Resultado, type = 11)$p.value, 3)),
' para un valor a cada extremo.', tags$br(),
'  Â· ', tags$b(signif(grubbs.test(datFram$Resultado, type = 20)$p.value, 3)),
' para los dos valores mÃ¡s ',
ifelse(word(grubbs.test(datFram$Resultado, type = 10)$alternative, 1) == 'highest', 'altos.', 'bajos.')),
error = function(e) ''))
))
temp
x <- c(x, temp)
for (i in unique((DataCleanDF()$VecFechas0))) {
j <- i
DayRes <- which(DataCleanDF()$VecFechas0 == j)
datFram <- data.frame(Archivo = row.names(DataCleanDF())[DayRes],
Resultado = DataCleanDF()$VecFraccMa[DayRes],
'.' = rep(unidad, length(DayRes)))
nDat <- nrow(datFram)
temp <- box(title = tags$b(paste0('Resumen de resultados del ', j)), status = 'primary', collapsible = TRUE, collapsed = FALSE,
column(5, #renderTable(isolate(datFram), digits = 3),
tags$h4('Promedio del dÃ­a:', tags$b(round(mean(datFram$Resultado), 3), unidad), tags$br(),
'DesviaciÃ³n estÃ¡ndar relativa del dÃ­a:', tags$b(round(sd(datFram$Resultado)/mean(datFram$Resultado)*100, 3), '%'))),
column(7, tags$h4('Valor p prueba de normalidad de Shapiro-Wilk:',
tags$b(tryCatch(signif(shapiro.test(datFram$Resultado)$p.value, 3),
error = function(e) 'No se puede calcular para menos de tres datos')),
tags$br(),
'Valores p de las pruebas de datos anÃ³malos de Grubbs:', tags$br(),
tryCatch(
tags$h4('  Â· ', tags$b(signif(grubbs.test(datFram$Resultado, type = 10)$p.value, 3)),
' para el valor mÃ¡s ',
ifelse(word(grubbs.test(datFram$Resultado, type = 10)$alternative, 1) == 'highest', 'alto.', 'bajo.')),
error = function(e) 'No se puede calcular para menos de tres datos'),
tryCatch(
tags$h4('  Â· ', tags$b(signif(grubbs.test(datFram$Resultado, type = 11)$p.value, 3)),
' para un valor a cada extremo.', tags$br(),
'  Â· ', tags$b(signif(grubbs.test(datFram$Resultado, type = 20)$p.value, 3)),
' para los dos valores mÃ¡s ',
ifelse(word(grubbs.test(datFram$Resultado, type = 10)$alternative, 1) == 'highest', 'altos.', 'bajos.')),
error = function(e) ''))
))
x <- c(x, temp)
}
runApp()
runApp()
runApp()
runApp()
x <- list()
unidad <- DataCleanDF()$VecUnits[1]
unidad
unique((DataCleanDF()$VecFechas0))
unique((DataCleanDF()$VecFechas0))->i
j <- i
DayRes <- which(DataCleanDF()$VecFechas0 == j)
datFram <- data.frame(Archivo = row.names(DataCleanDF())[DayRes],
Resultado = DataCleanDF()$VecFraccMa[DayRes],
'.' = rep(unidad, length(DayRes)))
nDat <- nrow(datFram)
temp <- box(title = tags$b(paste0('Resumen de resultados del dÃ­a', j)), status = 'primary', collapsible = TRUE, collapsed = FALSE,
column(5, #renderTable(isolate(datFram), digits = 3),
'Promedio:', tags$b(round(mean(datFram$Resultado), 3), unidad), tags$br(),
'DesviaciÃ³n estÃ¡ndar relativa:', tags$b(round(sd(datFram$Resultado)/mean(datFram$Resultado)*100, 3), '%')),
column(7, 'Normalidad de los datos (Valor p prueba de Shapiro-Wilk):',
tags$b(tryCatch(signif(shapiro.test(datFram$Resultado)$p.value, 3),
error = function(e) 'No disponible para menos de tres datos')),
tags$br(),
'Ausencia de datos anÃ³malos (Valores p pruebas de Grubbs):', tags$br(),
tryCatch(
'  Â· ', tags$b(signif(grubbs.test(datFram$Resultado, type = 10)$p.value, 3)),
' para el valor mÃ¡s ',
ifelse(word(grubbs.test(datFram$Resultado, type = 10)$alternative, 1) == 'highest', 'alto.', 'bajo.'),
error = function(e) 'No disponible para menos de tres datos'),
tryCatch(
'  Â· ', tags$b(signif(grubbs.test(datFram$Resultado, type = 11)$p.value, 3)),
' para un valor a cada extremo.', tags$br(),
'  Â· ', tags$b(signif(grubbs.test(datFram$Resultado, type = 20)$p.value, 3)),
' para los dos valores mÃ¡s ',
ifelse(word(grubbs.test(datFram$Resultado, type = 10)$alternative, 1) == 'highest', 'altos.', 'bajos.'),
error = function(e) '')
))
column(5, #renderTable(isolate(datFram), digits = 3),
'Promedio:', tags$b(round(mean(datFram$Resultado), 3), unidad), tags$br(),
'DesviaciÃ³n estÃ¡ndar relativa:', tags$b(round(sd(datFram$Resultado)/mean(datFram$Resultado)*100, 3), '%'))
shapiro.test(datFram$Resultado)$p.value
tags$b(tryCatch(signif(shapiro.test(datFram$Resultado)$p.value, 3),
error = function(e) 'No disponible para menos de tres datos'))
tags$b(signif(grubbs.test(datFram$Resultado, type = 10)$p.value, 3))
grubbs.test(datFram$Resultado, type = 10)$alternative, 1)
grubbs.test(datFram$Resultado, type = 10)$alternative
ifelse(word(grubbs.test(datFram$Resultado, type = 10)$alternative, 1) == 'highest', 'alto.', 'bajo.')
tags$b(signif(grubbs.test(datFram$Resultado, type = 11)$p.value, 3))
tags$b(signif(grubbs.test(datFram$Resultado, type = 20)$p.value, 3))
grubbs.test(datFram$Resultado, type = 20)
datFram$Resultado
tryCatch(
'  Â· ', tags$b(signif(grubbs.test(datFram$Resultado, type = 11)$p.value, 3)),
' para un valor a cada extremo.', tags$br(),
'  Â· ', tags$b(signif(grubbs.test(datFram$Resultado, type = 20)$p.value, 3)),
' para los dos valores mÃ¡s ',
ifelse(word(grubbs.test(datFram$Resultado, type = 10)$alternative, 1) == 'highest', 'altos.', 'bajos.')
)
signif(grubbs.test(datFram$Resultado, type = 10)
signif(grubbs.test(datFram$Resultado, type = 10)$p.value, 3)
signif(grubbs.test(datFram$Resultado, type = 10)$p.value, 3)
signif(grubbs.test(datFram$Resultado, type = 11)$p.value, 3)
signif(grubbs.test(datFram$Resultado, type = 20)$p.value, 3)
datFram$Resultado
length(datFram$Resultado)
runApp()
signif(grubbs.test(datFram$Resultado, type = 11)$p.value, 3)
x <- list()
unidad <- DataCleanDF()$VecUnits[1]
i = unique((DataCleanDF()$VecFechas0))
j <- i
DayRes <- which(DataCleanDF()$VecFechas0 == j)
datFram <- data.frame(Archivo = row.names(DataCleanDF())[DayRes],
Resultado = DataCleanDF()$VecFraccMa[DayRes],
'.' = rep(unidad, length(DayRes)))
nDat <- nrow(datFram)
'Promedio:', tags$b(signif(mean(datFram$Resultado), 7), unidad), tags$br(),
tags$b(tryCatch(signif(shapiro.test(datFram$Resultado)$p.value, 3),
error = function(e) 'No disponible para menos de tres datos'))
tryCatch(
'  Â· ', tags$b(signif(grubbs.test(datFram$Resultado, type = 10)$p.value, 3))
tryCatch(
'  Â· ', tags$b(signif(grubbs.test(datFram$Resultado, type = 10)$p.value, 3)),
' para el valor mÃ¡s ',
ifelse(word(grubbs.test(datFram$Resultado, type = 10)$alternative, 1) == 'highest', 'alto.', 'bajo.'),
error = function(e) 'No disponible para menos de tres datos')
tryCatch(
tags$span(
'  Â· ', tags$b(signif(grubbs.test(datFram$Resultado, type = 10)$p.value, 3)),
' para el valor mÃ¡s ',
ifelse(word(grubbs.test(datFram$Resultado, type = 10)$alternative, 1) == 'highest', 'alto.', 'bajo.')),
error = function(e) 'No disponible para menos de tres datos')
x <- tagList()
x
x <- (x, tags$div())
x <- c(x, tags$div())
x <- tagList()
str(x)
x <- c(x, tags$div())
str(x)
x <- c(x, tags$div())
x
runApp()
runApp()
lapply(paste0("rb_", 1:10), function(x){radioButtons(inputId = x, label = x, choices = c("A", "B"))})
runApp()
pred <- function(p, conf.lev = 0.95) {
if (p < 1 - conf.lev) return(tags$p(style = 'color:red;', p)) else return(p)
}
pred(0.05)
pred(0.051)
runApp()
runApp()
DataCleanDF()
runApp()
runApp()
runApp()
runApp()
runApp()
sapply(PartialTitrationResults$results, function (x) {
return(xml_text(xml_child(x(), search = 'mr:coreData/mr:respPerson/name')))})
sapply(PartialTitrationResults$results, function (x) {
return(xml_text(xml_child(x(), search = 'mr:coreData/mr:respPerson')))})
sapply(PartialTitrationResults$results, function (x) {
return(xml_child(x(), search = 'mr:coreData/mr:respPerson')))}
sapply(PartialTitrationResults$results, function (x) {
return(xml_child(x(), search = 'mr:coreData/mr:respPerson'))
sapply(PartialTitrationResults$results, function (x) {
return(xml_child(x(), search = 'mr:coreData/mr:respPerson')))
sapply(PartialTitrationResults$results, function (x) {
return(xml_child(x(), search = 'mr:coreData/mr:respPerson')))
sapply(PartialTitrationResults$results, function (x) {
return(xml_child(x(), search = 'mr:coreData/mr:respPerson'))})
sapply(PartialTitrationResults$results, function (x) {
return(xml_child(x(), search = 'mr:coreData'))})
xml_child(PartialTitrationResults$results[[1]](), search = 'mr:coreData'))
xml_child(PartialTitrationResults$results[[1]](), search = 'mr:coreData')
sapply(PartialTitrationResults$results, function (x) {
return(xml_text(xml_child(x(), search = 'mr:coreData/respPerson')))})
sapply(PartialTitrationResults$results, function (x) {
return(xml_text(xml_child(x(), search = 'mr:coreData/respPerson/name')))})
runApp()
shiny::runApp()
install.packages('writexl')
shiny::runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
shiny::runApp()
