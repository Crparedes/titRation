install.packages('xml2')
install.packages('dplyr')
install.packages('stringr')
install.packages('xml2')
install.packages('dplyr')
install.packages('stringr')
shiny::runApp('~/masscor_shinyapp')
runApp('~/Aplicativo Bio')
runApp()
runApp()
runApp()
runApp()
runApp('~/Aplicativo Bio')
runApp()
runApp()
runApp()
runApp()
runApp()
with(list(pt = 'RPackage/'), paste0(pt, list.files(path = pt)))
paste0('functions/', list.files(path = "CustomFunctions"))
customFunctions <- paste0('functions/', list.files(path = "functions")) # functions in the server side
customFunctions
runApp()
runApp('~/Aplicativo Bio')
setwd("~/titulaR")
runApp()
View(spcs)
View(seedNorm)
shiny::runApp()
runApp('~/AppDevel')
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
install.packages("shinydashboardPlus")
library(shinydashboardPlus)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
NiceDensitAir()
input$Temp1
c(airDensity(Temp = input$Temp, p = input$BarPres, h = input$relHum),
uncertAirDensity(Temp = input$Temp, p = input$BarPres, h = input$relHum,
u_Temp = input$u_Temp, u_p = input$u_BarPres,
u_h = input$u_relHum, printRelSD = FALSE))
runApp()
runApp()
runApp()
############## Ambient conditions
headingAmbiente <- '<?xml version="1.0" encoding="UTF-8"?>
<mr:ambiente ID = "idAmbiente"
xmlns:mr="https://inm.gov.co/mr"
xmlns:si="https://ptb.de/si"
xmlns:qudt="http://qudt.org/vocab/"
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
xsi:schemaLocation="https://ptb.de/si https://www.ptb.de/si/v2.2.0/SI_Format.xsd"/>'
read_xml(headingAmbiente)
message(read_xml(headingAmbiente))
############## Ambient conditions
headingAmbiente <- '
<mr:ambiente ID = "idAmbiente"
xmlns:mr="https://inm.gov.co/mr"
xmlns:si="https://ptb.de/si"
xmlns:qudt="http://qudt.org/vocab/"
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
xsi:schemaLocation="https://ptb.de/si https://www.ptb.de/si/v2.2.0/SI_Format.xsd"/>'
message(read_xml(headingAmbiente))
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
balanzasUse()
input$balanzasUse_open
input$balanzasUse
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
############ Personal
headingPerson <- '<?xml version="1.0" encoding="UTF-8"?>
<person:PersonXML
xmlns:person="https://inm.gov.co/personal"
xmlns:inst="https://inm.gov.co/inst"/>'
read_xml(headingPerson)
############ Personal
headingPerson <- '
<person:PersonXML
xmlns:person="https://inm.gov.co/personal"
xmlns:inst="https://inm.gov.co/inst"/>'
read_xml(headingPerson)
read_xml()
read_xml('')
read_xml('</>')
read_xml('<si:real/>')
read_xml('<si:real xmlns:si="https://ptb.de/si"/>')
SiReal <- read_xml('<si:real xmlns:si="https://ptb.de/si"/>')
addDataToMRXML(
read_xml('<si:real xmlns:si="https://ptb.de/si"/>'),
list('si:real' = list(
'si:quantityTypeQUDT' = quantityTypeQUDT,
'si:value' = input$value,
'si:unit' = input$units,
'si:expandedUnc' = list(
'si:uncertainty' = input$uncert,
'si:coverageFactor' = input$covFac,
'si:coverageProbability' = input$distribution)))
)
addDataToMRXML <- function(xmlObject, fields, node = NULL) {
if(missing(node)) {x <- xmlObject} else {x <- xml_child(xmlObject, node)}
lapply(seq_along(fields), function (y) {
if (!is.list(fields[[y]])) {
if (length(fields[[y]]) == 1) {
xml_add_child(.x = x, .value = names(fields)[y], fields[[y]])
} else {
AdditAtrib <- paste(paste0(names(fields[[y]][-1]), " = '", fields[[y]][-1], "'"), collapse = ', ')
eval(parse(text = paste(
"xml_add_child(.x = x, .value = names(fields)[y], fields[[y]][1],", AdditAtrib, ")")))
}
} else {
xml_add_child(.x = x, .value = names(fields)[y])
addDataToMRXML(xmlObject = x, fields = fields[[y]], node = names(fields)[y])
}
})
return(xmlObject)
}
addDataToMRXML(
read_xml('<si:real xmlns:si="https://ptb.de/si"/>'),
list('si:real' = list(
'si:quantityTypeQUDT' = quantityTypeQUDT,
'si:value' = input$value,
'si:unit' = input$units,
'si:expandedUnc' = list(
'si:uncertainty' = input$uncert,
'si:coverageFactor' = input$covFac,
'si:coverageProbability' = input$distribution)))
)
quantityTypeQUDT = ''
addDataToMRXML(
read_xml('<si:real xmlns:si="https://ptb.de/si"/>'),
list('si:real' = list(
'si:quantityTypeQUDT' = quantityTypeQUDT,
'si:value' = input$value,
'si:unit' = input$units,
'si:expandedUnc' = list(
'si:uncertainty' = input$uncert,
'si:coverageFactor' = input$covFac,
'si:coverageProbability' = input$distribution))))
runApp()
SiReal
SiReal()
SiReal <- read_xml('<si:real xmlns:si="https://ptb.de/si"/>')
SiReal
addDataToMRXML(
SiReal,
list('si:real' = list(
'si:quantityTypeQUDT' = quantityTypeQUDT,
'si:value' = input$value,
'si:unit' = input$units,
'si:expandedUnc' = list(
'si:uncertainty' = input$uncert,
'si:coverageFactor' = input$covFac,
'si:coverageProbability' = input$distribution))))
SiReal
message(SiReal)
addDataToMRXML(
read_xml('<si:real xmlns:si="https://ptb.de/si"/>'),
list('si:real' = list(
'si:quantityTypeQUDT' = quantityTypeQUDT,
'si:value' = input$value,
'si:unit' = input$units,
'si:expandedUnc' = list(
'si:uncertainty' = input$uncert,
'si:coverageFactor' = input$covFac,
'si:coverageProbability' = input$distribution))))
addDataToMRXML(
read_xml('<si:real>'),
list('si:real' = list(
'si:quantityTypeQUDT' = quantityTypeQUDT,
'si:value' = input$value,
'si:unit' = input$units,
'si:expandedUnc' = list(
'si:uncertainty' = input$uncert,
'si:coverageFactor' = input$covFac,
'si:coverageProbability' = input$distribution))))
addDataToMRXML(
read_xml('<si:real/>'),
list('si:real' = list(
'si:quantityTypeQUDT' = quantityTypeQUDT,
'si:value' = input$value,
'si:unit' = input$units,
'si:expandedUnc' = list(
'si:uncertainty' = input$uncert,
'si:coverageFactor' = input$covFac,
'si:coverageProbability' = input$distribution))))
runApp()
runApp()
Temperatura()
message(Temperatura())
runApp()
message(Temperatura())
xml_child(Temperatura(), 'si:value')
xml_child(Temperatura(), 'si:real')
xml_child(xml_child(Temperatura(), 'si:real'), 'si:value'
)
xml_child(xml_child(Temperatura(), 'si:real'), 'si:value')
xml_child(Temperatura(), 'si:real')
xml_child(Temperatura(), 'si:real')[1]
xml_child(Temperatura(), 'si:real')[2]
xml_child(Temperatura(), 'si:real')[[2]]
xml_child(Temperatura(), 'si:real')
runApp()
runApp()
Temperatura()
xml_child(Temperatura(), 'si:value')
list(xml_child(Temperatura(), 'si:value'))
as.list(xml_child(Temperatura(), 'si:value'))
xml_find_num(Temperatura(), '//si:value'))
xml_find_num(Temperatura(), '//si:value')
xml_find_all(Temperatura(), '//si:value')
xml_double(xml_find_all(Temperatura(), '//si:value'))
Temperatura()
xml_find_all(Temperatura(), '//si:uncertainty')
u_Temp <- xml_double(xml_find_all(Temperatura(), '//si:expandedUnc/si:uncertainty'))
u_Temp
xml_double(xml_find_all(Temperatura(), '//si:expandedUnc/si:uncertainty'))
runApp()
runApp()
runApp()
xml_double(xml_find_all(Temperatura(), '//si:value'))
xml_double(xml_find_all(Temperatura(), '//si:expandedUnc/si:uncertainty'))
xml_double(xml_find_all(HumedadRela(), '//si:expandedUnc/si:uncertainty'))
c(airDensity(Temp, p, h), uncertAirDensity(Temp, p, h, u_Temp, u_p, u_h))
Temp <- xml_double(xml_find_all(Temperatura(), '//si:value'))
p <- xml_double(xml_find_all(PressionBar(), '//si:value'))
h <- xml_double(xml_find_all(HumedadRela(), '//si:value'))
u_Temp <- xml_double(xml_find_all(Temperatura(), '//si:expandedUnc/si:uncertainty'))
u_p <- xml_double(xml_find_all(PressionBar(), '//si:expandedUnc/si:uncertainty'))
u_h <- xml_double(xml_find_all(HumedadRela(), '//si:expandedUnc/si:uncertainty'))
c(airDensity(Temp, p, h), uncertAirDensity(Temp, p, h, u_Temp, u_p, u_h))
Q
runApp()
Temp <- xml_double(xml_find_all(Temperatura(), '//si:value'))
p <- xml_double(xml_find_all(PressionBar(), '//si:value'))
h <- xml_double(xml_find_all(HumedadRela(), '//si:value'))
u_Temp <- xml_double(xml_find_all(Temperatura(), '//si:expandedUnc/si:uncertainty'))
u_p <- xml_double(xml_find_all(PressionBar(), '//si:expandedUnc/si:uncertainty'))
u_h <- xml_double(xml_find_all(HumedadRela(), '//si:expandedUnc/si:uncertainty'))
airDensity(Temp, p, h)
uncertAirDensity(Temp, p, h, u_Temp, u_p, u_h)
runApp()
Temp <- xml_double(xml_find_all(Temperatura(), '//si:value'))
function ()
p <- xml_double(xml_find_all(PressionBar(), '//si:value'))
h <- xml_double(xml_find_all(HumedadRela(), '//si:value'))
Temp <- xml_double(xml_find_all(Temperatura(), '//si:value'))
p <- xml_double(xml_find_all(PressionBar(), '//si:value'))
h <- xml_double(xml_find_all(HumedadRela(), '//si:value'))
u_Temp <- xml_double(xml_find_all(Temperatura(), '//si:expandedUnc/si:uncertainty'))
u_p <- xml_double(xml_find_all(PressionBar(), '//si:expandedUnc/si:uncertainty'))
u_h <- xml_double(xml_find_all(HumedadRela(), '//si:expandedUnc/si:uncertainty'))
airDensity(Temp, p, h)
Temp
p
h
u_Temp
u_p
u_h
uncertAirDensity(Temp, p, h, u_Temp, u_p, u_h)
uncertAirDensity()
uncertAirDensity(printRelSD = FALSE)
runApp()
u_h
uncertAirDensity()
uncertAirDensity(Temp)
units_Temp <- xml_char(xml_find_all(Temperatura(), '//si:unit'))
units_Temp <- xml_text(xml_find_all(Temperatura(), '//si:unit'))
units_Temp
xml_find_all(Temperatura(), '//si:unit')) == '\degreecelsius'
xml_text(xml_find_all(Temperatura(), '//si:unit')) == '\degreecelsius'
xml_text(xml_find_all(Temperatura(), '//si:unit')) == '\\degreecelsius'
units_Temp <- case_when(
xml_text(xml_find_all(Temperatura(), '//si:unit')) == '\\degreecelsius' ~ 'deg.C')
units_Temp
xml_text(xml_find_all(PressionBar(), '//si:unit'))
xml_text(xml_find_all(HumedadRela(), '//si:unit'))
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
input$NewCaliSamSol
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
DensiDisol
SiRealInputServer('DensiDisol', devMode = devMode)
SiRealInputUI(ns('DensiDisol'), name = 'Densidad de la disoluciÃ³n',
x0 = ifelse(reagKey == 'EDTA', 1.000, ifelse(reagKey == 'Pb', 1.007, 0)),
u0 = ifelse(reagKey == 'EDTA', 0.004, ifelse(reagKey == 'Pb', 0.006, 0)), units = DensityUnits)
ns = NS()
ns = NS('x')
SiRealInputUI(ns('DensiDisol'), name = 'Densidad de la disoluciÃ³n',
x0 = ifelse(reagKey == 'EDTA', 1.000, ifelse(reagKey == 'Pb', 1.007, 0)),
u0 = ifelse(reagKey == 'EDTA', 0.004, ifelse(reagKey == 'Pb', 0.006, 0)), units = DensityUnits)
reagKey = 'EDTA'
SiRealInputUI(ns('DensiDisol'), name = 'Densidad de la disoluciÃ³n',
x0 = ifelse(reagKey == 'EDTA', 1.000, ifelse(reagKey == 'Pb', 1.007, 0)),
u0 = ifelse(reagKey == 'EDTA', 0.004, ifelse(reagKey == 'Pb', 0.006, 0)), units = DensityUnits)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
Sys.Date()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
analyst
analyst()
authPersons
files
read_xml(files(1))
read_xml(files[1])
read_xml(files[[1]])
sapply(files, function (x) as_list(read_xml(x)))
sapply(files, function (x) read_xml(x))
read_xml(files[[1]])
as.list(read_xml(files[[1]]))
as_list(read_xml(files[[1]]))
as_xml_document(as_list(read_xml(files[[1]])))
read_xml(files[[1]])
as_xml_document(as_list(read_xml(files[[1]])))
as_xml_document(as_list(read_xml(files[[1]])))
############ Personal
headingPerson <- '<?xml version="1.0" encoding="UTF-8"?>
<PersonXML/>'
read_xml(headingPerson)
data_CristhianParedes <- list(
'name' = 'Cristhian Paredes',
'email' = 'caparedes@inm.gov.co',
'orcid' = 'https://orcid.org/0000-0001-7049-9597')
inst_CristhianParedes <- list(
'name' = c('Instituto Nacional de MetrologÃ­a de Colombia', lang = 'ES'),
'shortName' = 'INM',
'country' = 'CO',
'alternativeName' = c('National Metrology Institute of Colombia', lang = 'EN'),
'ror' = 'https://ror.org/028s91538',
'url' = 'https://inm.gov.co')
CristhianParedes <- initiatePersonXML('CristhianParedes')
addDataToMRXML(CristhianParedes, fields = data_CristhianParedes, node = 'data')
addDataToMRXML(xmlObject = CristhianParedes, fields = inst_CristhianParedes, node = 'inst')
message(CristhianParedes)
############ Personal
headingPerson <- '<?xml version="1.0" encoding="UTF-8"?>
<PersonXML/>'
read_xml(headingPerson)
initiatePersonXML <- function(name) {
heading <- str_replace(headingPerson, 'PersonXML', name)
xmlObject <- read_xml(heading)
xmlObject %>% {
xml_add_child(., 'data')
xml_add_child(., 'inst')
}
return(xmlObject)
}
data_CristhianParedes <- list(
'name' = 'Cristhian Paredes',
'email' = 'caparedes@inm.gov.co',
'orcid' = 'https://orcid.org/0000-0001-7049-9597')
inst_CristhianParedes <- list(
'name' = c('Instituto Nacional de MetrologÃ­a de Colombia', lang = 'ES'),
'shortName' = 'INM',
'country' = 'CO',
'alternativeName' = c('National Metrology Institute of Colombia', lang = 'EN'),
'ror' = 'https://ror.org/028s91538',
'url' = 'https://inm.gov.co')
CristhianParedes <- initiatePersonXML('CristhianParedes')
addDataToMRXML(CristhianParedes, fields = data_CristhianParedes, node = 'data')
addDataToMRXML(xmlObject = CristhianParedes, fields = inst_CristhianParedes, node = 'inst')
message(CristhianParedes)
xmlObject <- read_xml('<respPerson/>')
xmlObject
initiatePersonXML <- function(name) {
headingPerson <- '<?xml version="1.0" encoding="UTF-8"?>
<respPerson/>'
xmlObject <- read_xml('<respPerson/>')
xmlObject %>% {
xml_add_child(., 'data')
xml_add_child(., 'inst')
}
return(xmlObject)
}
data_CristhianParedes <- list(
'name' = 'Cristhian Paredes',
'email' = 'caparedes@inm.gov.co',
'orcid' = 'https://orcid.org/0000-0001-7049-9597')
inst_CristhianParedes <- list(
'name' = c('Instituto Nacional de MetrologÃ­a de Colombia', lang = 'ES'),
'shortName' = 'INM',
'country' = 'CO',
'alternativeName' = c('National Metrology Institute of Colombia', lang = 'EN'),
'ror' = 'https://ror.org/028s91538',
'url' = 'https://inm.gov.co')
CristhianParedes <- initiatePersonXML('CristhianParedes')
addDataToMRXML(CristhianParedes, fields = data_CristhianParedes, node = 'data')
addDataToMRXML(xmlObject = CristhianParedes, fields = inst_CristhianParedes, node = 'inst')
message(CristhianParedes)
write_xml(CristhianParedes, 'www/Personal/Cristhian Paredes.xml')
data_Analista2 <- list(
'name' = 'Analista2',
'email' = 'contacto@inm.gov.co',
'orcid' = 'https://orcid.org/')
inst_Analista2 <- list(
'name' = c('Instituto Nacional de MetrologÃ­a de Colombia', lang = 'ES'),
'shortName' = 'INM',
'country' = 'CO',
'alternativeName' = c('National Metrology Institute of Colombia', lang = 'EN'),
'ror' = 'https://ror.org/028s91538',
'url' = 'https://inm.gov.co')
Analista2 <- initiatePersonXML('Analista2')
addDataToMRXML(Analista2, fields = data_Analista2, node = 'data')
addDataToMRXML(xmlObject = Analista2, fields = inst_Analista2, node = 'inst')
message(Analista2)
write_xml(Analista2, 'www/Personal/Analista 2.xml')
## Personal
files <- gsub('', '', list.files(path = 'www/Personal/', pattern = 'xml', full.names = TRUE))
authPersons <- sapply(files, function (x) as_list(read_xml(x)))
authPersons
names(authPersons) <- sapply(authPersons, function (x) x$data$name)
authPersons
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
