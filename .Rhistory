#geom_hline(aes(yintercept = 0.999 * mean(VecFraccMa)), linetype = 4, lwd = 0.5, col = 'red1') +
geom_hline(aes(yintercept = (1 - tol) * mean(VecFraccMa)), linetype = 2, lwd = 0.5, col = 'gray60') +
geom_hline(aes(yintercept = mean(VecFraccMa)), linetype = 1, lwd = 0.5, col = 'gray60') +
geom_hline(aes(yintercept = (1 + tol) * mean(VecFraccMa)), linetype = 2, lwd = 0.5, col = 'gray60') +
#geom_hline(aes(yintercept = 1.001 * mean(VecFraccMa)), linetype = 4, lwd = 0.5, col = 'red1') +
geom_point(aes(y = VecFraccMa, color = VecFechas0)) +
geom_errorbar(aes(ymin = VecFraccMa - VecFracUnc, ymax = VecFraccMa + VecFracUnc, color = VecFechas0), width = 0.4)
#browser()
print(p)
p <- ggplot(data = DataCleanDF(), aes(x = index)) + theme_bw() +
labs(y = ylab, x = NULL) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
axis.text.y = element_text(color = "black"),
#axis.ticks.x = element_blank(),
axis.text.x = element_blank(), legend.title = element_blank()) +
scale_y_continuous(expand = c(0, 0.8), n.breaks = 8) +
#geom_hline(aes(yintercept = 0.999 * mean(VecFraccMa)), linetype = 4, lwd = 0.5, col = 'red1') +
geom_hline(aes(yintercept = (1 - tol) * mean(VecFraccMa)), linetype = 2, lwd = 0.5, col = 'gray60') +
geom_hline(aes(yintercept = mean(VecFraccMa)), linetype = 1, lwd = 0.5, col = 'gray60') +
geom_hline(aes(yintercept = (1 + tol) * mean(VecFraccMa)), linetype = 2, lwd = 0.5, col = 'gray60') +
#geom_hline(aes(yintercept = 1.001 * mean(VecFraccMa)), linetype = 4, lwd = 0.5, col = 'red1') +
geom_point(aes(y = VecFraccMa, color = VecFechas0)) +
geom_errorbar(aes(ymin = VecFraccMa - VecFracUnc, ymax = VecFraccMa + VecFracUnc, color = VecFechas0), width = 0.4)
#browser()
print(p)
p <- ggplot(data = DataCleanDF(), aes(x = index)) + theme_bw() +
labs(y = ylab, x = NULL) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
axis.text.y = element_text(color = "black"),
#axis.ticks.x = element_blank(),
axis.text.x = element_blank(), legend.title = element_blank()) +
scale_y_continuous(expand = c(0, 2.8), n.breaks = 8) +
#geom_hline(aes(yintercept = 0.999 * mean(VecFraccMa)), linetype = 4, lwd = 0.5, col = 'red1') +
geom_hline(aes(yintercept = (1 - tol) * mean(VecFraccMa)), linetype = 2, lwd = 0.5, col = 'gray60') +
geom_hline(aes(yintercept = mean(VecFraccMa)), linetype = 1, lwd = 0.5, col = 'gray60') +
geom_hline(aes(yintercept = (1 + tol) * mean(VecFraccMa)), linetype = 2, lwd = 0.5, col = 'gray60') +
#geom_hline(aes(yintercept = 1.001 * mean(VecFraccMa)), linetype = 4, lwd = 0.5, col = 'red1') +
geom_point(aes(y = VecFraccMa, color = VecFechas0)) +
geom_errorbar(aes(ymin = VecFraccMa - VecFracUnc, ymax = VecFraccMa + VecFracUnc, color = VecFechas0), width = 0.4)
#browser()
print(p)
p <- ggplot(data = DataCleanDF(), aes(x = index)) + theme_bw() +
labs(y = ylab, x = NULL) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
axis.text.y = element_text(color = "black"),
#axis.ticks.x = element_blank(),
axis.text.x = element_blank(), legend.title = element_blank()) +
scale_y_continuous(expand = c(0, 0), n.breaks = 8) +
#geom_hline(aes(yintercept = 0.999 * mean(VecFraccMa)), linetype = 4, lwd = 0.5, col = 'red1') +
geom_hline(aes(yintercept = (1 - tol) * mean(VecFraccMa)), linetype = 2, lwd = 0.5, col = 'gray60') +
geom_hline(aes(yintercept = mean(VecFraccMa)), linetype = 1, lwd = 0.5, col = 'gray60') +
geom_hline(aes(yintercept = (1 + tol) * mean(VecFraccMa)), linetype = 2, lwd = 0.5, col = 'gray60') +
#geom_hline(aes(yintercept = 1.001 * mean(VecFraccMa)), linetype = 4, lwd = 0.5, col = 'red1') +
geom_point(aes(y = VecFraccMa, color = VecFechas0)) +
geom_errorbar(aes(ymin = VecFraccMa - VecFracUnc, ymax = VecFraccMa + VecFracUnc, color = VecFechas0), width = 0.4)
#browser()
print(p)
p <- ggplot(data = DataCleanDF(), aes(x = index)) + theme_bw() +
labs(y = ylab, x = NULL) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
axis.text.y = element_text(color = "black"),
#axis.ticks.x = element_blank(),
axis.text.x = element_blank(), legend.title = element_blank()) +
scale_y_continuous(expand = c(0.2, 0), n.breaks = 8) +
#geom_hline(aes(yintercept = 0.999 * mean(VecFraccMa)), linetype = 4, lwd = 0.5, col = 'red1') +
geom_hline(aes(yintercept = (1 - tol) * mean(VecFraccMa)), linetype = 2, lwd = 0.5, col = 'gray60') +
geom_hline(aes(yintercept = mean(VecFraccMa)), linetype = 1, lwd = 0.5, col = 'gray60') +
geom_hline(aes(yintercept = (1 + tol) * mean(VecFraccMa)), linetype = 2, lwd = 0.5, col = 'gray60') +
#geom_hline(aes(yintercept = 1.001 * mean(VecFraccMa)), linetype = 4, lwd = 0.5, col = 'red1') +
geom_point(aes(y = VecFraccMa, color = VecFechas0)) +
geom_errorbar(aes(ymin = VecFraccMa - VecFracUnc, ymax = VecFraccMa + VecFracUnc, color = VecFechas0), width = 0.4)
#browser()
print(p)
p <- ggplot(data = DataCleanDF(), aes(x = index)) + theme_bw() +
labs(y = ylab, x = NULL) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
axis.text.y = element_text(color = "black"),
#axis.ticks.x = element_blank(),
axis.text.x = element_blank(), legend.title = element_blank()) +
scale_y_continuous(expand = c(0.4, 0), n.breaks = 8) +
#geom_hline(aes(yintercept = 0.999 * mean(VecFraccMa)), linetype = 4, lwd = 0.5, col = 'red1') +
geom_hline(aes(yintercept = (1 - tol) * mean(VecFraccMa)), linetype = 2, lwd = 0.5, col = 'gray60') +
geom_hline(aes(yintercept = mean(VecFraccMa)), linetype = 1, lwd = 0.5, col = 'gray60') +
geom_hline(aes(yintercept = (1 + tol) * mean(VecFraccMa)), linetype = 2, lwd = 0.5, col = 'gray60') +
#geom_hline(aes(yintercept = 1.001 * mean(VecFraccMa)), linetype = 4, lwd = 0.5, col = 'red1') +
geom_point(aes(y = VecFraccMa, color = VecFechas0)) +
geom_errorbar(aes(ymin = VecFraccMa - VecFracUnc, ymax = VecFraccMa + VecFracUnc, color = VecFechas0), width = 0.4)
#browser()
print(p)
p <- ggplot(data = DataCleanDF(), aes(x = index)) + theme_bw() +
labs(y = ylab, x = NULL) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
axis.text.y = element_text(color = "black"),
#axis.ticks.x = element_blank(),
axis.text.x = element_blank(), legend.title = element_blank()) +
scale_y_continuous(expand = c(0.8, 0), n.breaks = 8) +
#geom_hline(aes(yintercept = 0.999 * mean(VecFraccMa)), linetype = 4, lwd = 0.5, col = 'red1') +
geom_hline(aes(yintercept = (1 - tol) * mean(VecFraccMa)), linetype = 2, lwd = 0.5, col = 'gray60') +
geom_hline(aes(yintercept = mean(VecFraccMa)), linetype = 1, lwd = 0.5, col = 'gray60') +
geom_hline(aes(yintercept = (1 + tol) * mean(VecFraccMa)), linetype = 2, lwd = 0.5, col = 'gray60') +
#geom_hline(aes(yintercept = 1.001 * mean(VecFraccMa)), linetype = 4, lwd = 0.5, col = 'red1') +
geom_point(aes(y = VecFraccMa, color = VecFechas0)) +
geom_errorbar(aes(ymin = VecFraccMa - VecFracUnc, ymax = VecFraccMa + VecFracUnc, color = VecFechas0), width = 0.4)
#browser()
print(p)
p <- ggplot(data = DataCleanDF(), aes(x = index)) + theme_bw() +
labs(y = ylab, x = NULL) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
axis.text.y = element_text(color = "black"),
#axis.ticks.x = element_blank(),
axis.text.x = element_blank(), legend.title = element_blank()) +
scale_y_continuous(expand = c(0.4, 0), n.breaks = 8) +
#geom_hline(aes(yintercept = 0.999 * mean(VecFraccMa)), linetype = 4, lwd = 0.5, col = 'red1') +
geom_hline(aes(yintercept = (1 - tol) * mean(VecFraccMa)), linetype = 2, lwd = 0.5, col = 'gray60') +
geom_hline(aes(yintercept = mean(VecFraccMa)), linetype = 1, lwd = 0.5, col = 'gray60') +
geom_hline(aes(yintercept = (1 + tol) * mean(VecFraccMa)), linetype = 2, lwd = 0.5, col = 'gray60') +
#geom_hline(aes(yintercept = 1.001 * mean(VecFraccMa)), linetype = 4, lwd = 0.5, col = 'red1') +
geom_point(aes(y = VecFraccMa, color = VecFechas0)) +
geom_errorbar(aes(ymin = VecFraccMa - VecFracUnc, ymax = VecFraccMa + VecFracUnc, color = VecFechas0), width = 0.4)
#browser()
print(p)
ylab <- paste('Fracción masica / ', DataCleanDF()$VecUnits[1])
tol <- 0.005
p <- ggplot(data = DataCleanDF(), aes(x = index)) + theme_bw() +
labs(y = ylab, x = NULL) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
axis.text.y = element_text(color = "black"),
#axis.ticks.x = element_blank(),
axis.text.x = element_blank(), legend.title = element_blank()) +
scale_y_continuous(expand = c(0.4, 0), n.breaks = 8) +
#geom_hline(aes(yintercept = 0.999 * mean(VecFraccMa)), linetype = 4, lwd = 0.5, col = 'red1') +
geom_hline(aes(yintercept = (1 - tol) * mean(VecFraccMa)), linetype = 2, lwd = 0.5, col = 'gray60') +
geom_hline(aes(yintercept = mean(VecFraccMa)), linetype = 1, lwd = 0.5, col = 'gray60') +
geom_hline(aes(yintercept = (1 + tol) * mean(VecFraccMa)), linetype = 2, lwd = 0.5, col = 'gray60') +
#geom_hline(aes(yintercept = 1.001 * mean(VecFraccMa)), linetype = 4, lwd = 0.5, col = 'red1') +
geom_point(aes(y = VecFraccMa, color = VecFechas0)) +
geom_errorbar(aes(ymin = VecFraccMa - VecFracUnc, ymax = VecFraccMa + VecFracUnc, color = VecFechas0), width = 0.4)
#browser()
print(p)
x <- list()
unique((DataCleanDF()$VecFechas0))
unique((DataCleanDF()$VecFechas0)) -> i
j <- i
j
DayRes <- which(DataCleanDF()$VecFechas0 == j)
DayRes
datFram <- data.frame(Archivo = row.names(DataCleanDF())[DayRes],
Resultado = DataCleanDF()$VecFraccMa[DayRes],
'.' = rep(unidad, length(DayRes)))
unidad <- DataCleanDF()$VecUnits[1]
DayRes <- which(DataCleanDF()$VecFechas0 == j)
datFram <- data.frame(Archivo = row.names(DataCleanDF())[DayRes],
Resultado = DataCleanDF()$VecFraccMa[DayRes],
'.' = rep(unidad, length(DayRes)))
datFram
nDat <- nrow(datFram)
temp <- box(title = tags$b(paste0('Resumen de resultados del ', j)), status = 'primary', collapsible = TRUE, collapsed = FALSE,
column(5, #renderTable(isolate(datFram), digits = 3),
tags$h4('Promedio del día:', tags$b(round(mean(datFram$Resultado), 3), unidad), tags$br(),
'Desviación estándar relativa del día:', tags$b(round(sd(datFram$Resultado)/mean(datFram$Resultado)*100, 3), '%'))),
column(7, tags$h4('Valor p prueba de normalidad de Shapiro-Wilk:',
tags$b(tryCatch(signif(shapiro.test(datFram$Resultado)$p.value, 3),
error = function(e) 'No se puede calcular para menos de tres datos')),
tags$br(),
'Valores p de las pruebas de datos anómalos de Grubbs:', tags$br(),
tryCatch(
tags$h4('  · ', tags$b(signif(grubbs.test(datFram$Resultado, type = 10)$p.value, 3)),
' para el valor más ',
ifelse(word(grubbs.test(datFram$Resultado, type = 10)$alternative, 1) == 'highest', 'alto.', 'bajo.')),
error = function(e) 'No se puede calcular para menos de tres datos'),
tryCatch(
tags$h4('  · ', tags$b(signif(grubbs.test(datFram$Resultado, type = 11)$p.value, 3)),
' para un valor a cada extremo.', tags$br(),
'  · ', tags$b(signif(grubbs.test(datFram$Resultado, type = 20)$p.value, 3)),
' para los dos valores más ',
ifelse(word(grubbs.test(datFram$Resultado, type = 10)$alternative, 1) == 'highest', 'altos.', 'bajos.')),
error = function(e) ''))
))
temp
x <- c(x, temp)
for (i in unique((DataCleanDF()$VecFechas0))) {
j <- i
DayRes <- which(DataCleanDF()$VecFechas0 == j)
datFram <- data.frame(Archivo = row.names(DataCleanDF())[DayRes],
Resultado = DataCleanDF()$VecFraccMa[DayRes],
'.' = rep(unidad, length(DayRes)))
nDat <- nrow(datFram)
temp <- box(title = tags$b(paste0('Resumen de resultados del ', j)), status = 'primary', collapsible = TRUE, collapsed = FALSE,
column(5, #renderTable(isolate(datFram), digits = 3),
tags$h4('Promedio del día:', tags$b(round(mean(datFram$Resultado), 3), unidad), tags$br(),
'Desviación estándar relativa del día:', tags$b(round(sd(datFram$Resultado)/mean(datFram$Resultado)*100, 3), '%'))),
column(7, tags$h4('Valor p prueba de normalidad de Shapiro-Wilk:',
tags$b(tryCatch(signif(shapiro.test(datFram$Resultado)$p.value, 3),
error = function(e) 'No se puede calcular para menos de tres datos')),
tags$br(),
'Valores p de las pruebas de datos anómalos de Grubbs:', tags$br(),
tryCatch(
tags$h4('  · ', tags$b(signif(grubbs.test(datFram$Resultado, type = 10)$p.value, 3)),
' para el valor más ',
ifelse(word(grubbs.test(datFram$Resultado, type = 10)$alternative, 1) == 'highest', 'alto.', 'bajo.')),
error = function(e) 'No se puede calcular para menos de tres datos'),
tryCatch(
tags$h4('  · ', tags$b(signif(grubbs.test(datFram$Resultado, type = 11)$p.value, 3)),
' para un valor a cada extremo.', tags$br(),
'  · ', tags$b(signif(grubbs.test(datFram$Resultado, type = 20)$p.value, 3)),
' para los dos valores más ',
ifelse(word(grubbs.test(datFram$Resultado, type = 10)$alternative, 1) == 'highest', 'altos.', 'bajos.')),
error = function(e) ''))
))
x <- c(x, temp)
}
runApp()
runApp()
runApp()
runApp()
x <- list()
unidad <- DataCleanDF()$VecUnits[1]
unidad
unique((DataCleanDF()$VecFechas0))
unique((DataCleanDF()$VecFechas0))->i
j <- i
DayRes <- which(DataCleanDF()$VecFechas0 == j)
datFram <- data.frame(Archivo = row.names(DataCleanDF())[DayRes],
Resultado = DataCleanDF()$VecFraccMa[DayRes],
'.' = rep(unidad, length(DayRes)))
nDat <- nrow(datFram)
temp <- box(title = tags$b(paste0('Resumen de resultados del día', j)), status = 'primary', collapsible = TRUE, collapsed = FALSE,
column(5, #renderTable(isolate(datFram), digits = 3),
'Promedio:', tags$b(round(mean(datFram$Resultado), 3), unidad), tags$br(),
'Desviación estándar relativa:', tags$b(round(sd(datFram$Resultado)/mean(datFram$Resultado)*100, 3), '%')),
column(7, 'Normalidad de los datos (Valor p prueba de Shapiro-Wilk):',
tags$b(tryCatch(signif(shapiro.test(datFram$Resultado)$p.value, 3),
error = function(e) 'No disponible para menos de tres datos')),
tags$br(),
'Ausencia de datos anómalos (Valores p pruebas de Grubbs):', tags$br(),
tryCatch(
'  · ', tags$b(signif(grubbs.test(datFram$Resultado, type = 10)$p.value, 3)),
' para el valor más ',
ifelse(word(grubbs.test(datFram$Resultado, type = 10)$alternative, 1) == 'highest', 'alto.', 'bajo.'),
error = function(e) 'No disponible para menos de tres datos'),
tryCatch(
'  · ', tags$b(signif(grubbs.test(datFram$Resultado, type = 11)$p.value, 3)),
' para un valor a cada extremo.', tags$br(),
'  · ', tags$b(signif(grubbs.test(datFram$Resultado, type = 20)$p.value, 3)),
' para los dos valores más ',
ifelse(word(grubbs.test(datFram$Resultado, type = 10)$alternative, 1) == 'highest', 'altos.', 'bajos.'),
error = function(e) '')
))
column(5, #renderTable(isolate(datFram), digits = 3),
'Promedio:', tags$b(round(mean(datFram$Resultado), 3), unidad), tags$br(),
'Desviación estándar relativa:', tags$b(round(sd(datFram$Resultado)/mean(datFram$Resultado)*100, 3), '%'))
shapiro.test(datFram$Resultado)$p.value
tags$b(tryCatch(signif(shapiro.test(datFram$Resultado)$p.value, 3),
error = function(e) 'No disponible para menos de tres datos'))
tags$b(signif(grubbs.test(datFram$Resultado, type = 10)$p.value, 3))
grubbs.test(datFram$Resultado, type = 10)$alternative, 1)
grubbs.test(datFram$Resultado, type = 10)$alternative
ifelse(word(grubbs.test(datFram$Resultado, type = 10)$alternative, 1) == 'highest', 'alto.', 'bajo.')
tags$b(signif(grubbs.test(datFram$Resultado, type = 11)$p.value, 3))
tags$b(signif(grubbs.test(datFram$Resultado, type = 20)$p.value, 3))
grubbs.test(datFram$Resultado, type = 20)
datFram$Resultado
tryCatch(
'  · ', tags$b(signif(grubbs.test(datFram$Resultado, type = 11)$p.value, 3)),
' para un valor a cada extremo.', tags$br(),
'  · ', tags$b(signif(grubbs.test(datFram$Resultado, type = 20)$p.value, 3)),
' para los dos valores más ',
ifelse(word(grubbs.test(datFram$Resultado, type = 10)$alternative, 1) == 'highest', 'altos.', 'bajos.')
)
signif(grubbs.test(datFram$Resultado, type = 10)
signif(grubbs.test(datFram$Resultado, type = 10)$p.value, 3)
signif(grubbs.test(datFram$Resultado, type = 10)$p.value, 3)
signif(grubbs.test(datFram$Resultado, type = 11)$p.value, 3)
signif(grubbs.test(datFram$Resultado, type = 20)$p.value, 3)
datFram$Resultado
length(datFram$Resultado)
runApp()
signif(grubbs.test(datFram$Resultado, type = 11)$p.value, 3)
x <- list()
unidad <- DataCleanDF()$VecUnits[1]
i = unique((DataCleanDF()$VecFechas0))
j <- i
DayRes <- which(DataCleanDF()$VecFechas0 == j)
datFram <- data.frame(Archivo = row.names(DataCleanDF())[DayRes],
Resultado = DataCleanDF()$VecFraccMa[DayRes],
'.' = rep(unidad, length(DayRes)))
nDat <- nrow(datFram)
'Promedio:', tags$b(signif(mean(datFram$Resultado), 7), unidad), tags$br(),
tags$b(tryCatch(signif(shapiro.test(datFram$Resultado)$p.value, 3),
error = function(e) 'No disponible para menos de tres datos'))
tryCatch(
'  · ', tags$b(signif(grubbs.test(datFram$Resultado, type = 10)$p.value, 3))
tryCatch(
'  · ', tags$b(signif(grubbs.test(datFram$Resultado, type = 10)$p.value, 3)),
' para el valor más ',
ifelse(word(grubbs.test(datFram$Resultado, type = 10)$alternative, 1) == 'highest', 'alto.', 'bajo.'),
error = function(e) 'No disponible para menos de tres datos')
tryCatch(
tags$span(
'  · ', tags$b(signif(grubbs.test(datFram$Resultado, type = 10)$p.value, 3)),
' para el valor más ',
ifelse(word(grubbs.test(datFram$Resultado, type = 10)$alternative, 1) == 'highest', 'alto.', 'bajo.')),
error = function(e) 'No disponible para menos de tres datos')
x <- tagList()
x
x <- (x, tags$div())
x <- c(x, tags$div())
x <- tagList()
str(x)
x <- c(x, tags$div())
str(x)
x <- c(x, tags$div())
x
runApp()
runApp()
lapply(paste0("rb_", 1:10), function(x){radioButtons(inputId = x, label = x, choices = c("A", "B"))})
runApp()
pred <- function(p, conf.lev = 0.95) {
if (p < 1 - conf.lev) return(tags$p(style = 'color:red;', p)) else return(p)
}
pred(0.05)
pred(0.051)
runApp()
runApp()
DataCleanDF()
runApp()
runApp()
runApp()
runApp()
runApp()
sapply(PartialTitrationResults$results, function (x) {
return(xml_text(xml_child(x(), search = 'mr:coreData/mr:respPerson/name')))})
sapply(PartialTitrationResults$results, function (x) {
return(xml_text(xml_child(x(), search = 'mr:coreData/mr:respPerson')))})
sapply(PartialTitrationResults$results, function (x) {
return(xml_child(x(), search = 'mr:coreData/mr:respPerson')))}
sapply(PartialTitrationResults$results, function (x) {
return(xml_child(x(), search = 'mr:coreData/mr:respPerson'))
sapply(PartialTitrationResults$results, function (x) {
return(xml_child(x(), search = 'mr:coreData/mr:respPerson')))
sapply(PartialTitrationResults$results, function (x) {
return(xml_child(x(), search = 'mr:coreData/mr:respPerson')))
sapply(PartialTitrationResults$results, function (x) {
return(xml_child(x(), search = 'mr:coreData/mr:respPerson'))})
sapply(PartialTitrationResults$results, function (x) {
return(xml_child(x(), search = 'mr:coreData'))})
xml_child(PartialTitrationResults$results[[1]](), search = 'mr:coreData'))
xml_child(PartialTitrationResults$results[[1]](), search = 'mr:coreData')
sapply(PartialTitrationResults$results, function (x) {
return(xml_text(xml_child(x(), search = 'mr:coreData/respPerson')))})
sapply(PartialTitrationResults$results, function (x) {
return(xml_text(xml_child(x(), search = 'mr:coreData/respPerson/name')))})
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
setwd("~/titulaR")
data_Analista2 <- list(
'name' = 'Analista',
'email' = 'contacto@inm.gov.co',
'orcid' = 'https://orcid.org/')
Analista2 <- read_xml('<respPerson/>')
addDataToMRXML(Analista2, fields = data_Analista2)#, node = 'data')
# addDataToMRXML(xmlObject = Analista2, fields = inst_Analista2, node = 'inst')
message(Analista2)
write_xml(Analista2, 'www/Personal/Analista.xml')
data_Analista <- list(
'name' = 'Analista',
'email' = 'contacto@inm.gov.co',
'orcid' = 'https://orcid.org/')
Analista <- read_xml('<respPerson/>')
addDataToMRXML(Analista, fields = data_Analista)#, node = 'data')
# addDataToMRXML(xmlObject = Analista2, fields = inst_Analista2, node = 'inst')
message(Analista)
write_xml(Analista, 'www/Personal/Analista.xml')
runApp()
runApp()
authPersons[[input$Analista]]
input$Analista
names(authPersons)
authPersons
## Personal
files <- gsub('', '', list.files(path = 'www/Personal/', pattern = 'xml', full.names = TRUE))
files
authPersons <- lapply(files, function (x) read_xml(x))
authPersons
files
data_Analista <- list(
'name' = 'Analista',
'email' = 'contacto@inm.gov.co',
'orcid' = 'https://orcid.org/')
Analista <- read_xml('<respPerson/>')
addDataToMRXML(Analista, fields = data_Analista)#, node = 'data')
# addDataToMRXML(xmlObject = Analista2, fields = inst_Analista2, node = 'inst')
message(Analista)
write_xml(Analista, 'www/Personal/Analista.xml')
authPersons
## Personal
files <- gsub('', '', list.files(path = 'www/Personal/', pattern = 'xml', full.names = TRUE))
files
authPersons <- lapply(files, function (x) read_xml(x))
authPersons
names(authPersons) <- sapply(authPersons, function (x) as_list(x)$respPerson$name)
sapply(authPersons, function (x) as_list(x)$respPerson$name)
sapply(authPersons, function (x) xml_text(xml_child(x, search = './/name')))
sapply(authPersons, function (x) as_list(x)$respPerson$name)
names(authPersons)
runApp()
factorDilucion
factorDilucion)
factorDilucion)()
factorDilucion()
f_dil <- GetValueEstandUncert(factorDilucion())
f_dil
d1 <- decimals(signif(f_dil$ValUnc[2], 3))
d1
f_dil$ValUnc[2]
signif(f_dil$ValUnc[2], 3)
decimals(signif(f_dil$ValUnc[2], 3))
signif(f_dil$ValUnc[2], 3)
round(f_dil$ValUnc[1], d1)
Substances[[reagForm]]
Substances
input$Elemento
Substances[[input$Elemento]]
MolarMass
MolarMass()
GetValueEstandUncert(MolarMass())
decimals(signif(f_dil$m_mas[2], 3))
m_mas <- GetValueEstandUncert(MolarMass())
d2 <- decimals(signif(f_dil$m_mas[2], 3))
m_mas
d2 <- decimals(signif(m_mas$ValUnc[2], 3))
d2
runApp()
f_dil <- GetValueEstandUncert(factorDilucion())
f_dil
d1 <- decimals(signif(f_dil$ValUnc[2], 3))
m_mas <- GetValueEstandUncert(MolarMass())
d2 <- decimals(signif(m_mas$ValUnc[2], 3))
Substances[[input$Elemento]]
runApp()
runApp()
tags$tr(
tags$th('Peso atómico:'),
tags$th(round(m_mas$ValUnc[1], d2), '\u00B1', signif(m_mas$ValUnc[2], 3), ' g/mol (k=1)')
)
f_dil <- GetValueEstandUncert(factorDilucion())
d1 <- decimals(signif(f_dil$ValUnc[2], 3))
m_mas <- GetValueEstandUncert(MolarMass())
d2 <- decimals(signif(m_mas$ValUnc[2], 3))
tags$tr(
tags$th(style = 'vertical-align:top;padding-top:0.5em;', 'Elemento:'),
tags$th(style = 'vertical-align:top;padding-top:0.5em;',
Substances[[input$Elemento]]$`mr:name`, tags$br(),
'InChi Key ', Substances[[input$Elemento]]$`mr:InChiKey`, tags$br(),
tags$a(href = paste0('https://pubchem.ncbi.nlm.nih.gov/#query=', Substances[[input$Elemento]]$`mr:InChiKey`),
style = 'color:#0072bd;',
tags$html('Ver elemento en', img(src = "PubChem.png", height = '19px')), target = '_blank'))
)
tags$th(style = 'vertical-align:top;padding-top:0.5em;', 'Elemento:')
Substances[[input$Elemento]]$`mr:InChiKey`
Substances[[input$Elemento]]
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
StanDisol()
solution <- StanDisol
solution()
xml_children(solution())
xml_children(solution())[2]
xml_children(xml_children(solution())[2])[2]
xml_child(solution(), search = 'mr:property')
xml_child(solution(), search = 'mr:property')[2]
xml_child(solution(), search = 'mr:property')[[2]]
xml_child(solution(), search = 'mr:property')[2]
xml_child(solution(), search = 'mr:property//si')
xml_child(solution(), search = 'mr:property//si:real')
GetValueEstandUncert(xml_child(solution(), search = 'mr:property//si:real'))
solution <- SampDisol
solution()
xml_child(solution(), search = 'mr:property')
GetValueEstandUncert(SampDisol(),  property = 'MolarMass', node = 'mr:property')
runApp()
runApp()
runApp()
runApp()
initiateTitrationXML()
xmlObject <- initiateResultsXML()
xmlObject
##### Resultados generales
initiateResultsXML <- function(name) {
xmlObject <- read_xml(genericHeading('mr:combinedResults', TRUE))
xmlObject %>% {xml_add_child(., 'mr:coreData'); xml_add_child(., 'mr:titrationResult'); xml_add_child(., 'mr:additionalInfo')}
return(xmlObject)
}
XmlCargados
XmlCargados[1]
Q
runApp()
runApp()
runApp()
