error = function(e) 'No disponible para menos de tres datos'))
tags$b(signif(grubbs.test(datFram$Resultado, type = 10)$p.value, 3))
grubbs.test(datFram$Resultado, type = 10)$alternative, 1)
grubbs.test(datFram$Resultado, type = 10)$alternative
ifelse(word(grubbs.test(datFram$Resultado, type = 10)$alternative, 1) == 'highest', 'alto.', 'bajo.')
tags$b(signif(grubbs.test(datFram$Resultado, type = 11)$p.value, 3))
tags$b(signif(grubbs.test(datFram$Resultado, type = 20)$p.value, 3))
grubbs.test(datFram$Resultado, type = 20)
datFram$Resultado
tryCatch(
'  · ', tags$b(signif(grubbs.test(datFram$Resultado, type = 11)$p.value, 3)),
' para un valor a cada extremo.', tags$br(),
'  · ', tags$b(signif(grubbs.test(datFram$Resultado, type = 20)$p.value, 3)),
' para los dos valores más ',
ifelse(word(grubbs.test(datFram$Resultado, type = 10)$alternative, 1) == 'highest', 'altos.', 'bajos.')
)
signif(grubbs.test(datFram$Resultado, type = 10)
signif(grubbs.test(datFram$Resultado, type = 10)$p.value, 3)
signif(grubbs.test(datFram$Resultado, type = 10)$p.value, 3)
signif(grubbs.test(datFram$Resultado, type = 11)$p.value, 3)
signif(grubbs.test(datFram$Resultado, type = 20)$p.value, 3)
datFram$Resultado
length(datFram$Resultado)
runApp()
signif(grubbs.test(datFram$Resultado, type = 11)$p.value, 3)
x <- list()
unidad <- DataCleanDF()$VecUnits[1]
i = unique((DataCleanDF()$VecFechas0))
j <- i
DayRes <- which(DataCleanDF()$VecFechas0 == j)
datFram <- data.frame(Archivo = row.names(DataCleanDF())[DayRes],
Resultado = DataCleanDF()$VecFraccMa[DayRes],
'.' = rep(unidad, length(DayRes)))
nDat <- nrow(datFram)
'Promedio:', tags$b(signif(mean(datFram$Resultado), 7), unidad), tags$br(),
tags$b(tryCatch(signif(shapiro.test(datFram$Resultado)$p.value, 3),
error = function(e) 'No disponible para menos de tres datos'))
tryCatch(
'  · ', tags$b(signif(grubbs.test(datFram$Resultado, type = 10)$p.value, 3))
tryCatch(
'  · ', tags$b(signif(grubbs.test(datFram$Resultado, type = 10)$p.value, 3)),
' para el valor más ',
ifelse(word(grubbs.test(datFram$Resultado, type = 10)$alternative, 1) == 'highest', 'alto.', 'bajo.'),
error = function(e) 'No disponible para menos de tres datos')
tryCatch(
tags$span(
'  · ', tags$b(signif(grubbs.test(datFram$Resultado, type = 10)$p.value, 3)),
' para el valor más ',
ifelse(word(grubbs.test(datFram$Resultado, type = 10)$alternative, 1) == 'highest', 'alto.', 'bajo.')),
error = function(e) 'No disponible para menos de tres datos')
x <- tagList()
x
x <- (x, tags$div())
x <- c(x, tags$div())
x <- tagList()
str(x)
x <- c(x, tags$div())
str(x)
x <- c(x, tags$div())
x
runApp()
runApp()
lapply(paste0("rb_", 1:10), function(x){radioButtons(inputId = x, label = x, choices = c("A", "B"))})
runApp()
pred <- function(p, conf.lev = 0.95) {
if (p < 1 - conf.lev) return(tags$p(style = 'color:red;', p)) else return(p)
}
pred(0.05)
pred(0.051)
runApp()
runApp()
DataCleanDF()
runApp()
runApp()
runApp()
runApp()
runApp()
sapply(PartialTitrationResults$results, function (x) {
return(xml_text(xml_child(x(), search = 'mr:coreData/mr:respPerson/name')))})
sapply(PartialTitrationResults$results, function (x) {
return(xml_text(xml_child(x(), search = 'mr:coreData/mr:respPerson')))})
sapply(PartialTitrationResults$results, function (x) {
return(xml_child(x(), search = 'mr:coreData/mr:respPerson')))}
sapply(PartialTitrationResults$results, function (x) {
return(xml_child(x(), search = 'mr:coreData/mr:respPerson'))
sapply(PartialTitrationResults$results, function (x) {
return(xml_child(x(), search = 'mr:coreData/mr:respPerson')))
sapply(PartialTitrationResults$results, function (x) {
return(xml_child(x(), search = 'mr:coreData/mr:respPerson')))
sapply(PartialTitrationResults$results, function (x) {
return(xml_child(x(), search = 'mr:coreData/mr:respPerson'))})
sapply(PartialTitrationResults$results, function (x) {
return(xml_child(x(), search = 'mr:coreData'))})
xml_child(PartialTitrationResults$results[[1]](), search = 'mr:coreData'))
xml_child(PartialTitrationResults$results[[1]](), search = 'mr:coreData')
sapply(PartialTitrationResults$results, function (x) {
return(xml_text(xml_child(x(), search = 'mr:coreData/respPerson')))})
sapply(PartialTitrationResults$results, function (x) {
return(xml_text(xml_child(x(), search = 'mr:coreData/respPerson/name')))})
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
setwd("~/titulaR")
data_Analista2 <- list(
'name' = 'Analista',
'email' = 'contacto@inm.gov.co',
'orcid' = 'https://orcid.org/')
Analista2 <- read_xml('<respPerson/>')
addDataToMRXML(Analista2, fields = data_Analista2)#, node = 'data')
# addDataToMRXML(xmlObject = Analista2, fields = inst_Analista2, node = 'inst')
message(Analista2)
write_xml(Analista2, 'www/Personal/Analista.xml')
data_Analista <- list(
'name' = 'Analista',
'email' = 'contacto@inm.gov.co',
'orcid' = 'https://orcid.org/')
Analista <- read_xml('<respPerson/>')
addDataToMRXML(Analista, fields = data_Analista)#, node = 'data')
# addDataToMRXML(xmlObject = Analista2, fields = inst_Analista2, node = 'inst')
message(Analista)
write_xml(Analista, 'www/Personal/Analista.xml')
runApp()
runApp()
authPersons[[input$Analista]]
input$Analista
names(authPersons)
authPersons
## Personal
files <- gsub('', '', list.files(path = 'www/Personal/', pattern = 'xml', full.names = TRUE))
files
authPersons <- lapply(files, function (x) read_xml(x))
authPersons
files
data_Analista <- list(
'name' = 'Analista',
'email' = 'contacto@inm.gov.co',
'orcid' = 'https://orcid.org/')
Analista <- read_xml('<respPerson/>')
addDataToMRXML(Analista, fields = data_Analista)#, node = 'data')
# addDataToMRXML(xmlObject = Analista2, fields = inst_Analista2, node = 'inst')
message(Analista)
write_xml(Analista, 'www/Personal/Analista.xml')
authPersons
## Personal
files <- gsub('', '', list.files(path = 'www/Personal/', pattern = 'xml', full.names = TRUE))
files
authPersons <- lapply(files, function (x) read_xml(x))
authPersons
names(authPersons) <- sapply(authPersons, function (x) as_list(x)$respPerson$name)
sapply(authPersons, function (x) as_list(x)$respPerson$name)
sapply(authPersons, function (x) xml_text(xml_child(x, search = './/name')))
sapply(authPersons, function (x) as_list(x)$respPerson$name)
names(authPersons)
runApp()
factorDilucion
factorDilucion)
factorDilucion)()
factorDilucion()
f_dil <- GetValueEstandUncert(factorDilucion())
f_dil
d1 <- decimals(signif(f_dil$ValUnc[2], 3))
d1
f_dil$ValUnc[2]
signif(f_dil$ValUnc[2], 3)
decimals(signif(f_dil$ValUnc[2], 3))
signif(f_dil$ValUnc[2], 3)
round(f_dil$ValUnc[1], d1)
Substances[[reagForm]]
Substances
input$Elemento
Substances[[input$Elemento]]
MolarMass
MolarMass()
GetValueEstandUncert(MolarMass())
decimals(signif(f_dil$m_mas[2], 3))
m_mas <- GetValueEstandUncert(MolarMass())
d2 <- decimals(signif(f_dil$m_mas[2], 3))
m_mas
d2 <- decimals(signif(m_mas$ValUnc[2], 3))
d2
runApp()
f_dil <- GetValueEstandUncert(factorDilucion())
f_dil
d1 <- decimals(signif(f_dil$ValUnc[2], 3))
m_mas <- GetValueEstandUncert(MolarMass())
d2 <- decimals(signif(m_mas$ValUnc[2], 3))
Substances[[input$Elemento]]
runApp()
runApp()
tags$tr(
tags$th('Peso atómico:'),
tags$th(round(m_mas$ValUnc[1], d2), '\u00B1', signif(m_mas$ValUnc[2], 3), ' g/mol (k=1)')
)
f_dil <- GetValueEstandUncert(factorDilucion())
d1 <- decimals(signif(f_dil$ValUnc[2], 3))
m_mas <- GetValueEstandUncert(MolarMass())
d2 <- decimals(signif(m_mas$ValUnc[2], 3))
tags$tr(
tags$th(style = 'vertical-align:top;padding-top:0.5em;', 'Elemento:'),
tags$th(style = 'vertical-align:top;padding-top:0.5em;',
Substances[[input$Elemento]]$`mr:name`, tags$br(),
'InChi Key ', Substances[[input$Elemento]]$`mr:InChiKey`, tags$br(),
tags$a(href = paste0('https://pubchem.ncbi.nlm.nih.gov/#query=', Substances[[input$Elemento]]$`mr:InChiKey`),
style = 'color:#0072bd;',
tags$html('Ver elemento en', img(src = "PubChem.png", height = '19px')), target = '_blank'))
)
tags$th(style = 'vertical-align:top;padding-top:0.5em;', 'Elemento:')
Substances[[input$Elemento]]$`mr:InChiKey`
Substances[[input$Elemento]]
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
StanDisol()
solution <- StanDisol
solution()
xml_children(solution())
xml_children(solution())[2]
xml_children(xml_children(solution())[2])[2]
xml_child(solution(), search = 'mr:property')
xml_child(solution(), search = 'mr:property')[2]
xml_child(solution(), search = 'mr:property')[[2]]
xml_child(solution(), search = 'mr:property')[2]
xml_child(solution(), search = 'mr:property//si')
xml_child(solution(), search = 'mr:property//si:real')
GetValueEstandUncert(xml_child(solution(), search = 'mr:property//si:real'))
solution <- SampDisol
solution()
xml_child(solution(), search = 'mr:property')
GetValueEstandUncert(SampDisol(),  property = 'MolarMass', node = 'mr:property')
runApp()
runApp()
runApp()
runApp()
initiateTitrationXML()
xmlObject <- initiateResultsXML()
xmlObject
##### Resultados generales
initiateResultsXML <- function(name) {
xmlObject <- read_xml(genericHeading('mr:combinedResults', TRUE))
xmlObject %>% {xml_add_child(., 'mr:coreData'); xml_add_child(., 'mr:titrationResult'); xml_add_child(., 'mr:additionalInfo')}
return(xmlObject)
}
XmlCargados
XmlCargados[1]
Q
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
DisConcProp
DisConcProp()
input$buttonCalc
convMassMRC()
BuoyMRC()
MassFrMRC()$ValUnc
BuoyDis()
runApp()
initiateResultsXML()
xmlObject <- initiateResultsXML()
xmlObject
resultID()
sapply(files2Combine(), function (x) {
return(xml_text(xml_child(x(), search = 'mr:coreData/mr:resultID')))})
sapply(files2Combine(), function (x) {
return(xml_text(xml_child(x(), search = 'mr:coreData/mr:solutionSource')))})
unique(sapply(files2Combine(), function (x) {
return(xml_text(xml_child(x(), search = 'mr:coreData/mr:solutionSource')))}))
addDataToMRXML(
xmlObject, list('mr:sampleID' = unique(sapply(files2Combine(), function (x) {
return(xml_text(xml_child(x(), search = 'mr:coreData/mr:solutionSource')))}))),
node = 'mr:coreData')
xmlObject
SamplesID <- unique(sapply(files2Combine(), function (x) {
return(xml_text(xml_child(x(), search = 'mr:coreData/mr:solutionSource')))}))
SamplesIDs <- unique(sapply(files2Combine(), function (x) {
return(xml_text(xml_child(x(), search = 'mr:coreData/mr:solutionSource')))}))
SamplesIDs
paste0(LETTERS[1:5], collapse = ', '
)
SamplesIDs <- unique(sapply(files2Combine(), function (x) {
return(xml_text(xml_child(x(), search = 'mr:coreData/mr:solutionSource')))}))
if(length(SamplesIDs) > 1) SamplesIDs <- paste0(SamplesIDs, collapse = ', ')
xmlObject <- initiateResultsXML()
addDataToMRXML(xmlObject, list('mr:sampleID' = SamplesIDs), node = 'mr:coreData')
xmlObject
fecha()
iso8601(fecha = fecha())
sapply(files2Combine(), function (x) {
return(xml_child(x(), search = 'mr:coreData/mr:respPerson'))})
sapply(files2Combine(), function (x) {
return(xml_child(x(), search = 'mr:coreData//mr:respPerson'))})
files2Combine()
files2Combine()[[1]]
files2Combine()[[1]]()
xml_child(files2Combine()[[1]](), search = 'mr:coreData/mr:respPerson')
xml_child(files2Combine()[[1]](), search = 'mr:coreData')
sapply(files2Combine(), function (x) {
return(xml_child(x(), search = 'mr:coreData/respPerson'))})
xml_child(files2Combine()[[1]](), search = 'mr:coreData/respPerson')
(xml_child(files2Combine()[[1]](), search = 'mr:coreData/respPerson'))
sapply(files2Combine(), function (x) {
return(xml_child(x(), search = 'mr:coreData/respPerson'))})
(xml_child(files2Combine()[[1]](), search = 'mr:coreData/respPerson'))
(xml_child(files2Combine()[[1]](), search = 'mr:coreData/respPerson'))
xml_child(xmlObject, node = 'mr:coreData')
xml_child(xmlObject, search = 'mr:coreData')
xml_child(files2Combine()[[1]](), search = 'mr:coreData/respPerson')
xml_add_child(xml_child(xmlObject, search = 'mr:coreData'), xml_child(files2Combine()[[1]](), search = 'mr:coreData/respPerson'))
xmlObject
xml_child(xmlObject, search = 'mr:coreData')
RespPerson0 <- xml_child(files2Combine()[[1]](), search = 'mr:coreData/respPerson')
RespPerson0
xml_child(files2Combine()[[2]](), search = 'mr:coreData/respPerson')
RespPerson0 == xml_child(files2Combine()[[2]](), search = 'mr:coreData/respPerson')
xml_child(RespPerson0, search = 'name')
xml_text(xml_child(RespPerson0, search = 'orcid'))
xmlObject
##### Resultados generales
initiateResultsXML <- function(name) {
xmlObject <- read_xml(genericHeading('mr:combinedResults', TRUE))
xmlObject %>% {xml_add_child(., 'mr:coreData'); xml_add_child(., 'mr:measurementResult'); xml_add_child(., 'mr:additionalInfo')}
return(xmlObject)
}
SamplesIDs <- unique(sapply(files2Combine(), function (x) {
return(xml_text(xml_child(x(), search = 'mr:coreData/mr:solutionSource')))}))
if(length(SamplesIDs) > 1) SamplesIDs <- paste0(SamplesIDs, collapse = ', ')
xmlObject <- initiateResultsXML()
addDataToMRXML(xmlObject, list('mr:sampleID' = SamplesIDs), node = 'mr:coreData')
addDataToMRXML(xmlObject, list('mr:dateTime' = iso8601(fecha = fecha())), node = 'mr:coreData')
xml_add_child(xml_child(xmlObject, search = 'mr:coreData'), xml_child(files2Combine()[[1]](), search = 'mr:coreData/respPerson'))
VecFraccMa
files2Combine()[[1]]()
xml_child(files2Combine()[[1]](), search = 'mr:mr:titrationResult')
xml_child(files2Combine()[[1]](), search = 'mr:titrationResult')
xml_child(files2Combine()[[1]](), search = 'mr:titrationResult/mr:substance')
xml_child(xmlObject, search = 'mr:measurementResult') %>% {
xml_add_child(., .value = xml_child(files2Combine()[[1]](), search = 'mr:titrationResult/mr:substance'))
# xml_add_child(., .value = SiRealXML(
#   quantityTypeQUDT = 'MassFraction', value = ResParcUncSource()$prop[[1]], units = '\\milli\\gram\\kilo\\gram\\tothe{-1}',
#   uncert = ResParcUncSource()$prop[[3]], covFac = 1))
}
xmlObject
xml_child(files2Combine()[[1]](), search = 'mr:titrationResult//mr:substance')
xml_child(x(), search = 'mr:titrationResult/mr:substance)
)
)
xml_child(x(), search = 'mr:titrationResult/mr:substance')
xml_child(files2Combine()[[1]](), search = 'mr:titrationResult//si:real//si:unit')
xml_text(xml_child(files2Combine()[[1]](), search = 'mr:titrationResult//si:real//si:unit')))
xml_text(xml_child(files2Combine()[[1]](), search = 'mr:titrationResult//si:real//si:unit'))
# Combinaci'on de resultados
AverageValue  <- reactive(mean(DataCleanDF()$VecFraccMa))
IncertTipoB <- reactive(max(DataCleanDF()$VecFracUnc))
StandarDev  <- reactive(sd(DataCleanDF()$VecFraccMa))
n_ind       <- reactive(length(DataCleanDF()))
IncertTipoA <- reactive(StandarDev()/sqrt(n_ind()))
nu_A <- reactive(n_ind() - 1)
nu_A
IncertComb  <- reactive(sqrt(IncertTipoB()^2 + IncertTipoA()^2))
nu_eff <- reactive(IncertComb()^4/(IncertTipoB()^4/200 + IncertTipoA()^4/nu_A()))
nu_eff
nu_eff()
round(nu_eff())
nu_eff <- reactive(round(IncertComb()^4/(IncertTipoB()^4/200 + IncertTipoA()^4/nu_A())))
qt(p = 0.95, df = 200)
qt(p = 0.95, df = 200, lower.tail = FALSE)
qt(p = 0.975, df = 200, lower.tail = FALSE)
qt(p = 0.975, df = 500, lower.tail = FALSE)
qt(p = 0.975, df = 1000, lower.tail = FALSE)
round(IncertComb()^4/(IncertTipoB()^4/200 + IncertTipoA()^4/nu_A()))
round(IncertComb()^4/(IncertTipoB()^4/400 + IncertTipoA()^4/nu_A()))
round(IncertComb()^4/(IncertTipoB()^4/100 + IncertTipoA()^4/nu_A()))
qt(p = 0.975, df = 1000, lower.tail = FALSE)
roud(qt(p = 0.975, df = 1000, lower.tail = FALSE), 2)
round(qt(p = 0.975, df = 1000, lower.tail = FALSE), 2)
round(qt(p = 0.975, df = 17, lower.tail = FALSE), 2)
round(qt(p = 0.975, df = 17), 2)
runApp()
runApp()
resultadosCombi <- eventReactive(DataCleanDF(), {
d1 <- decimals(signif(IncertComb(), 3))
LevTest <- tryCatch(round(leveneTest(VecFraccMa ~ VecFechas0, data = DataCleanDF())$`Pr(>F)`[1], 4), error = function(e) 'no aplica')
return(data.frame('.' = c('Promedio de las mediciones', 'Incertidumbre tipo B', 'Desviacion estandar de las mediciones',
'Numero de datos', 'Dias de medicion', 'Incertidumbre tipo A', 'Incertidumbre combinada',
'Incertidumbre expandida', 'Factor de cobertura (95 %)', 'Grados de libertad', 'Homocedasticidad entre días'),
'Valor' = as.character(c(round(AverageValue(), d1), signif(c(IncertTipoB(), StandarDev()), 3),
length((DataCleanDF()$VecFechas0)),
length(unique(DataCleanDF()$VecFechas0)),
signif(c(IncertTipoA(), IncertComb(), IncertComb() * k_fact()), 3), k_fact(), nu_eff(),
LevTest)),
'Unidades' = c(rep(DataCleanDF()$VecUnits[1], 3), '', '\\day', rep(DataCleanDF()$VecUnits[1], 3),  '', '',
'(Valor p prueba de Levene)')))
})
resultadosCombi()
runApp()
nu_A()
IncertTipoA()^4/nu_A()
IncertComb()^4/(IncertTipoB()^4/200 + IncertTipoA()^4/nu_A())
IncertTipoB()
IncertTipoA()
IncertComb()
WelchSatter(ui = c(IncertTipoB(), IncertTipoA()), ci = c(1, 1))
WelchSatter(ui = c(IncertTipoB(), IncertTipoA()), ci = c(1, 1), df = c(200, 9))
WelchSatter
SamplesIDs <- unique(sapply(files2Combine(), function (x) {
return(xml_text(xml_child(x(), search = 'mr:coreData/mr:solutionSource')))}))
if(length(SamplesIDs) > 1) SamplesIDs <- paste0(SamplesIDs, collapse = ', ')
xmlObject <- initiateResultsXML()
addDataToMRXML(xmlObject, list('mr:sampleID' = SamplesIDs), node = 'mr:coreData')
addDataToMRXML(xmlObject, list('mr:dateTime' = iso8601(fecha = fecha())), node = 'mr:coreData')
xml_add_child(xml_child(xmlObject, search = 'mr:coreData'), xml_child(files2Combine()[[1]](), search = 'mr:coreData/respPerson'))
xml_child(xmlObject, search = 'mr:measurementResult') %>% {
xml_add_child(., .value = xml_child(files2Combine()[[1]](), search = 'mr:titrationResult//mr:substance'))
xml_add_child(., .value = SiRealXML(
quantityTypeQUDT = 'MassFraction', value = AverageValue(),
units = xml_text(xml_child(files2Combine()[[1]](), search = 'mr:titrationResult//si:real//si:unit'))),
uncert = IncertComb() * k_fact(), covFac = k_fact())
}
xmlObject
xml_child(xmlObject, search = 'mr:measurementResult') %>% {
xml_add_child(., .value = xml_child(files2Combine()[[1]](), search = 'mr:titrationResult//mr:substance'))
xml_add_child(., .value = SiRealXML(
quantityTypeQUDT = 'MassFraction', value = AverageValue(),
units = xml_text(xml_child(files2Combine()[[1]](), search = 'mr:titrationResult//si:real//si:unit'))),
uncert = IncertComb() * k_fact(), covFac = k_fact())
}
k_fact()
pnorm(1.97)
covFac = k_fact()
covFac
pnorm(covFac)
pnorm(-covFac)
round(pnorm(covFac) - pnorm(-covFac), 3)
xml_child(xmlObject, search = 'mr:measurementResult') %>% {
xml_add_child(., .value = xml_child(files2Combine()[[1]](), search = 'mr:titrationResult//mr:substance'))
xml_add_child(., .value = SiRealXML(
quantityTypeQUDT = 'MassFraction', value = AverageValue(),
units = xml_text(xml_child(files2Combine()[[1]](), search = 'mr:titrationResult//si:real//si:unit'))),
uncert = IncertComb() * k_fact(), covFac = k_fact())
}
xml_child(xmlObject, search = 'mr:measurementResult') %>% {
xml_add_child(., .value = xml_child(files2Combine()[[1]](), search = 'mr:titrationResult//mr:substance'))
xml_add_child(., .value = SiRealXML(
quantityTypeQUDT = 'MassFraction', value = AverageValue(),
units = xml_text(xml_child(files2Combine()[[1]](), search = 'mr:titrationResult//si:real//si:unit'))),
uncert = IncertComb() * k_fact(), covFac = k_fact(), covProp = 0.95, distribution = 't Student')
}
xml_add_child(., .value = SiRealXML(
quantityTypeQUDT = 'MassFraction', value = AverageValue(),
units = xml_text(xml_child(files2Combine()[[1]](), search = 'mr:titrationResult//si:real//si:unit')),
uncert = IncertComb() * k_fact(), covFac = k_fact(), distribution = 't Student'))
xml_child(xmlObject, search = 'mr:measurementResult') %>% {
xml_add_child(., .value = xml_child(files2Combine()[[1]](), search = 'mr:titrationResult//mr:substance'))
xml_add_child(., .value = SiRealXML(
quantityTypeQUDT = 'MassFraction', value = AverageValue(),
units = xml_text(xml_child(files2Combine()[[1]](), search = 'mr:titrationResult//si:real//si:unit')),
uncert = IncertComb() * k_fact(), covFac = k_fact(), distribution = 't Student'))
}
message(xmlObject)
xml_child(xmlObject, search = 'mr:additionalInfo') %>% {
xml_add_child(., .value = 'mr:individualResult') %>% {
sapply(files2Combine(), function (x) {
return(xml_add_child(., xml_child(x(), search = 'mr:coreData/mr:resultID')))})
}
}
xmlObject
message(xmlObject)
xml_child(xmlObject, search = 'mr:additionalInfo') %>% {
xml_add_child(., .value = 'mr:individualResult') %>% {
sapply(files2Combine(), function (x) {
xml_add_child(., xml_child(x(), search = 'mr:coreData/mr:resultID')) %>% {
xml_add_child(., .value = 'mr:titrationResult/si:real')}
return()})
}
}
message(xmlObject)
xml_child(xmlObject, search = 'mr:additionalInfo') %>% {
xml_add_child(., .value = 'mr:individualResult') %>% {
sapply(files2Combine(), function (x) {
xml_add_child(., xml_child(x(), search = 'mr:coreData/mr:resultID')) %>% {
xml_add_child(., xml_child(x(), search = 'mr:titrationResult/si:real'))}
return()})
}
}
message(xmlObject)
runApp()
AverageValue()
k_fact()
k_fact()
covFac = k_fact()
pnorm(covFac)
pnorm(-covFac)
round(pnorm(covFac) - pnorm(-covFac), 3)
runApp()
runApp()
XXX <- readRDS("C:/Users/Cris/Downloads/ResumenResultados_2024-04-01_14-17.rds")
XXX
runApp()
runApp()
