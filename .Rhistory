message(read_xml(genericHeading('mr:MRXML', TRUE)))
(genericHeading('mr:MRXML', TRUE)
)
(genericHeading('mr:MRXML', TRUE)
iso8601(fecha(), niceHTML = TRUE)
install.packages('XML')
XML::xmlCleanNamespaces()
airDensity
qnorm(1 - 0.05 / 2)
pnorm(qnorm(1 - 0.05 / 2))
pnorm(qnorm(1 - 0.05))
pnorm(1)
pnorm(2)
pnorm(1.96)
pnorm(1)
pnorm(0.5)
pnorm(0.75)
pnorm(1) - pnorm(-1)
pnorm(1.96) - pnorm(-1.96)
runApp()
rlang::last_trace()
runApp()
DensitAir
DensitAir()
Temp <- GetValueEstandUncert(Temperatura())
p <- GetValueEstandUncert(PressionBar())
h <- GetValueEstandUncert(HumedadRela())
h
unitsENV <- c(case_when(Temp$Units == '\\degreecelsius' ~ 'deg.C'),
case_when(p$Units == '\\hecto\\pascal' ~ 'hPa'),
case_when(h$Units == '\\percent' ~ '%'))
airDensity(Temp = Temp[[1]][1], p = p[[1]][1], h = h[[1]][1], unitsENV = unitsENV)
uncertAirDensity(model = 'CIMP2007', Temp = Temp[[1]][1], p = p[[1]][1], h = h[[1]][1],
u_Temp = Temp[[1]][2], u_p = p[[1]][2], u_h = u[[1]][2],
unitsENV = unitsENV, plot = FALSE, printRelSD = FALSE)
DensitAir <- SiRealXML(
quantityTypeQUDT = 'Density',
value = airDensity(Temp = Temp[[1]][1], p = p[[1]][1], h = h[[1]][1], unitsENV = unitsENV),
units = '\\gram\\centi\\meter\\tothe{}',
uncertAirDensity(model = 'CIMP2007', Temp = Temp[[1]][1], p = p[[1]][1], h = h[[1]][1],
u_Temp = Temp[[1]][2], u_p = p[[1]][2], u_h = h[[1]][2],
unitsENV = unitsENV, plot = FALSE, printRelSD = FALSE),
covFac = 1, covProp, distribution)
SiRealXML <- function(quantityTypeQUDT, value, units, uncert, covFac, covProp = NULL, distribution) {
if(missing(covProp)) covProp = pnorm(covFac) - pnorm(-covFac)
return(addDataToMRXML(
read_xml('<si:real xmlns:si="https://ptb.de/si" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>'),
list('si:quantityTypeQUDT' = quantityTypeQUDT, 'si:value' = value, 'si:unit' = units,
'si:expandedUnc' = list(
'si:uncertainty' = uncert, 'si:coverageFactor' = covFac,
'si:coverageProbability' = covProp, 'si:distribution' = distribution))))}
DensitAir <- SiRealXML(
quantityTypeQUDT = 'Density',
value = airDensity(Temp = Temp[[1]][1], p = p[[1]][1], h = h[[1]][1], unitsENV = unitsENV),
units = '\\gram\\centi\\meter\\tothe{}',
uncertAirDensity(model = 'CIMP2007', Temp = Temp[[1]][1], p = p[[1]][1], h = h[[1]][1],
u_Temp = Temp[[1]][2], u_p = p[[1]][2], u_h = h[[1]][2],
unitsENV = unitsENV, plot = FALSE, printRelSD = FALSE),
covFac = 1, covProp = NULL, distribution = normal)
DensitAir <- SiRealXML(
quantityTypeQUDT = 'Density',
value = airDensity(Temp = Temp[[1]][1], p = p[[1]][1], h = h[[1]][1], unitsENV = unitsENV),
units = '\\gram\\centi\\meter\\tothe{}',
uncertAirDensity(model = 'CIMP2007', Temp = Temp[[1]][1], p = p[[1]][1], h = h[[1]][1],
u_Temp = Temp[[1]][2], u_p = p[[1]][2], u_h = h[[1]][2],
unitsENV = unitsENV, plot = FALSE, printRelSD = FALSE),
covFac = 1, covProp = NULL, distribution = 'normal')
DensitAir <- SiRealXML(
quantityTypeQUDT = 'Density',
value = airDensity(Temp = Temp[[1]][1], p = p[[1]][1], h = h[[1]][1], unitsENV = unitsENV),
units = '\\gram\\centi\\meter\\tothe{}',
uncertAirDensity(model = 'CIMP2007', Temp = Temp[[1]][1], p = p[[1]][1], h = h[[1]][1],
u_Temp = Temp[[1]][2], u_p = p[[1]][2], u_h = h[[1]][2],
unitsENV = unitsENV, plot = FALSE, printRelSD = FALSE),
covFac = 1, distribution = 'normal')
DensitAir
DensitAir <- SiRealXML(
quantityTypeQUDT = 'Density',
value = airDensity(Temp = Temp[[1]][1], p = p[[1]][1], h = h[[1]][1], unitsENV = unitsENV),
units = '\\gram\\centi\\meter\\tothe{}',
uncert = signif(digits = 3, uncertAirDensity(model = 'CIMP2007', Temp = Temp[[1]][1], p = p[[1]][1], h = h[[1]][1],
u_Temp = Temp[[1]][2], u_p = p[[1]][2], u_h = h[[1]][2],
unitsENV = unitsENV, plot = FALSE, printRelSD = FALSE)),
covFac = 1, distribution = 'normal')
DensitAir
runApp()
source('Modules/00_IUPAC_InChi.R')
adminData_NIST_SRM_928 <- list(
'mr:name' = 'NIST SRM 928',
'mr:type' = 'certified',
'mr:producer' = list(
'inst:name' = c('National Institute of Standards and Technology', lang = 'EN'),
'inst:shortName' = 'NIST',
'inst:country' = 'US',
'inst:ror' = 'https://ror.org/05xpvk416',
'inst:url' = 'https://www.nist.gov/'),
'mr:validUntil' = '2025/12/02')
certiData_NIST_SRM_928 <- list(
certProp1 = list(
'mr:substance' = substances$PbNO3,
'mr:matrix' = 'High purity reagent',
'si:real' = list(
'si:quantityTypeQUDT' = 'MassFraction',
'si:value' = 1.0000,
'si:unit' = '\\gram\\gram\\tothe{-1}',
'si:expandedUnc' = list(
'si:uncertainty' = 0.0003,
'si:coverageFactor' = 2,
'si:coverageProbability' = 0.95))))
additData_NIST_SRM_928 <- list(
ionMassFraction = list(
'mr:substance' = substances$PbII,
'si:real' = list(
'si:quantityTypeQUDT' = 'MassFraction',
'si:value' = 207.209 / 331.219,
'si:unit' = '\\gram\\gram\\tothe{-1}',
'si:expandedUnc' = list(
'si:uncertainty' = 0.0003,
'si:coverageFactor' = 2,
'si:coverageProbability' = 0.95))),
ionMolarMass = list(
'mr:substance' = list(
'mr:name' = 'lead(2+)',
'mr:InChI' = c('1S/Pb/q+2', version = '1.0.6'),
'mr:InChiKey' = c('RVPVRDXYQKGNMQ-UHFFFAOYSA-N', version = '1.0.6')),
'si:real' = list(
'si:quantityTypeQUDT' = 'MolarMass',
'si:value' = 207.209,
'si:unit' = '\\gram\\mole\\tothe{-1}',
'si:expandedUnc' = list(
'si:uncertainty' = 0.005 * sqrt(3),
'si:coverageFactor' = sqrt(3),
'si:coverageProbability' = 0.95))),
saltDensity = list(
'si:real' = list(
'si:quantityTypeQUDT' = 'Density',
'si:value' = 4.53,
'si:unit' = '\\gram\\centi\\meter\\tothe{-3}',
'si:expandedUnc' = list(
'si:uncertainty' = 0.05 * sqrt(3),
'si:coverageFactor' = sqrt(3),
'si:coverageProbability' = 0.95))))
certiData_NIST_SRM_928 <- list(
certProp1 = list(
'mr:substance' = Substances$PbNO3,
'mr:matrix' = 'High purity reagent',
'si:real' = list(
'si:quantityTypeQUDT' = 'MassFraction',
'si:value' = 1.0000,
'si:unit' = '\\gram\\gram\\tothe{-1}',
'si:expandedUnc' = list(
'si:uncertainty' = 0.0003,
'si:coverageFactor' = 2,
'si:coverageProbability' = 0.95))))
additData_NIST_SRM_928 <- list(
ionMassFraction = list(
'mr:substance' = Substances$PbII,
'si:real' = list(
'si:quantityTypeQUDT' = 'MassFraction',
'si:value' = 207.209 / 331.219,
'si:unit' = '\\gram\\gram\\tothe{-1}',
'si:expandedUnc' = list(
'si:uncertainty' = 0.0003,
'si:coverageFactor' = 2,
'si:coverageProbability' = 0.95))),
ionMolarMass = list(
'mr:substance' = list(
'mr:name' = 'lead(2+)',
'mr:InChI' = c('1S/Pb/q+2', version = '1.0.6'),
'mr:InChiKey' = c('RVPVRDXYQKGNMQ-UHFFFAOYSA-N', version = '1.0.6')),
'si:real' = list(
'si:quantityTypeQUDT' = 'MolarMass',
'si:value' = 207.209,
'si:unit' = '\\gram\\mole\\tothe{-1}',
'si:expandedUnc' = list(
'si:uncertainty' = 0.005 * sqrt(3),
'si:coverageFactor' = sqrt(3),
'si:coverageProbability' = 0.95))),
saltDensity = list(
'si:real' = list(
'si:quantityTypeQUDT' = 'Density',
'si:value' = 4.53,
'si:unit' = '\\gram\\centi\\meter\\tothe{-3}',
'si:expandedUnc' = list(
'si:uncertainty' = 0.05 * sqrt(3),
'si:coverageFactor' = sqrt(3),
'si:coverageProbability' = 0.95))))
NIST_SRM_928 <- initiateMRXML('NIST_SRM_928')
Substances <- list(
EDTANa2.H2O = list(
'mr:name' = 'EDTA disodium salt dihydrate',
'mr:InChI' = c('1S/C10H16N2O8.2Na.2H2O/c13-7(14)3-11(4-8(15)16)1-2-12(5-9(17)18)6-10(19)20;;;;/h1-6H2,(H,13,14)(H,15,16)(H,17,18)(H,19,20);;;2*1H2', version = '1.0.6'),
'mr:InChiKey' = c('FXKZPKBFTQUJBA-UHFFFAOYSA-N', version = '1.0.6')),
PbNO3 = list(
'mr:name' = 'Lead nitrate',
'mr:InChI' = c('1S/2NO3.Pb/c2*2-1(3)4;/q2*-1;+2', version = '1.0.6'),
'mr:InChiKey' = c('RLJMLMKIBZAXJO-UHFFFAOYSA-N', version = '1.0.6')),
PbII = list(
'mr:name' = 'lead(2+)',
'mr:InChI' = c('1S/Pb/q+2', version = '1.0.6'),
'mr:InChiKey' = c('RVPVRDXYQKGNMQ-UHFFFAOYSA-N', version = '1.0.6'))
)
Substances
source("~/titulaR/D_SI_xml/mrRawData/MRC/UNIIM_GSO_2960_84.R")
source("~/titulaR/D_SI_xml/0_createMRXML.R")
source("~/titulaR/D_SI_xml/0_createMRXML.R")
source("~/titulaR/D_SI_xml/mrRawData/MRC/NIST_SRM_928.R")
source("~/titulaR/D_SI_xml/mrRawData/MRC/NIST_SRM_928.R")
source("~/titulaR/Modules/00_DigitalReferences.R")
source("~/titulaR/Modules/00_DigitalReferences.R")
source("~/titulaR/D_SI_xml/mrRawData/MRC/NIST_SRM_928.R")
source("~/titulaR/D_SI_xml/mrRawData/MRC/InHouse_GSO_2960_84.R")
source("~/titulaR/D_SI_xml/mrRawData/MRC/UNIIM_GSO_2960_84.R")
runApp()
source("~/titulaR/D_SI_xml/0_createMRXML.R")
runApp()
DensiDisol
DensiDisol()
DensiDisol <- SiRealInputServer('DensiDisol', devMode = devMode, quantityTypeQUDT = 'Density')
DensiDisol()
AmbiDensAire()
AmbientCondInfo
AmbientCondInfo()
ambientXML <- read_xml(genericHeading('mr:ambiente ID = "idAmbiente"'))
ambientXML
ambientXML %>% {
xml_add_child(., 'mr:airDensity', DensitAir)
xml_add_child(., 'mr:ambientConditions')
xml_add_child(., 'mr:timeISO8601', iso8601(fecha(), niceHTML = FALSE))}
ambientXML
ambientXML <- read_xml(genericHeading('mr:ambiente ID = "idAmbiente"'))
ambientXML %>% {
xml_add_child(., 'mr:airDensity', DensitAir())
xml_add_child(., 'mr:ambientConditions')
xml_add_child(., 'mr:timeISO8601', iso8601(fecha(), niceHTML = FALSE))}
ambientXML
DensitAir()
message(ambientXML)
DensitAir()
ambientXML <- read_xml(genericHeading('mr:ambiente ID = "idAmbiente"'))
ambientXML %>% {
xml_add_child(., 'mr:airDensity', DensitAir())
xml_add_child(., 'mr:ambientConditions')
xml_add_child(., 'mr:timeISO8601', iso8601(fecha(), niceHTML = FALSE))}
DensitAir()
message(ambientXML)
DensitAir
DensitAir()
read_xml(DensitAir())
xml_child(ambientXML, search = 'mr:ambientConditions')
DensitAir()
xml_child(ambientXML, search = 'mr:ambientConditions') <- DensitAir()
xml_child(ambientXML, search = 'mr:ambientConditions')
xml_replace(.x = xml_child(ambientXML, search = 'mr:ambientConditions'), .value = DensitAir())
ambientXML
message(ambientXML)
xml_children(DensitAir())
xml_replace(.x = xml_child(ambientXML, search = 'mr:ambientConditions'), .value = xml_children(DensitAir()))
ambientXML <- read_xml(genericHeading('mr:ambiente ID = "idAmbiente"'))
ambientXML <- read_xml(genericHeading('mr:ambiente ID = "idAmbiente"'))
ambientXML %>% {
xml_add_child(., 'mr:airDensity')
xml_add_child(., 'mr:ambientConditions', xml_children(DensitAir()))
xml_add_child(., 'mr:timeISO8601', iso8601(fecha(), niceHTML = FALSE))}
ambientXML
Temperatura()
DensitAir()
xml_add_child(., 'mr:airDensity') %>% xml_add_child(.x = ., .value = DensitAir())
AmbientCondInfo <- reactive({
ambientXML <- read_xml(genericHeading('mr:ambiente ID = "idAmbiente"'))
ambientXML %>% {
xml_add_child(., 'mr:airDensity') %>% xml_add_child(.x = ., .value = DensitAir())
xml_add_child(., 'mr:ambientConditions')
xml_add_child(., 'mr:timeISO8601', iso8601(fecha(), niceHTML = FALSE))}
xml_add_child(.x = xml_child(ambientXML, 'mr:ambientConditions'), .value = Temperatura())
xml_add_child(.x = xml_child(ambientXML, 'mr:ambientConditions'), .value = PressionBar())
xml_add_child(.x = xml_child(ambientXML, 'mr:ambientConditions'), .value = HumedadRela())
})
ambientXML <- read_xml(genericHeading('mr:ambiente ID = "idAmbiente"'))
ambientXML %>% {
xml_add_child(., 'mr:airDensity') %>% xml_add_child(.x = ., .value = DensitAir())
xml_add_child(., 'mr:ambientConditions')
xml_add_child(., 'mr:timeISO8601', iso8601(fecha(), niceHTML = FALSE))}
ambientXML
xml_add_child(., 'mr:timeISO8601', iso8601(fecha(), niceHTML = FALSE))}
ambientXML
message(ambientXML)
ambientXML <- read_xml(genericHeading('mr:ambiente ID = "idAmbiente"'))
ambientXML %>% {
xml_add_child(., 'mr:airDensity') %>% xml_add_child(., .value = DensitAir())
xml_add_child(., 'mr:ambientConditions') %>% {
xml_add_child(., .value = Temperatura())
xml_add_child(., .value = PressionBar())
xml_add_child(., .value = HumedadRela())}
xml_add_child(., 'mr:timeISO8601', iso8601(fecha(), niceHTML = FALSE))}
message(ambientXML)
runApp()
runApp()
library(shinydashboardPlus)
runApp()
runApp()
library(shinydashboardPlus)
runApp()
runApp()
runApp()
ambient()
ambient()
ambient
AmbiDensAire
AmbiDensAire
AmbiDensAire()
AmbientCondInfo
AmbientCondInfo()
AmbientCondInfo <- reactive({
ambientXML <- read_xml(genericHeading('mr:ambiente ID = "idAmbiente"'))
ambientXML %>% {
xml_add_child(., 'mr:airDensity') %>% xml_add_child(., .value = DensitAir())
xml_add_child(., 'mr:ambientConditions') %>% {
xml_add_child(., .value = Temperatura())
xml_add_child(., .value = PressionBar())
xml_add_child(., .value = HumedadRela())}
xml_add_child(., 'mr:timeISO8601', iso8601(fecha(), niceHTML = FALSE))}
return(ambientXML)
})
AmbientCondInfo()
runApp()
runApp()
runApp()
runApp()
runApp()
sum(c(input$NewEDTAStdSol, input$NewCaliSamSol, input$NewLeadStdSol, input$NewEDTASamSol))
runApp()
AmbiDensAire
AmbiDensAire()
runApp()
SolidMRC()
DensiDisol()
message(SolidMRC())
message(DensiDisol())
MassFrMRC <- reactive(GetValueEstandUncert(req(SolidMRC()), 'MassFraction'))
ambient()
DensityAir <- reactive(GetValueEstandUncert(req(ambient()), 'Density'))
DensityAir()
DensityAir()$ValUnc
DensitAir()
GetValueEstandUncert(req(DensiDisol())
)
DisConc <- reactive({
xx <- propagate(
expr = expression(convMassMRC * MassFrMRC * BuoyMRC / (MolWeiMRC * convMassDis * BuoyDis) * 1000000),
data = cbind(convMassMRC = convMassMRC(), MassFrMRC = MassFrMRC()[[1]], BuoyMRC = BuoyMRC(),
MolWeiMRC = MolWeiMRC()[[1]], convMassDis = convMassDis(), BuoyDis = BuoyDis()),
do.sim = FALSE)
return(xx$prop[c(1, 3)])
})
DisConc()
library(propagate)
Q
runApp()
AmbiDensAire
ambient
ambient()
airDensity
airDensity()
convMassMRC()
MassFrMRC()[[1]]
MassFrMRC()$ValUnc
BuoyMRC = BuoyMRC()
BuoyMRC()
BuoyDis = BuoyDis()
runApp()
runApp()
runApp()
DisConc
DisConc()
convMassMRC()
MassFrMRC()$ValUnc
BuoyMRC()
MolWeiMRC()[[1]]
convMassDis()
BuoyDis()
DisolDensi()$ValUnc[1]
airDensity()$ValUnc[1])
airDensity()$ValUnc[1]
MABC(rho = DisolDensi()$ValUnc[1], rho_air = airDensity()$ValUnc[1])
uncertMABC(rho = DisolDensi()$ValUnc[1], rho_air = airDensity()$ValUnc()[1],
u_rho = DisolDensi()$ValUnc[2], u_rho_air = airDensity()$ValUnc[2], printRelSD = FALSE)
BuoyDis <- reactive(c(MABC(rho = DisolDensi()$ValUnc[1], rho_air = airDensity()$ValUnc[1]),
uncertMABC(rho = DisolDensi()$ValUnc[1], rho_air = airDensity()$ValUnc[1],
u_rho = DisolDensi()$ValUnc[2], u_rho_air = airDensity()$ValUnc[2], printRelSD = FALSE)))
BuoyDis()
DisConc <- reactive({
xx <- propagate(
expr = expression(convMassMRC * MassFrMRC * BuoyMRC / (MolWeiMRC * convMassDis * BuoyDis) * 1000000),
data = cbind(convMassMRC = convMassMRC(), MassFrMRC = MassFrMRC()$ValUnc, BuoyMRC = BuoyMRC(),
MolWeiMRC = MolWeiMRC()$ValUnc, convMassDis = convMassDis(), BuoyDis = BuoyDis()),
do.sim = FALSE)
return(xx$prop[c(1, 3)])
})
DisConc()
xx <- SiRealXML(quantityTypeQUDT = 'AmountOfSubstancePerUnitMass', value = xx[1],
units = '\\milli\\mol\\kilo\\gram]]tothe{-1', uncert = xx[2], covFac = 1)
xx
xx <- propagate(
expr = expression(convMassMRC * MassFrMRC * BuoyMRC / (MolWeiMRC * convMassDis * BuoyDis) * 1000000),
data = cbind(convMassMRC = convMassMRC(), MassFrMRC = MassFrMRC()$ValUnc, BuoyMRC = BuoyMRC(),
MolWeiMRC = MolWeiMRC()$ValUnc, convMassDis = convMassDis(), BuoyDis = BuoyDis()),
do.sim = FALSE)
xx <- SiRealXML(quantityTypeQUDT = 'AmountOfSubstancePerUnitMass', value = xx[1],
units = '\\milli\\mol\\kilo\\gram]]tothe{-1', uncert = xx[2], covFac = 1)
xx <- SiRealXML(quantityTypeQUDT = 'AmountOfSubstancePerUnitMass', value = xx[1],
units = '\\milli\\mol\\kilo\\gram]]tothe{-1', uncert = xx[2], covFac = 1, 'k')
xx <- SiRealXML(quantityTypeQUDT = 'AmountOfSubstancePerUnitMass', value = xx[1],
units = '\\milli\\mol\\kilo\\gram]]tothe{-1', uncert = xx[2], covFac = 1, distribution = 'k')
xx <- SiRealXML(quantityTypeQUDT = 'AmountOfSubstancePerUnitMass', value = xx[1],
units = '\\milli\\mol\\kilo\\gram\\tothe{-1}', uncert = xx[2], covFac = 1)
xx <- SiRealXML(quantityTypeQUDT = 'AmountOfSubstancePerUnitMass', value = xx[1],
units = '\\milli\\mol\\kilo\\gram\\tothe{-1}', uncert = xx[2], covFac = 1, distribution = 0)
xx[1]
xx <- SiRealXML(quantityTypeQUDT = 'AmountOfSubstancePerUnitMass', value = xx$prop[1],
units = '\\milli\\mol\\kilo\\gram\\tothe{-1}', uncert =  xx$prop[3], covFac = 1)
xx <- SiRealXML(quantityTypeQUDT = 'AmountOfSubstancePerUnitMass', value = xx$prop[1],
units = '\\milli\\mol\\kilo\\gram\\tothe{-1}', uncert =  xx$prop[3], covFac = 1, distribution = 4)
xx
xx <- propagate(
expr = expression(convMassMRC * MassFrMRC * BuoyMRC / (MolWeiMRC * convMassDis * BuoyDis) * 1000000),
data = cbind(convMassMRC = convMassMRC(), MassFrMRC = MassFrMRC()$ValUnc, BuoyMRC = BuoyMRC(),
MolWeiMRC = MolWeiMRC()$ValUnc, convMassDis = convMassDis(), BuoyDis = BuoyDis()),
do.sim = FALSE)
xx$prop[[1]]
runApp()
DisConc
DisConc()
initiateSolutionXML()
############## Disoluciones
initiateSolutionXML <- function() {
xmlObject <- read_xml(genericHeading('mr:standardSolution', TRUE))
xmlObject %>% {
xml_add_child(., 'mr:administrativeData')
xml_add_child(., 'mr:propertyValues')
}
return(xmlObject)
}
xmlObject <- initiateSolutionXML()
xmlObject
AdminList <- list('mr:solutionType' = 'Reference')
substances[reagKey]
xmlObject
runApp()
SiRealXML <- function(quantityTypeQUDT, value, units, uncert, covFac, covProp = NULL, distribution = 'normal') {
if(missing(covProp)) covProp <- round(pnorm(covFac) - pnorm(-covFac), 3)
SiRealXML <- read_xml('<si:real xmlns:si="https://ptb.de/si" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>')
addDataToMRXML(SiRealXML, list(
'si:quantityTypeQUDT' = quantityTypeQUDT, 'si:value' = value, 'si:unit' = units,
'si:expandedUnc' = list(
'si:uncertainty' = uncert, 'si:coverageFactor' = covFac,
'si:coverageProbability' = covProp, 'si:distribution' = distribution)))
return(SiRealXML)
}
xmlObject <- initiateSolutionXML()
AdminList <- list('mr:solutionType' = 'Reference')
PropeList <- list('mr:substance' = Substances[reagKey])
addDataToMRXML(xmlObject, AdminList, node = 'mr:administrativeData')
addDataToMRXML(xmlObject, PropeList, node = 'mr:propertyValues')
Substances[reagKey]
reagKey
source("~/titulaR/D_SI_xml/mrRawData/MRC/InHouse_GSO_2960_84.R")
source("~/titulaR/Modules/00_DigitalReferences.R")
source("~/titulaR/D_SI_xml/mrRawData/MRC/InHouse_GSO_2960_84.R")
source("~/titulaR/D_SI_xml/mrRawData/MRC/UNIIM_GSO_2960_84.R")
xmlObject <- initiateSolutionXML()
AdminList <- list('mr:solutionType' = 'Reference')
PropeList <- list('mr:substance' = Substances[reagForm])
addDataToMRXML(xmlObject, AdminList, node = 'mr:administrativeData')
addDataToMRXML(xmlObject, PropeList, node = 'mr:propertyValues')
xmlObject %>% xml_add_child(., .value = DisConc())
xmlObject
message(xmlObject)
runApp()
runApp()
xmlObject <- initiateSolutionXML()
xmlObject <- initiateSolutionXML()
AdminList <- list('mr:solutionType' = 'Reference')
PropeList <- list('mr:substance' = Substances[reagForm])
Substances[reagForm]
addDataToMRXML(xmlObject, AdminList, node = 'mr:administrativeData')
addDataToMRXML(xmlObject, PropeList, node = 'mr:property')
xml_child(xmlObject, search = 'mr:property')
addDataToMRXML(xmlObject, PropeList, node = 'mr:property')
xmlObject
addDataToMRXML(xmlObject, AdminList, node = 'mr:administrativeData')
addDataToMRXML(xmlObject, PropeList, node = 'mr:property')
xml_add_child(., 'mr:property')
xmlObject %>% {
xml_add_child(., 'mr:administrativeData')
xml_add_child(., 'mr:property')
}
return(xmlObject)
Q
runApp()
runApp()
runApp()
runApp()
Temperatura
Temperatura <- SiRealInputServer('Temperatura', devMode = devMode, quantityTypeQUDT = 'Temperature')
Temperatura
Temperatura()
iso8601(fecha(), niceHTML = FALSE)
reactive(iso8601(fecha(), niceHTML = FALSE))
reactive(iso8601(fecha(), niceHTML = FALSE))()
xx<-reactive(iso8601(fecha(), niceHTML = FALSE))
xx()
