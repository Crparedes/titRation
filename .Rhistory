shiny::runApp()
install.packages('htmltools')
install.packages("htmltools")
shiny::runApp()
runApp()
runApp()
runApp()
demoList <- list(
titCurve = data.frame('Titrant' = c(4.5186,
4.5608,
4.5781,
4.5865,
4.5887,
4.5930,
4.5970,
4.6009,
4.6046,
4.6097,
4.6143,
4.6180,
4.6268,
4.6357,
4.6531),
'Signal' = c(0.1),
'DerAppr' = 0)
)
demoList <- list(
titCurve = data.frame('Titrant' = c(4.5186, 4.5608, 4.5781, 4.5865, 4.5887, 4.5930, 4.5970,
4.6009, 4.6046, 4.6097, 4.6143, 4.6180, 4.6268, 4.6357),
'Signal' = c(-187.7, -194.5, -199.8, -203.5, -204.9, -207.8, -211.4,
-216.8, -224.3, -237.5, -246.2, -247.8, -249.5, -250.0),
'DerAppr' = 0)
)
titCurve
demoList$titCurve
shiny::runApp()
runApp()
TableDat_0
TableDat_0$hot
demoData$titCurve
voidData$titCurve
TableDat_0  <- reactiveValues(hot = ifelse(demo(), demoData$titCurve, voidData$titCurve))
TableDat_0$hot
ifelse(demo(), demoData$titCurve, voidData$titCurve)
ifelse(demo(), data.frame(demoData$titCurve), voidData$titCurve)
ifelse(FALSE, data.frame(demoData$titCurve), voidData$titCurve)
demoData$titCurve
voidData$titCurve
ifelse(demo(), demoData$titCurve, voidData$titCurve)
ifelse(FALSE, data.frame(demoData$titCurve), voidData$titCurve)
demoData <- data.frame('Titrant' = c(4.5186, 4.5608, 4.5781, 4.5865, 4.5887, 4.5930, 4.5970,
4.6009, 4.6046, 4.6097, 4.6143, 4.6180, 4.6268, 4.6357),
'Signal' = c(-187.7, -194.5, -199.8, -203.5, -204.9, -207.8, -211.4,
-216.8, -224.3, -237.5, -246.2, -247.8, -249.5, -250.0),
'DerAppr' = 0)
voidData <- data.frame('Titrant' = c(0.0001, rep(NA, 29)),  'Signal' = c(0.1, rep(NA, 29)), 'DerAppr' = c(0.1, rep(NA, 29)))
ifelse(FALSE, demoData, voidData)
reactiveValues(return(if TRUE 1 else 2))
runApp()
TblDt_0()
demo()
return(voidData$titCurve)
runApp()
shiny::runApp()
StandardSampleSolutions
StandardSampleSolutions$solutions
StandardSampleSolutions$solutions
StandardSampleSolutions
StandardSampleSolutions$solutions
StandardSampleSolutions$solutions
runApp()
NewSol <- isolate(SolidMRCServer(id = tabName, devMode = devMode, reagKey = 'EDTA', reagForm = 'Na2EDTA.2H2O', materiales = materiales$forCalibrantes,
demo = demo, analyst = analyst, balanza = balanzaUsed, fecha = fecha, ambient = AmbiDensAire,
solutionType = solutionType))
solutionType <- 'EstandarEDTA'
tabName <- isolate(paste0(solutionType, '_', input$NewEDTAStdSol))
NewSol <- isolate(SolidMRCServer(id = tabName, devMode = devMode, reagKey = 'EDTA', reagForm = 'Na2EDTA.2H2O', materiales = materiales$forCalibrantes,
demo = demo, analyst = analyst, balanza = balanzaUsed, fecha = fecha, ambient = AmbiDensAire,
solutionType = solutionType))
NewSol
NewSol()
runApp()
runApp()
runApp()
uploadedFiles <- lapply((input$NewXML$datapath), function(x) read_xml(x))
uploadedFiles
solTypes
solTypes <- sapply(uploadedFiles, function(x) xml_text(xml_find_all(x, xpath = '//mr:solutionType')))
uploadedFiles
lapply(uploadedFiles, function(x) return(reactive(x)))
zz <- lapply(uploadedFiles, function(x) return(reactive(x)))
zz
uploadedFiles
reactiveValues(uploadedFiles)
uploadedFiles
uploadedFiles[[1]]
reactive(uploadedFiles[[1]])
reactive(uploadedFiles[[1]])()
lapply(uploadedFiles, function(x) return(reactive(x)))
sapply(uploadedFiles, function(x) return(reactive(x)))
apply(uploadedFiles, function(x) return(reactive(x)))
lapply(uploadedFiles, function(x) return(reactive(x)))
lapply(uploadedFiles, reactive)
for(i in 1:length(uploadedFiles)) {return(reactive(uploadedFiles[[i]]))}
i
for(i in 1:length(uploadedFiles)) {reactive(uploadedFiles[[i]])}
uploadedFiles[[1]]
uploadedFiles
do.call(shiny::reactiveValues, uploadedFiles)
runApp()
runApp()
runApp()
runApp()
input$NewXML$type
!all(input$NewXML$type == 'text/xml')
is.error(lapply(input$NewXML$datapath, function(x) read_xml(x)))
lapply((input$NewXML$datapath), function(x) read_xml(x))
uploadedFiles <- lapply((input$NewXML$datapath), function(x) read_xml(x))
solTypes <- sapply(uploadedFiles, function(x) xml_text(xml_find_all(x, xpath = '//mr:solutionType')))
solTypes
runApp()
runApp()
StandardSampleSolutions$solutions
reactiveValuesToList(StandardSampleSolutions$solutions)
reactiveValuesToList(StandardSampleSolutions)
StandardSampleSolutions$solutions
lapply(StandardSampleSolutions$solutions, function(x) {if(is.reactive(x)) return(x()) else return(x)})
runApp()
uploadedFiles
uploadedFiles <- lapply((input$NewXML$datapath), function(x) read_xml(x))
solTypes <- sapply(uploadedFiles, function(x) xml_text(xml_find_all(x, xpath = '//mr:solutionType')))
uploadedFiles
lapply(uploadedFiles, return)
sapply(uploadedFiles, return)
sapply(uploadedFiles, function(x) {return(x)})
uploadedFiles
lapply(uploadedFiles, function(x) {return(x)})
lapply(uploadedFiles, function(x) {return(reactive(x))})
lapply(uploadedFiles, function(x) {return(reactive)})
reactive(uploadedFiles[[1]])
reactive(uploadedFiles[[1]])()
lapply(uploadedFiles, function(x) {return(reactive(x))})
zz <- lapply(uploadedFiles, function(x) {return(reactive(x))})
zz
zz[[1]]
zz[[1]]()
runApp()
list.files('www/DemoFiles/Solutions/')
list.files('www/DemoFiles/Solutions/', full.names = TRUE)
lapply(list.files('www/DemoFiles/Solutions/', full.names = TRUE), read_xml)
lapply(list.files('www/DemoFiles/Solutions/', full.names = TRUE), reactive(read_xml))
lapply(list.files('www/DemoFiles/Solutions/', full.names = TRUE), function(x) reactive(read_xml(x)))
lapply(list.files('www/DemoFiles/Solutions/', full.names = TRUE), function(x) reactive(read_xml(x)))[[1]]
lapply(list.files('www/DemoFiles/Solutions/', full.names = TRUE), function(x) reactive(read_xml(x)))[[1]]()
lapply(list.files('www/DemoFiles/Solutions/', full.names = TRUE), function(x) reactive(read_xml(x)))
runApp()
runApp()
runApp()
runApp()
demo()
lapply(list.files('www/DemoFiles/Solutions/', full.names = TRUE), function(x) reactive(read_xml(x)))
append(
StandardSampleSolutions, lapply(list.files('www/DemoFiles/Solutions/', full.names = TRUE), function(x) reactive(read_xml(x))))
StandardSampleSolutions <- reactiveValues(solutions = list())
observe({if(demo()) {
StandardSampleSolutions$solutions <- append(
StandardSampleSolutions$solutions, lapply(list.files('www/DemoFiles/Solutions/', full.names = TRUE), function(x) reactive(read_xml(x))))
}})
StandardSampleSolutions$solutions
append(
StandardSampleSolutions$solutions, lapply(list.files('www/DemoFiles/Solutions/', full.names = TRUE), function(x) reactive(read_xml(x))))
runApp()
demo()
StandardSampleSolutions$solutions
runApp()
BalanzasDCC
BalanzasDCC()
runApp()
invalidator <- reactiveVal(0)
invalidator
invalidator == 0
invalidator() == 0
runApp()
runApp()
runApp()
runApp()
runApp()
xml_find_all(SampDisol(), xpath = '//mr:substance//mr:name')
element <- xml_text(xml_find_all(SampDisol(), xpath = '//mr:substance//mr:name'))
element
runApp()
runApp()
runApp()
runApp()
runApp()
StanDisol
StanDisol()
IndivTitrResult <- reactiveValues()
IndivTitrResult[[1]]
IndivTitrResult$'1'
IndivTitrResult$'1' <- -sdf
IndivTitrResult$'1' <- '-sdf'
IndivTitrResult
IndivTitrResult$'1'
StanDisol
StanDisol()
horaInicio
horaInicio()
iso8601(horaInicio())
format(Sys.time(), '_%H-%M')
format(Sys.time())
iso8601(fecha = fecha())
iso8601(fecha = fecha())
runApp()
