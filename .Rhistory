ambientXML %>% {
xml_add_child(., 'mr:airDensity') %>% xml_add_child(., .value = DensitAir())
xml_add_child(., 'mr:ambientConditions') %>% {
xml_add_child(., .value = Temperatura())
xml_add_child(., .value = PressionBar())
xml_add_child(., .value = HumedadRela())}
xml_add_child(., 'mr:timeISO8601', iso8601(fecha(), niceHTML = FALSE))}
message(ambientXML)
runApp()
runApp()
library(shinydashboardPlus)
runApp()
runApp()
library(shinydashboardPlus)
runApp()
runApp()
runApp()
ambient()
ambient()
ambient
AmbiDensAire
AmbiDensAire
AmbiDensAire()
AmbientCondInfo
AmbientCondInfo()
AmbientCondInfo <- reactive({
ambientXML <- read_xml(genericHeading('mr:ambiente ID = "idAmbiente"'))
ambientXML %>% {
xml_add_child(., 'mr:airDensity') %>% xml_add_child(., .value = DensitAir())
xml_add_child(., 'mr:ambientConditions') %>% {
xml_add_child(., .value = Temperatura())
xml_add_child(., .value = PressionBar())
xml_add_child(., .value = HumedadRela())}
xml_add_child(., 'mr:timeISO8601', iso8601(fecha(), niceHTML = FALSE))}
return(ambientXML)
})
AmbientCondInfo()
runApp()
runApp()
runApp()
runApp()
runApp()
sum(c(input$NewEDTAStdSol, input$NewCaliSamSol, input$NewLeadStdSol, input$NewEDTASamSol))
runApp()
AmbiDensAire
AmbiDensAire()
runApp()
SolidMRC()
DensiDisol()
message(SolidMRC())
message(DensiDisol())
MassFrMRC <- reactive(GetValueEstandUncert(req(SolidMRC()), 'MassFraction'))
ambient()
DensityAir <- reactive(GetValueEstandUncert(req(ambient()), 'Density'))
DensityAir()
DensityAir()$ValUnc
DensitAir()
GetValueEstandUncert(req(DensiDisol())
)
DisConc <- reactive({
xx <- propagate(
expr = expression(convMassMRC * MassFrMRC * BuoyMRC / (MolWeiMRC * convMassDis * BuoyDis) * 1000000),
data = cbind(convMassMRC = convMassMRC(), MassFrMRC = MassFrMRC()[[1]], BuoyMRC = BuoyMRC(),
MolWeiMRC = MolWeiMRC()[[1]], convMassDis = convMassDis(), BuoyDis = BuoyDis()),
do.sim = FALSE)
return(xx$prop[c(1, 3)])
})
DisConc()
library(propagate)
Q
runApp()
AmbiDensAire
ambient
ambient()
airDensity
airDensity()
convMassMRC()
MassFrMRC()[[1]]
MassFrMRC()$ValUnc
BuoyMRC = BuoyMRC()
BuoyMRC()
BuoyDis = BuoyDis()
runApp()
runApp()
runApp()
DisConc
DisConc()
convMassMRC()
MassFrMRC()$ValUnc
BuoyMRC()
MolWeiMRC()[[1]]
convMassDis()
BuoyDis()
DisolDensi()$ValUnc[1]
airDensity()$ValUnc[1])
airDensity()$ValUnc[1]
MABC(rho = DisolDensi()$ValUnc[1], rho_air = airDensity()$ValUnc[1])
uncertMABC(rho = DisolDensi()$ValUnc[1], rho_air = airDensity()$ValUnc()[1],
u_rho = DisolDensi()$ValUnc[2], u_rho_air = airDensity()$ValUnc[2], printRelSD = FALSE)
BuoyDis <- reactive(c(MABC(rho = DisolDensi()$ValUnc[1], rho_air = airDensity()$ValUnc[1]),
uncertMABC(rho = DisolDensi()$ValUnc[1], rho_air = airDensity()$ValUnc[1],
u_rho = DisolDensi()$ValUnc[2], u_rho_air = airDensity()$ValUnc[2], printRelSD = FALSE)))
BuoyDis()
DisConc <- reactive({
xx <- propagate(
expr = expression(convMassMRC * MassFrMRC * BuoyMRC / (MolWeiMRC * convMassDis * BuoyDis) * 1000000),
data = cbind(convMassMRC = convMassMRC(), MassFrMRC = MassFrMRC()$ValUnc, BuoyMRC = BuoyMRC(),
MolWeiMRC = MolWeiMRC()$ValUnc, convMassDis = convMassDis(), BuoyDis = BuoyDis()),
do.sim = FALSE)
return(xx$prop[c(1, 3)])
})
DisConc()
xx <- SiRealXML(quantityTypeQUDT = 'AmountOfSubstancePerUnitMass', value = xx[1],
units = '\\milli\\mol\\kilo\\gram]]tothe{-1', uncert = xx[2], covFac = 1)
xx
xx <- propagate(
expr = expression(convMassMRC * MassFrMRC * BuoyMRC / (MolWeiMRC * convMassDis * BuoyDis) * 1000000),
data = cbind(convMassMRC = convMassMRC(), MassFrMRC = MassFrMRC()$ValUnc, BuoyMRC = BuoyMRC(),
MolWeiMRC = MolWeiMRC()$ValUnc, convMassDis = convMassDis(), BuoyDis = BuoyDis()),
do.sim = FALSE)
xx <- SiRealXML(quantityTypeQUDT = 'AmountOfSubstancePerUnitMass', value = xx[1],
units = '\\milli\\mol\\kilo\\gram]]tothe{-1', uncert = xx[2], covFac = 1)
xx <- SiRealXML(quantityTypeQUDT = 'AmountOfSubstancePerUnitMass', value = xx[1],
units = '\\milli\\mol\\kilo\\gram]]tothe{-1', uncert = xx[2], covFac = 1, 'k')
xx <- SiRealXML(quantityTypeQUDT = 'AmountOfSubstancePerUnitMass', value = xx[1],
units = '\\milli\\mol\\kilo\\gram]]tothe{-1', uncert = xx[2], covFac = 1, distribution = 'k')
xx <- SiRealXML(quantityTypeQUDT = 'AmountOfSubstancePerUnitMass', value = xx[1],
units = '\\milli\\mol\\kilo\\gram\\tothe{-1}', uncert = xx[2], covFac = 1)
xx <- SiRealXML(quantityTypeQUDT = 'AmountOfSubstancePerUnitMass', value = xx[1],
units = '\\milli\\mol\\kilo\\gram\\tothe{-1}', uncert = xx[2], covFac = 1, distribution = 0)
xx[1]
xx <- SiRealXML(quantityTypeQUDT = 'AmountOfSubstancePerUnitMass', value = xx$prop[1],
units = '\\milli\\mol\\kilo\\gram\\tothe{-1}', uncert =  xx$prop[3], covFac = 1)
xx <- SiRealXML(quantityTypeQUDT = 'AmountOfSubstancePerUnitMass', value = xx$prop[1],
units = '\\milli\\mol\\kilo\\gram\\tothe{-1}', uncert =  xx$prop[3], covFac = 1, distribution = 4)
xx
xx <- propagate(
expr = expression(convMassMRC * MassFrMRC * BuoyMRC / (MolWeiMRC * convMassDis * BuoyDis) * 1000000),
data = cbind(convMassMRC = convMassMRC(), MassFrMRC = MassFrMRC()$ValUnc, BuoyMRC = BuoyMRC(),
MolWeiMRC = MolWeiMRC()$ValUnc, convMassDis = convMassDis(), BuoyDis = BuoyDis()),
do.sim = FALSE)
xx$prop[[1]]
runApp()
DisConc
DisConc()
initiateSolutionXML()
############## Disoluciones
initiateSolutionXML <- function() {
xmlObject <- read_xml(genericHeading('mr:standardSolution', TRUE))
xmlObject %>% {
xml_add_child(., 'mr:administrativeData')
xml_add_child(., 'mr:propertyValues')
}
return(xmlObject)
}
xmlObject <- initiateSolutionXML()
xmlObject
AdminList <- list('mr:solutionType' = 'Reference')
substances[reagKey]
xmlObject
runApp()
SiRealXML <- function(quantityTypeQUDT, value, units, uncert, covFac, covProp = NULL, distribution = 'normal') {
if(missing(covProp)) covProp <- round(pnorm(covFac) - pnorm(-covFac), 3)
SiRealXML <- read_xml('<si:real xmlns:si="https://ptb.de/si" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>')
addDataToMRXML(SiRealXML, list(
'si:quantityTypeQUDT' = quantityTypeQUDT, 'si:value' = value, 'si:unit' = units,
'si:expandedUnc' = list(
'si:uncertainty' = uncert, 'si:coverageFactor' = covFac,
'si:coverageProbability' = covProp, 'si:distribution' = distribution)))
return(SiRealXML)
}
xmlObject <- initiateSolutionXML()
AdminList <- list('mr:solutionType' = 'Reference')
PropeList <- list('mr:substance' = Substances[reagKey])
addDataToMRXML(xmlObject, AdminList, node = 'mr:administrativeData')
addDataToMRXML(xmlObject, PropeList, node = 'mr:propertyValues')
Substances[reagKey]
reagKey
source("~/titulaR/D_SI_xml/mrRawData/MRC/InHouse_GSO_2960_84.R")
source("~/titulaR/Modules/00_DigitalReferences.R")
source("~/titulaR/D_SI_xml/mrRawData/MRC/InHouse_GSO_2960_84.R")
source("~/titulaR/D_SI_xml/mrRawData/MRC/UNIIM_GSO_2960_84.R")
xmlObject <- initiateSolutionXML()
AdminList <- list('mr:solutionType' = 'Reference')
PropeList <- list('mr:substance' = Substances[reagForm])
addDataToMRXML(xmlObject, AdminList, node = 'mr:administrativeData')
addDataToMRXML(xmlObject, PropeList, node = 'mr:propertyValues')
xmlObject %>% xml_add_child(., .value = DisConc())
xmlObject
message(xmlObject)
runApp()
runApp()
xmlObject <- initiateSolutionXML()
xmlObject <- initiateSolutionXML()
AdminList <- list('mr:solutionType' = 'Reference')
PropeList <- list('mr:substance' = Substances[reagForm])
Substances[reagForm]
addDataToMRXML(xmlObject, AdminList, node = 'mr:administrativeData')
addDataToMRXML(xmlObject, PropeList, node = 'mr:property')
xml_child(xmlObject, search = 'mr:property')
addDataToMRXML(xmlObject, PropeList, node = 'mr:property')
xmlObject
addDataToMRXML(xmlObject, AdminList, node = 'mr:administrativeData')
addDataToMRXML(xmlObject, PropeList, node = 'mr:property')
xml_add_child(., 'mr:property')
xmlObject %>% {
xml_add_child(., 'mr:administrativeData')
xml_add_child(., 'mr:property')
}
return(xmlObject)
Q
runApp()
runApp()
runApp()
runApp()
Temperatura
Temperatura <- SiRealInputServer('Temperatura', devMode = devMode, quantityTypeQUDT = 'Temperature')
Temperatura
Temperatura()
iso8601(fecha(), niceHTML = FALSE)
reactive(iso8601(fecha(), niceHTML = FALSE))
reactive(iso8601(fecha(), niceHTML = FALSE))()
xx<-reactive(iso8601(fecha(), niceHTML = FALSE))
xx()
shiny::runApp()
choicesMateriales <- reactive(sapply(materiales, function(x) as_list(x)[[1]]$administrativeData$name))
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
Temperatura <- SiRealInputServer('Temperatura', devMode = devMode, quantityTypeQUDT = 'Temperature')
PressionBar <- SiRealInputServer('PressionBar', devMode = devMode, quantityTypeQUDT = 'AmbientPressure')
HumedadRela <- SiRealInputServer('HumedadRela', devMode = devMode, quantityTypeQUDT = 'RelativeHumidity')
Temp <- GetValueEstandUncert(Temperatura())
p <- GetValueEstandUncert(PressionBar())
h <- GetValueEstandUncert(HumedadRela())
unitsENV <- c(case_when(Temp$Units == '\\degreecelsius' ~ 'deg.C'),
case_when(p$Units == '\\hecto\\pascal' ~ 'hPa'),
case_when(h$Units == '\\percent' ~ '%'))
DensitAir <- SiRealXML(
quantityTypeQUDT = 'Density',
value = signif(digits = 7, airDensity(Temp = Temp[[1]][1], p = p[[1]][1], h = h[[1]][1], unitsENV = unitsENV)),
units = '\\gram\\centi\\meter\\tothe{-3}',
uncert = signif(digits = 3, uncertAirDensity(model = 'CIMP2007', Temp = Temp[[1]][1], p = p[[1]][1], h = h[[1]][1],
u_Temp = Temp[[1]][2], u_p = p[[1]][2], u_h = h[[1]][2],
unitsENV = unitsENV, plot = FALSE, printRelSD = FALSE)),
covFac = 1, distribution = 'normal')
DensitAir
read_xml(genericHeading('mr:ambiente ID = "idAmbiente"'))
ambientXML <- read_xml(genericHeading('mr:ambiente ID = "idAmbiente"'))
ambientXML %>% {
xml_add_child(., 'mr:airDensity') %>% xml_add_child(., .value = DensitAir())
xml_add_child(., 'mr:ambientConditions') %>% {
xml_add_child(., .value = Temperatura())
xml_add_child(., .value = PressionBar())
xml_add_child(., .value = HumedadRela())}
xml_add_child(., 'mr:timeISO8601', iso8601(fecha(), niceHTML = FALSE))}
ambientXML
message(ambientXML)
runApp()
runApp()
runApp()
runApp()
analyst()
analyst
Analyst
runApp()
runApp()
GetValueEstandUncert(req(SolidMRC()), 'MassFraction')
SolidMRC()
SolidMRC()[3]
GetValueEstandUncert <- function(MrcXml, property = NULL, node = NULL) {
if (!missing(node)) MrcXml <- xml_child(MrcXml, search = node)
if (!missing(property)) {
QUDTnodes <- xml_find_all(MrcXml, '//si:quantityTypeQUDT')
PropNode <- gsub(pattern = '/si:real/si:quantityTypeQUDT', replacement = '',
xml_path(QUDTnodes[which(sapply(QUDTnodes, function(x) {as_list(x)[[1]]}) == property)]))
GetValueEstandUncert(xml_find_all(xml_find_all(MrcXml, xpath = PropNode), 'si:real'))
} else {
value <- xml_double(xml_find_all(MrcXml, xpath = 'si:value'))
unitV <- xml_text(xml_find_all(MrcXml, xpath = 'si:unit'))
kFact <- xml_double(xml_find_all(xml_child(MrcXml, search = 'si:expandedUnc'), xpath = 'si:coverageFactor'))
stUnc <- xml_double(xml_find_all(xml_child(MrcXml, search = 'si:expandedUnc'), xpath = 'si:uncertainty')) / kFact
return(list(ValUnc = c(value, stUnc), Units = unitV))
}
}
GetValueEstandUncert(req(SolidMRC()), 'MassFraction')
GetValueEstandUncert(req(SolidMRC()), 'MassFraction', node = 'mr:additionalValues')
runApp()
canonicalURL <- 'https://siunits.stuchalk.domains.unf.edu/si/definition/'
SI_unit_nice <- function(unit, derived = FALSE, width = "84%")(
return(tags$a(href = paste0(canonicalURL, ifelse(derived, 'derivedunit/', 'unit/'), unit),
img(src = paste0("SI_", unit, ".png"), width = width), target = '_blank'))
)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
StandardSampleSolutions
StandardSampleSolutions$EDTA_STD
StandardSampleSolutions$EDTA_STD[[1]]
StandardSampleSolutions$EDTA_STD[[1]]()
StandardSampleSolutions <- reactiveValues()
StandardSampleSolutions
append(StandardSampleSolutions)
append(StandardSampleSolutions, 21)
StandardSampleSolutions
StandardSampleSolutions <- append(StandardSampleSolutions, 'dsa')
StandardSampleSolutions
StandardSampleSolutions()
StandardSampleSolutions <- reactiveValues(solutions = list())
StandardSampleSolutions <- reactiveValues(solutions = list())
StandardSampleSolutions$solutions
StandardSampleSolutions$solutions <- append(StandardSampleSolutions$solutions, 'sd')
StandardSampleSolutions$solutions
StandardSampleSolutions$solutions <- append(StandardSampleSolutions$solutions, 'sd')
StandardSampleSolutions$solutions
runApp()
StandardSampleSolutions$solutions
StandardSampleSolutions
StandardSampleSolutions <- reactiveValues(solutions = list())
StandardSampleSolutions
StandardSampleSolutions
StandardSampleSolutions$solutions
SolidMRCServer(id = tabName, devMode = devMode, reagKey = 'EDTA', reagForm = 'Na2EDTA.2H2O', materiales = materiales$forCalibrantes,
demo = demo, analyst = analyst, balanza = balanzaUsed, fecha = fecha, ambient = AmbiDensAire)
tabName <- isolate(paste0('EstandarEDTA_', input$NewEDTAStdSol))
input$NewEDTAStdSol
isolate(SolidMRCServer(id = tabName, devMode = devMode, reagKey = 'EDTA', reagForm = 'Na2EDTA.2H2O', materiales = materiales$forCalibrantes,
demo = demo, analyst = analyst, balanza = balanzaUsed, fecha = fecha, ambient = AmbiDensAire))
isolate(SolidMRCServer(id = tabName, devMode = devMode, reagKey = 'EDTA', reagForm = 'Na2EDTA.2H2O', materiales = materiales$forCalibrantes,
demo = demo, analyst = analyst, balanza = balanzaUsed, fecha = fecha, ambient = AmbiDensAire))()
runApp()
StandardSampleSolutions
StandardSampleSolutions$solutions
StandardSampleSolutions$solutions[[1]]
StandardSampleSolutions$solutions[[1]]()
StandardSampleSolutions$solutions
StandardSampleSolutions$solutions[[3]]()
runApp()
runApp()
runApp()
read_xml(genericHeading())
densities <- list(
Na2EDTA.2H2O = list(
'si:real' = list(
'si:quantityTypeQUDT' = 'Density',
'si:value' = 0.860,
'si:unit' = '\\gram\\centi\\meter\\tothe{-3}',
'si:expandedUnc' = list(
'si:uncertainty' = 0.05 * sqrt(3),
'si:coverageFactor' = sqrt(3),
'si:coverageProbability' = 0.95)))
)
densities$Na2EDTA.2H2O['si:real']
SiRealXML <- function(SI.list = NULL, quantityTypeQUDT = NULL, value = NULL, units = NULL,
uncert = NULL, covFac = NULL, covProp = NULL, distribution = 'normal') {
SiRealXML <- read_xml('<si:real xmlns:si="https://ptb.de/si" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>')
if(!missing(SI.list)) {
addDataToMRXML(SiRealXML, SI.list)
} else {
if(missing(covProp)) covProp <- round(pnorm(covFac) - pnorm(-covFac), 3)
addDataToMRXML(SiRealXML, list(
'si:quantityTypeQUDT' = quantityTypeQUDT, 'si:value' = value, 'si:unit' = units,
'si:expandedUnc' = list(
'si:uncertainty' = uncert, 'si:coverageFactor' = covFac,
'si:coverageProbability' = covProp, 'si:distribution' = distribution)))
}
return(SiRealXML)
}
SiRealXML(Si.list = densities$Na2EDTA.2H2O['si:real'])
SiRealXML(SI.list = densities$Na2EDTA.2H2O['si:real'])
runApp()
runApp()
airDensity()$ValUnc
convMassDis()
xx$prop
xx <- propagate(
expr = expression(convMassMRC * MassFrMRC * BuoyMRC / (MolWeiMRC * convMassDis * BuoyDis) * 1000000),
data = cbind(convMassMRC = convMassMRC(), MassFrMRC = MassFrMRC()$ValUnc, BuoyMRC = BuoyMRC(),
MolWeiMRC = MolWeiMRC()$ValUnc, convMassDis = convMassDis(), BuoyDis = BuoyDis()),
do.sim = FALSE)
xx$prop[[1]]
xx$prop[1]
signif(xx$prop[1], 8)
signif(xx$prop[2], 8)
signif(xx$prop[3], 8)
xx$prop[[3]]
DensitSample()
GetValueEstandUncert(DensitSample())
GetValueEstandUncert(DensitSample(), 'Density')
runApp()
runApp()
analyst()
runApp()
runApp()
runApp()
runApp()
runApp()
library(CIAAWconsensus)
ciaaw.mass.2016
runApp()
runApp()
runApp()
runApp()
diff(c(206.14, 207.94))
diff(c(206.14, 207.94)) / 2 / sqrt(3)
diff(c(206.14, 207.94))
0.004 / sqrt(3)
IUPAC2019AW <- list(
PbII = c(mean(c(206.14, 207.94)), signif(diff(c(206.14, 207.94)) / 2 / sqrt(3), 2)),
CdII = c(112.414, signif(0.004 / sqrt(3), 2)),
)
runApp()
runApp()
runApp()
runApp()
signif(diff(c(206.14, 207.94)) / 2 / sqrt(3), 2)
signif(diff(c(206.14, 207.94)) / 2 / sqrt(3), 2)/207.2*100
runApp()
runApp()
input$MolarMassOpt
input$DilutionOpt
runApp()
runApp()
runApp()
ShowMolarMass()
InitMolarMass
InitMolarMass
input$MasaMolarOpt
InitMolarMass
input$Elemento
IUPAC2019AW[[input$Elemento]]
InitMolarMass <- reactive(IUPAC2019AW[[input$Elemento]])
InitMolarMass
InitMolarMass()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
Analista()
xml_find_all(Analista(), xpath = 'orcid')
xml_find_all(Analista(), xpath = 'data\\orcid')
xml_find_all(Analista(), xpath = './/data//orcid')
xml_text(xml_find_all(Analista(), xpath = './/data//orcid'))
runApp()
shiny::runApp()
devtools::install_github("datasketch/shi18ny")
install.packages('devtools')
devtools::install_github("datasketch/shi18ny")
runApp()
runApp()
if (interactive()) {
library("shiny")
library("shi18ny")
ui <- fluidPage(
tags$h1("shiny internationalization"),
br(),
# Initialize shi18ny
useShi18ny(),
# Language selector input
langSelectorInput("lang", position = "fixed"),
# UI elements
# Text can be translated directly from the UI, using the ui_ function:
h1(ui_("hello")),
# OR by using uiOutput:
uiOutput("results")
)
server <- function(input, output, session) {
# Configure shi18ny
i18n <- list(
defaultLang = "en",
availableLangs = c("es", "en", "pt")
)
# Call language module to get currently selected language and save it in a reactive
lang <- callModule(langSelector, "lang", i18n = i18n, showSelector = TRUE)
# Update UI translation
observeEvent(lang(),{
uiLangUpdate(input$shi18ny_ui_classes, lang())
})
# Render translations by passing the text and the active (selected) language as the lang() parameter to the i_ function
output$results <- renderUI({
list(
h1(i_("world", lang())),
br(),
h4(i_("language", lang()))
)
})
}
shinyApp(ui, server)
}
shiny::runGitHub("multilingualShinyApp","chrislad")
runApp()
runApp()
runApp()
runApp()
balanzasShow
balanzasShow
runApp()
runApp()
runApp()
