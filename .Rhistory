addInfList <- list('mr:timeISO8601start' = horaInicio(),
'mr:timeISO8601end' = horaFinal())
xml_child(xmlObject, search = 'mr:titrationResult') %>% {
xml_add_child(., .value = xml_child(SampDisol(), search = 'mr:coreData//mr:solutionSource'))
xml_add_child(., .value = xml_child(SampDisol(), search = 'mr:property//mr:substance'))
xml_add_child(., .value = SiRealXML(
quantityTypeQUDT = 'massFraction', value = ResParcUncSource()$prop[[1]], units = '\\milli\\gram\\kilo\\gram\\tothe{-1}',
uncert = ResParcUncSource()$prop[[3]], covFac = 1))
}
xml_child(xmlObject, search = 'mr:additionalInfo') %>% {
xml_add_child(., .value = analyst())
xml_add_child(., .value = 'mr:intermediateSolution') %>%
xml_add_child(., .value = 'mr:referenceSolution')
}
xml_child(xmlObject, search = 'mr:additionalInfo//mr:intermediateSolution') %>% {
xml_add_child(., .value = xml_child(SampDisol(), search = 'mr:coreData//mr:solutionID'))
xml_add_child(., .value = CopySiRealFromXML(SampDisol(), 'MassRatio', as.char = FALSE))
xml_add_child(., .value = SiRealXML(
quantityTypeQUDT = 'massFraction', value = ResParcUnc()$prop[[1]], units = '\\milli\\gram\\kilo\\gram\\tothe{-1}',
uncert = ResParcUnc()$prop[[3]], covFac = 1))
xml_add_child(., .value = xml_child(SampDisol(), search = 'mr:coreData//mr:timeISO8601'))
}
xml_child(xmlObject, search = 'mr:additionalInfo//mr:intermediateSolution') %>% {
xml_add_child(., .value = xml_child(SampDisol(), search = 'mr:coreData//mr:solutionID'))
xml_add_child(., .value = CopySiRealFromXML(SampDisol(), 'MassRatio', as.char = TRUE))
xml_add_child(., .value = SiRealXML(
quantityTypeQUDT = 'massFraction', value = ResParcUnc()$prop[[1]], units = '\\milli\\gram\\kilo\\gram\\tothe{-1}',
uncert = ResParcUnc()$prop[[3]], covFac = 1))
xml_add_child(., .value = xml_child(SampDisol(), search = 'mr:coreData//mr:timeISO8601'))
}
xmlObject
print.xml_document <- print.xml_node <- function (x) message(x)
xmlObject
xmlObject <- initiateTitrationXML()
addInfList <- list('mr:timeISO8601start' = horaInicio(),
'mr:timeISO8601end' = horaFinal())
xml_child(xmlObject, search = 'mr:titrationResult') %>% {
xml_add_child(., .value = xml_child(SampDisol(), search = 'mr:coreData//mr:solutionSource'))
xml_add_child(., .value = xml_child(SampDisol(), search = 'mr:property//mr:substance'))
xml_add_child(., .value = SiRealXML(
quantityTypeQUDT = 'massFraction', value = ResParcUncSource()$prop[[1]], units = '\\milli\\gram\\kilo\\gram\\tothe{-1}',
uncert = ResParcUncSource()$prop[[3]], covFac = 1))
}
xml_child(xmlObject, search = 'mr:additionalInfo') %>% {
xml_add_child(., .value = analyst())
xml_add_child(., .value = 'mr:intermediateSolution') %>%
xml_add_child(., .value = 'mr:referenceSolution')
}
xml_child(xmlObject, search = 'mr:additionalInfo//mr:intermediateSolution') %>% {
xml_add_child(., .value = xml_child(SampDisol(), search = 'mr:coreData//mr:solutionID'))
xml_add_child(., .value = CopySiRealFromXML(SampDisol(), 'MassRatio', as.char = TRUE))
xml_add_child(., .value = SiRealXML(
quantityTypeQUDT = 'massFraction', value = ResParcUnc()$prop[[1]], units = '\\milli\\gram\\kilo\\gram\\tothe{-1}',
uncert = ResParcUnc()$prop[[3]], covFac = 1))
xml_add_child(., .value = xml_child(SampDisol(), search = 'mr:coreData//mr:timeISO8601'))
}
xmlObject
QUDTnodes <- xml_find_all(xmlObject, '//si:quantityTypeQUDT')
QUDTnodes
property='massFraction'
PropNode <- gsub(pattern = '/si:quantityTypeQUDT', replacement = '',
xml_path(QUDTnodes[which(sapply(QUDTnodes, function(x) {as_list(x)[[1]]}) == property)]))
PropNode
PropNode <- PropNode[1]
xml_find_all(xmlObject, xpath = PropNode)
as.character(xml_find_all(xmlObject, xpath = PropNode))
xml_child(xmlObject, search = 'mr:additionalInfo//mr:intermediateSolution') %>% {
xml_add_child(., .value = xml_child(SampDisol(), search = 'mr:coreData//mr:solutionID'))
xml_add_child(., .value = CopySiRealFromXML(SampDisol(), 'MassRatio', as.char = FALSE))
xml_add_child(., .value = SiRealXML(
quantityTypeQUDT = 'massFraction', value = ResParcUnc()$prop[[1]], units = '\\milli\\gram\\kilo\\gram\\tothe{-1}',
uncert = ResParcUnc()$prop[[3]], covFac = 1))
xml_add_child(., .value = xml_child(SampDisol(), search = 'mr:coreData//mr:timeISO8601'))
}
PropNode
PropNode <- gsub(pattern = '/si:quantityTypeQUDT', replacement = '',
xml_path(QUDTnodes[which(sapply(QUDTnodes, function(x) {as_list(x)[[1]]}) == property)]))
PropNode
xml_find_all(xmlObject, xpath = PropNode)
xml_child(xmlObject, PropNode)
xml_child(xmlObject, PropNode[1])
PropNode[1]
paste0('.', gsub(PropNode[1], '/', '//')
)
paste0('.', gsub(PropNode[1], '/', '//'))
gsub(PropNode[1], '/', '//')
PropNode[1]
gsub('/', '//', PropNode[1])
paste0('.', gsub('/', '//', PropNode[1]))
xml_child
xml_child(xmlObject, paste0('.', gsub('/', '//', PropNode[1])))
substring(PropNode, 2)
PropNode <- gsub(pattern = '/', '//', PropNode)
PropNode <- substring(PropNode, 2)
xml_child(xmlObject, PropNode)
xml_child(xmlObject, PropNode[1])
PropNode[1]
PropNode <- gsub(pattern = '/', '//', PropNode)
PropNode <- substring(PropNode, 2)
PropNode[1]
PropNode <- PropNode[1]
PropNode
PropNode <- gsub(pattern = '/si:quantityTypeQUDT', replacement = '',
xml_path(QUDTnodes[which(sapply(QUDTnodes, function(x) {as_list(x)[[1]]}) == property)]))
PropNode
PropNode <- PropNode[1]
x <- 1[1]
x
PropNode <- gsub(pattern = '/si:quantityTypeQUDT', replacement = '',
xml_path(QUDTnodes[which(sapply(QUDTnodes, function(x) {as_list(x)[[1]]}) == property)]))
PropNode <- gsub(pattern = '/', '//', PropNode[1])
PropNode
PropNode <- substring(PropNode, 2)
PropNode
PropNode
PropNode <- substring(PropNode, 2)
PropNode
xml_child(xmlObject, PropNode)
xmlObject
QUDTnodes <- xml_find_all(xmlObject, '//si:quantityTypeQUDT')
PropNode <- gsub(pattern = '/si:quantityTypeQUDT', replacement = '',
xml_path(QUDTnodes[which(sapply(QUDTnodes, function(x) {as_list(x)[[1]]}) == property)]))
PropNode <- gsub(pattern = '/', '//', PropNode[1])
PropNode
QUDTnodes <- xml_find_all(xmlObject, '//si:quantityTypeQUDT')
QUDTnodes
xmlObject <- SampDisol()
QUDTnodes <- xml_find_all(xmlObject, '//si:quantityTypeQUDT')
QUDTnodes
property
property <- 'MassRatio'
QUDTnodes <- xml_find_all(xmlObject, '//si:quantityTypeQUDT')
PropNode <- gsub(pattern = '/si:quantityTypeQUDT', replacement = '',
xml_path(QUDTnodes[which(sapply(QUDTnodes, function(x) {as_list(x)[[1]]}) == property)]))
GetValueEstandUncert(xml_find_all(xmlObject, xpath = PropNode))
QUDTnodes
PropNode
xml_find_all(xmlObject, xpath = PropNode)
xml_child(SampDisol(), search = 'mr:coreData//mr:solutionID')
class(xml_child(SampDisol(), search = 'mr:coreData//mr:solutionID'))
class(xml_find_all(xmlObject, xpath = PropNode))
SampDisol()
xml_find_all(xmlObject, xpath = PropNode[1])
message(xml_find_all(xmlObject, xpath = PropNode[1]))
QUDTnodes <- xml_find_all(xmlObject, '//si:quantityTypeQUDT')
QUDTnodes
QUDTnodes[which(sapply(QUDTnodes, function(x) {as_list(x)[[1]]}) == property
QUDTnodes[which(sapply(QUDTnodes, function(x) {as_list(x)[[1]]}) == property)]
xml_parent(QUDTnodes[which(sapply(QUDTnodes, function(x) {as_list(x)[[1]]}) == property)])
xml_parent(QUDTnodes[which(sapply(QUDTnodes, function(x) {as_list(x)[[1]]}) == property)])
QUDTnodes
xml_text(QUDTnodes)
# PropNode <- gsub(pattern = '/si:quantityTypeQUDT', replacement = '',
# xml_path(QUDTnodes[which(sapply(QUDTnodes, function(x) {as_list(x)[[1]]}) == property)]))
xml_parent(QUDTnodes[which(sapply(QUDTnodes, function(x) {as_list(x)[[1]]}) == property)])
# PropNode <- gsub(pattern = '/si:quantityTypeQUDT', replacement = '',
# xml_path(QUDTnodes[which(xml_text(QUDTnodes) == property)]))
xml_parent(QUDTnodes[which(xml_text(QUDTnodes) == property)])
xml_parent(QUDTnodes[which(xml_text(QUDTnodes) == property)])
runApp()
runApp()
runApp()
runApp()
xml_child(SampDisol(), search = 'mr:coreData//mr:solutionSource'))
xml_child(SampDisol(), search = 'mr:coreData//mr:solutionSource')
SiRealXML(
quantityTypeQUDT = 'massFraction', value = ResParcUncSource()$prop[[1]], units = '\\milli\\gram\\kilo\\gram\\tothe{-1}',
uncert = ResParcUncSource()$prop[[3]], covFac = 1)
ResParcUncSource <- reactive(
propagate(expr = expression((Meq - Mbln) * Cedta / Mali * Mato / MassRatioSamp),
data = cbind(Meq = c(convMass(balanza(), reading = MasaEquiv()),
sqrt(2) * uncertConvMass(balanza(), reading = MasaEquiv(), d = 0.1, d.units = 'mg')),
Mbln = c(0, 0.0028/(2*sqrt(3))),
Cedta = ConcStanSolut()$ValUnc,
Mali = c(convMass(balanza(), reading = input$MasaAlic),
uncertConvMass(balanza(), reading = input$MasaAlic)),
Mato = AtMasSampElem()$ValUnc,
MassRatioSamp = MassRatioSamp()$ValUnc),
second.order = FALSE, do.sim = FALSE))
SiRealXML(
quantityTypeQUDT = 'massFraction', value = ResParcUncSource()$prop[[1]], units = '\\milli\\gram\\kilo\\gram\\tothe{-1}',
uncert = ResParcUncSource()$prop[[3]], covFac = 1)
MasaEquiv()
MasaEquiv()
MasaEquiv()
SiRealXML(
quantityTypeQUDT = 'massFraction', value = ResParcUncSource()$prop[[1]], units = '\\milli\\gram\\kilo\\gram\\tothe{-1}',
uncert = ResParcUncSource()$prop[[3]], covFac = 1)
QUDTnodes <- xml_find_all(xmlObject, '//si:quantityTypeQUDT')
xmlObject <- SampDisol()
QUDTnodes <- xml_find_all(xmlObject, '//si:quantityTypeQUDT')
QUDTnodes
xml_parent(QUDTnodes[which(xml_text(QUDTnodes) == property)])
property <- 'MassRatio'
xml_parent(QUDTnodes[which(xml_text(QUDTnodes) == property)])
xml_new_document(xml_parent(QUDTnodes[which(xml_text(QUDTnodes) == property)]))
(xml_parent(QUDTnodes[which(xml_text(QUDTnodes) == property)]))
xml(xml_parent(QUDTnodes[which(xml_text(QUDTnodes) == property)]))
read_xml(xml_parent(QUDTnodes[which(xml_text(QUDTnodes) == property)]))
(xml_parent(QUDTnodes[which(xml_text(QUDTnodes) == property)]))
xml_parent(QUDTnodes[which(xml_text(QUDTnodes) == property)])
xml_parent(QUDTnodes[which(xml_text(QUDTnodes) == property)])[1]
xml_parent(QUDTnodes[which(xml_text(QUDTnodes) == property)])[2]
xml_parent(QUDTnodes[which(xml_text(QUDTnodes) == property)])
xml_child(xml_parent(QUDTnodes[which(xml_text(QUDTnodes) == property)]))
message(xml_child(xml_parent(QUDTnodes[which(xml_text(QUDTnodes) == property)])))
message(xml_parent(QUDTnodes[which(xml_text(QUDTnodes) == property)]))
xml_parent(QUDTnodes[which(xml_text(QUDTnodes) == property)])
SiRealXML(
quantityTypeQUDT = 'massFraction', value = ResParcUncSource()$prop[[1]], units = '\\milli\\gram\\kilo\\gram\\tothe{-1}',
uncert = ResParcUncSource()$prop[[3]], covFac = 1)
GetValueEstandUncert(xml_parent(QUDTnodes[which(xml_text(QUDTnodes) == property)]))
GetValueEstandUncert(xml_parent(QUDTnodes[which(xml_text(QUDTnodes) == property)]))
GetValueEstandUncert(
xml_parent(QUDTnodes[which(xml_text(QUDTnodes) == property)])
)
xml_parent(QUDTnodes[which(xml_text(QUDTnodes) == property)])
SiRealXML(
quantityTypeQUDT = 'massFraction', value = ResParcUncSource()$prop[[1]], units = '\\milli\\gram\\kilo\\gram\\tothe{-1}',
uncert = ResParcUncSource()$prop[[3]], covFac = 1)
xml_child(SampDisol(), search = 'mr:coreData//mr:solutionID')
xml_child(SampDisol(), search = 'mr:coreData//mr:solutionID')
xml_find_all(xmlObject, '//si:quantityTypeQUDT')
xml_parent(QUDTnodes[which(xml_text(QUDTnodes) == property)])
xml_child(xmlObject, search = 'mr:additionalInfo//mr:intermediateSolution')
xmlObject <- initiateTitrationXML()
addInfList <- list('mr:titrationStart' = horaInicio(),
'mr:titrationEnd' = horaFinal())
xml_child(xmlObject, search = 'mr:titrationResult') %>% {
xml_add_child(., .value = xml_child(SampDisol(), search = 'mr:coreData//mr:solutionSource'))
xml_add_child(., .value = xml_child(SampDisol(), search = 'mr:property//mr:substance'))
xml_add_child(., .value = SiRealXML(
quantityTypeQUDT = 'massFraction', value = ResParcUncSource()$prop[[1]], units = '\\milli\\gram\\kilo\\gram\\tothe{-1}',
uncert = ResParcUncSource()$prop[[3]], covFac = 1))
}
xml_child(xmlObject, search = 'mr:additionalInfo') %>% {
xml_add_child(., .value = analyst())
xml_add_child(., .value = 'mr:intermediateSolution') %>%
xml_add_child(., .value = 'mr:referenceSolution')
}
xml_child(xmlObject, search = 'mr:additionalInfo//mr:intermediateSolution') %>% {
xml_add_child(., .value = xml_child(SampDisol(), search = 'mr:coreData//mr:solutionID'))
# xml_add_child(., .value = CopySiRealFromXML(SampDisol(), 'MassRatio', as.char = FALSE))
xml_add_child(., .value = SiRealXML(
quantityTypeQUDT = 'massFraction', value = ResParcUnc()$prop[[1]], units = '\\milli\\gram\\kilo\\gram\\tothe{-1}',
uncert = ResParcUnc()$prop[[3]], covFac = 1))
xml_add_child(., .value = xml_child(SampDisol(), search = 'mr:coreData//mr:timeISO8601'))
}
xml_child(xmlObject, search = 'mr:additionalInfo//mr:intermediateSolution')
xml_add_child(xml_child(xmlObject, search = 'mr:additionalInfo//mr:intermediateSolution'),
.value = CopySiRealFromXML(SampDisol(), 'MassRatio', as.char = FALSE))
as.character(CopySiRealFromXML(SampDisol(), 'MassRatio'))
# HOW CAN I ADD A NODESET FROM ONE DOCUMENT TO OTHER
CopySiRealFromXML <- function(xmlObject, property, node = NULL, as.char = TRUE) {
if (!missing(node)) xmlObject <- xml_child(xmlObject, search = node)
QUDTnodes <- xml_find_all(xmlObject, '//si:quantityTypeQUDT')
return(xml_parent(QUDTnodes[which(xml_text(QUDTnodes) == property)]))
# PropNode <- gsub(pattern = '/si:quantityTypeQUDT', replacement = '',
# xml_path(QUDTnodes[which(sapply(QUDTnodes, function(x) {as_list(x)[[1]]}) == property)]))
# xml_parent(QUDTnodes[which(xml_text(QUDTnodes) == property)])
# PropNode <- gsub(pattern = '/', '//', PropNode[1])
# PropNode <- substring(PropNode, 3)
# if (as.char) return(as.character(xml_find_all(xmlObject, xpath = PropNode))) else return(xml_find_all(xmlObject, xpath = PropNode))
}
CopySiRealFromXML(SampDisol(), 'MassRatio')
xml_add_child(xml_child(xmlObject, search = 'mr:additionalInfo//mr:intermediateSolution'),
.value = CopySiRealFromXML(SampDisol(), 'MassRatio'))
as.character(CopySiRealFromXML(SampDisol(), 'MassRatio'))
read_xml(as.character(CopySiRealFromXML(SampDisol(), 'MassRatio')))
xml_add_child(xml_child(xmlObject, search = 'mr:additionalInfo//mr:intermediateSolution'),
.value = read_xml(as.character(CopySiRealFromXML(SampDisol(), 'MassRatio'))))
xmlObject
message(xmlObject)
runApp()
SiRealXML(
quantityTypeQUDT = 'massFraction', value = ResParcUnc()$prop[[1]], units = '\\milli\\gram\\kilo\\gram\\tothe{-1}',
uncert = ResParcUnc()$prop[[3]], covFac = 1))
SiRealXML(
quantityTypeQUDT = 'massFraction', value = ResParcUnc()$prop[[1]], units = '\\milli\\gram\\kilo\\gram\\tothe{-1}',
uncert = ResParcUnc()$prop[[3]], covFac = 1)
runApp()
runApp()
runApp()
PartialTitrationResults
PartialTitrationResults$results
PartialTitrationResults$results[[1]]()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
PartialTitrationResults
PartialTitrationResults
runApp()
runApp()
PartialTitrationResults
PartialTitrationResults$results
PartialTitrationResults$results[[1]]
PartialTitrationResults$results[[1]]()
sapply(PartialTitrationResults$results, function (x) {return(xml_text(xml_child(x, search = 'mr:solutionSource')))})
sapply(PartialTitrationResults$results, function (x) {return(xml_text(xml_child(x(), search = 'mr:solutionSource')))})
sapply(PartialTitrationResults$results, function (x) {return(xml_text(xml_child(x(), search = '//mr:solutionSource')))})
sapply(PartialTitrationResults$results, function (x) {return(xml_text(xml_child(x(), search = '\\mr:solutionSource')))})
sapply(PartialTitrationResults$results, function (x) {return(xml_text(xml_child(x(), search = './mr:solutionSource')))})
sapply(PartialTitrationResults$results, function (x) {return(xml_text(xml_child(x(), search = 'mr:solutionSource')))})
PartialTitrationResults$results[[1]]()
sapply(PartialTitrationResults$results, function (x) {return(xml_text(xml_child(x(), search = 'mr:titrationResult/mr:solutionSource')))})
PartialTitrationResults$results[[1]]()[2]
message(PartialTitrationResults$results[[1]]())
fecha()
resultID()
resultID <- reactive(paste0('Result_', xml_text(xml_child(SampDisol(), 'mr:solutionID')), '_', horaInicio()))
resultID()
# xml_add_child(., .value = CopySiRealFromXML(SampDisol(), 'MassRatio', as.char = FALSE))
xml_add_child(., .value = SiRealXML(
quantityTypeQUDT = 'massFraction', value = ResParcUnc()$prop[[1]], units = '\\milli\\gram\\kilo\\gram\\tothe{-1}',
uncert = ResParcUnc()$prop[[3]], covFac = 1))
runApp()
runApp()
runApp()
runApp()
SampDisol()
resultID <- reactive(paste0('Result_', xml_text(xml_child(SampDisol(), 'mr:coreData/mr:solutionID')), '_', horaInicio()))
resultID
resultID()
runApp()
runApp()
runApp()
PartialTitrationResults
PartialTitrationResults$results
sapply(PartialTitrationResults$results, function (x) {return(xml_text(xml_child(x(), search = 'mr:titrationResult/mr:solutionSource')))})
runApp()
runApp()
sapply(PartialTitrationResults$results, function (x) {return(xml_text(xml_child(x(), search = 'mr:titrationResult/mr:solutionSource')))})
sapply(PartialTitrationResults$results, function (x) {return(xml_text(xml_child(x(), search = 'mr:coreData/mr:solutionSource')))})
sapply(PartialTitrationResults$results, function (x) {return(xml_text(xml_child(x(), search = 'mr:coreData/mr:resultID')))})
DF <- reactive(data.frame(
Fecha =
sapply(PartialTitrationResults$results, function (x) {return(xml_text(xml_child(x(), search = 'mr:coreData/mr:resultID')))})
sapply(PartialTitrationResults$results, function (x) {return(xml_text(xml_child(x(), search = 'mr:coreData/mr:solutionSource')))})
# DF <- reactive(data.frame(
# Fecha =
sapply(PartialTitrationResults$results, function (x) {return(xml_text(xml_child(x(), search = 'mr:coreData/mr:titrationEnd')))})
sapply(PartialTitrationResults$results, function (x) {return(xml_text(xml_child(x(), search = 'mr:coreData/mr:solutionSource')))})
sapply(PartialTitrationResults$results, function (x) {
return(elemEspa[[xml_text(xml_child(x(), search = 'mr:titrationResult/mr:substance/mr:name'))]]))
sapply(PartialTitrationResults$results, function (x) {
return(elemEspa[[xml_text(xml_child(x(), search = 'mr:titrationResult/mr:substance/mr:name'))]])})
sapply(PartialTitrationResults$results, function (x) {return(xml_text(xml_child(x(), search = 'mr:coreData/mr:solutionSource')))})
sapply(PartialTitrationResults$results, function (x) {
return(xml_text(xml_child(x(), search = 'mr:titrationResult/si:real/si:value')))})
DF <- reactive({
n <- length(PartialTitrationResults$results)
data.frame(
Fecha = sapply(PartialTitrationResults$results, function (x) {
return(xml_text(xml_child(x(), search = 'mr:coreData/mr:titrationEnd')))}),
Material = sapply(PartialTitrationResults$results, function (x) {
return(xml_text(xml_child(x(), search = 'mr:coreData/mr:solutionSource')))}),
Especie = sapply(PartialTitrationResults$results, function (x) {
return(elemEspa[[xml_text(xml_child(x(), search = 'mr:titrationResult/mr:substance/mr:name'))]])}),
Fracc.masica = sapply(PartialTitrationResults$results, function (x) {
return(round(xml_double(xml_child(x(), search = 'mr:titrationResult/si:real/si:value')), 3))}),
Combinar = ifelse(demo(), c(rep(TRUE, 3), rep(FALSE, n - 3)), FALSE))
})
DF
DF()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
DF = data.frame(val = 1:10, bool = TRUE, big = LETTERS[1:10],
small = letters[1:10],
dt = seq(from = Sys.Date(), by = "days", length.out = 10),
stringsAsFactors = FALSE)
rhandsontable(DF, width = 550, height = 300) %>%
hot_col("val", readOnly = TRUE) %>%
hot_row(c(4,6,10), readOnly = TRUE) %>%
hot_cell(7, "dt", readOnly = TRUE)
DF = data.frame(val = 1:10, bool = TRUE, big = LETTERS[1:10],
small = letters[1:10],
dt = seq(from = Sys.Date(), by = "days", length.out = 10),
stringsAsFactors = FALSE)
rhandsontable(DF, width = 550, height = 300, readOnly = TRUE) %>%
hot_col("val", readOnly = FALSE) %>%
hot_row(c(4,6,10), readOnly = TRUE) %>%
hot_cell(7, "dt", readOnly = TRUE)
runApp()
(300/9*5)-32
(300-32)/9*5
runApp()
runApp()
sapply(PartialTitrationResults$results, function (x) {
return(xml_text(xml_child(x(), search = 'mr:titrationResult/si:real/si:units')))})
sapply(PartialTitrationResults$results, function (x) {
return(xml_text(xml_child(x(), search = 'mr:titrationResult/si:real/si:unit')))})
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
data.frame(
'' = FALSE)
data.frame(
'' = FALSE, 1:2)
data.frame(
'd' = FALSE, 1:2)
data.frame(
'.\' = FALSE, 1:2)
data.frame(
'.' = FALSE, 1:2)
runApp()
BalanzasReVa
BalanzasReVa$DCC
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
values
values$DF
values$DF['.']
length(values$DF['.'])
sum(values$DF['.'])
values$DF['.']
input$resultFiles
hot_to_r(input$resultFiles)
ResultsXMLs <- reactive(hot_to_r(input$resultFiles))
sum(ResultsXMLs()['.'])
PartialTitrationResults$results
PartialTitrationResults$results[[1]]
PartialTitrationResults$results[[1]]()
DF <- hot_to_r(input$resultFiles)
DF
which(DF['.'])
which(DF['.'] == TRUE)
which(hot_to_r(input$resultFiles)['.'])
which(hot_to_r(input$resultFiles)['.'] == TRUE)
PartialTitrationResults$results[which(hot_to_r(input$resultFiles)['.'] == TRUE)]
runApp()
runApp()
hot_to_r(input$resultFiles)
hot_to_r(input$resultFiles)['.']
sum(hot_to_r(input$resultFiles)['.'])
sum(hot_to_r(input$resultFiles)['.']) < 2
SelectedXMLs <- PartialTitrationResults$results[which(hot_to_r(input$resultFiles)['.'] == TRUE)]
Substances <- sapply(SelectedXMLs, function (x) {
return(elemEspa[[xml_text(xml_child(x(), search = 'mr:titrationResult/mr:substance/mr:name'))]])})
sapply(SelectedXMLs, function (x) {
return(elemEspa[[xml_text(xml_child(x(), search = 'mr:titrationResult/mr:substance/mr:name'))]])})
unique(Substances)
length(unique(Substances))
SelectedXMLs
files2Combine <- reactiveVal()
files2Combine(files2Combine)
files2Combine
files2Combine()
files2Combine <- reactiveVal()
SelectedXMLs
files2Combine(SelectedXMLs)
files2Combine()
runApp()
runApp()
runApp()
runApp()
runApp()
